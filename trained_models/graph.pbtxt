node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12491
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12491
          }
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\233\tJF\000\000\000\000\000\000\000\000\233\tJF\000\000\000\000\000\000\200?\000\010JF\274\020\002\270,`\243<\236/JF\265\312H:\000\000\000\000\236/JF\000\000\000\000\000\000\000\000\236/JF\000\000\000\000\315\314L=\024\010JF\303;H\272Y\220,=\024\010JF\000\000\000\000\000\000\000\000\024\010JF\000\000\000\000\000\000\000\000\024\010JF\000\000\000\000g\230\275=\024\010JF\000\000\000\200333?\n\010JF\377\261N\265\265:\363>\014\010JF$9\3543\000\000\000\000\014\010JF\000\000\000\000\000\000\000\000\014\010JF\000\000\000\000\232\231\231>\000\010JF$9l\265\336u\274=\n\010JF\377\261N5\000\000\000\000\n\010JF\000\000\000\00033\263>\001\010JF\333*1\265\251On=\n\010JF\333*15\242j/A\266\017JF\234{\0339\217\302\365<\3442JFlK2:$9\3543\232HJF\223\341\3339/\200\222?K5JF\275y\303\271\000\000\000\000K5JF\000\000\000\000\000\000\000\000K5JF\000\000\000\000\000\000\000\000K5JF\000\000\000\000\000\000\000\000K5JF\000\000\000\000\000\000\000\000K5JF\000\000\000\000\221\213\246=\037?JFy\022G9\000\000\000\000\037?JF\000\000\000\000c\206\374;\037?JF\000\000\000\000\230ot&JF\316\001\376\271\235\364\374<\n?JF\373Q\3759$9\3543\n\010JF\212<\213\272\n\327\243<\024\010JF\377\261N5}\255\213=\024\010JF\000\000\000\000\300~E>\024\010JF\000\000\000\000\305\256\035=\024\010JF\350R\226\263\000\000\000\000\024\010JF\000\000\000\000\000\000\000\000\024\010JF\000\000\000\000\000\000\000\000\024\010JF\000\000\000\000\n\327#<\024\010JF\350R\2263\000\000\000\000\024\010JF\000\000\000\000\000\000\000\000\024\010JF\000\000\000\000\000\000\000\000\024\010JF\000\000\000\000\n\327#=\024\010JF\000\000\000\000\000\000\000\000\024\010JF\000\000\000\0009\306\2418\024\010JF\000\000\000\200\000\000\000\000\024\010JF\000\000\000\000\000\000\000\000\024\010JF\000\000\000\0000\273\017@\202\013JF,\005\2138\000\000\000\000\202\013JF\000\000\000\000\374\272|;\000\025JF\227l@9\000\000\000\000\000\025JF\000\000\000\000\000\000\000\000\000\025JF\000\000\000\000\000\000\000\000\000\025JF\000\000\000\000\000\000\000\000\000\025JF\000\000\000\000\000\000\000\000\000\025JF\000\000\000\000\342\225\223>\366\024JF\377\261N\265\000\000\000\000\366\024JF\000\000\000\000\000\000\000\000\366\024JF\000\000\000\000\000\000\000\000\366\024JF\000\000\000\000\217\302u=\000\025JF\377\261N5\000\000\000\000\000\025JF\000\000\000\000\000\000\000\000\000\025JF\000\000\000\000\000\000\000\000\000\025JF\000\000\000\000\007\273|<\000\025JF\000\000\000\200\352\364\235>\000\025JF\000\000\000\000\000\000\000\000\000\025JF\000\000\000\000\000\000\000\000\000\025JF\000\000\000\000\366\343\341;\000\025JF\000\000\000\000\336\241\210=\000\025JF\000\000\000\000\000\000\000\000\000\025JF\000\000\000\000$(\272@\2652JF\230\210\026:\000\000\000\000\2652JF\000\000\000\000\325\352\035=\341!JF\200of>\223gJF\037}\3669\000\000\000\000\223gJF\000\000\000\000\000\000\000\000\223gJF\000\000\000\000\000\000\000\000\223gJF\000\000\000\000\000\000\000\000\223gJF\000\000\000\000\000\000\000\000\223gJF\000\000\000\000\313\010\335=\niJF\275\220\3557\000\000\000\000\niJF\000\000\000\000\000\000\000\000\niJF\000\000\000\000\036VA=\024iJF\315\002L5\000\000\000\000\024iJF\000\000\000\000\\\217B>\niJF\315\002L\265\000\000\000\000\niJF\000\000\000\000\000\000\000\000\niJF\000\000\000\0004\327J<\niJF\000\000\000\200\000\000\000\000\niJF\000\000\000\000\000\000\000\000\niJF\000\000\000\0001\010X@\024iJF\377\261N5\231\016\314=\024iJF\000\000\000\000\000\000\000\000\024iJF\000\000\000\000H\263\235=\024iJF\000\000\000\000\000\000\000\000\024iJF\000\000\000\000\000\000\000\000\024iJF\000\000\000\000\000\000\000\000\024iJF\000\000\000\000\000\000\000\000\024iJF\000\000\000\000\315\314L>\niJF\377\261N\265\343\245\033=\niJF\000\000\000\000*\377\322=\024iJF\377\261N5\317\347\254>\niJF\377\261N\265\000\000\000\000\niJF\000\000\000\000\000\000\000\000\niJF\000\000\000\000\000\000\000\000\niJF\000\000\000\000\315\314L>\010iJF\006FA\264\200Y\033@\niJF\006FA4\023\3450>\niJF\000\000\000\000k\314\333?\010iJF\225\277V\264\000\000\000\000\010iJF\000\000\000\000\000\000\000\000\010iJF\000\000\000\000\315\314L>\000iJF\032\002\031\265\000\000\000\000\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\315\314L>\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\"*\320=\niJF\377\261N5vd\227<\niJF\000\000\000\000\2225\211>\niJF\000\000\000\200\315\314L>\000iJF\377\261N\265\000\000\000\000\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\315\314L>\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\315\314L>\000iJF\000\000\000\000(\033\362=\000iJF\000\000\000\200\000\000\000\000\000iJF\000\000\000\000\315\314L>\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\376\324\216@\niJF\377\261N5\000\000\000\000\niJF\000\000\000\000=\nW>\000iJF\377\261N\265\000\000\000\000\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\0009\230M>\000iJF\000\000\000\000\200\310\2159\000iJF\000\000\000\200\000\000\000\000\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\315\314L>\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\315\314L>\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\250\226M>\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000P\263\235=\niJF\377\261N5\000\000\000\000\niJF\000\000\000\000\315\314L>\000iJF\377\261N\265\000\000\000\000\000iJF\000\000\000\000\033\236J@\niJF\377\261N5>\273\231?\033iJF\023n\2465\236\357\247=\203kJF\310\350B8\000\000\000\000\203kJF\000\000\000\000\326\024~>\002iJF\361\265J\270\000\000\000\000\002iJF\000\000\000\000\2275\305?\010iJF\353\365\3664\315\314L>\000iJF\341\276#\265P\263\235=\niJF\377\261N5\000\000\000\000\niJF\000\000\000\000G50<\niJF\000\000\000\000\315\314L>\000iJF\377\261N\265\000\000\000\000\000iJF\000\000\000\000\256\310\333<\niJF\377\261N5j\346\263?\010iJF\315\002L\264`\345P=\000iJF~`\036\265\017{\2418\niJF\377\261N5\000\000\000\000\niJF\000\000\000\000WN)?\007iJF\353\365v\264\000\000\000\000\007iJF\000\000\000\000\000\000\000\000\007iJF\000\000\000\000\000\000\000\000\007iJF\000\000\000\000\357Wo@\314tJF\002\037n9wu\265>\372\177JF\242=buJF\035\020W\271i\0302A\215\202JFN^\2059\000\000\000\000\215\202JF\000\000\000\000[\364c?\\\230JFR\205\3349\341z\210@\035\221JF\262q\022\271\000\000\000\000\035\221JF\000\000\000\000\000\000\000\000\035\221JF\000\000\000\000\315\314L>\\\214JF\365>\300\270\000\000\000\000\\\214JF\000\000\000\000\000\000\000\000\\\214JF\000\000\000\000$[\232@\020\221JF\217;\2768\213\226\235>\000\216JF\356\301wy\215JF\353I*\267\315\314L>I\210JF\271\261\321\270\242&|<\354\213JFH\375\2228\000\000\240@\264kJF\275\336\"\272\n\327\243=\024\200JFi&\3169\315\314L>\024\200JF\000\000\000\000\000\000\000\000\024\200JF\000\000\000\000\000\000\000\000\024\200JF\000\000\000\000\000\000\000\000\024\200JF\000\000\000\000\000\000\000\000\024\200JF\000\000\000\000\312\203\222?\003\200JF\251{\256\265\000\000\000\000\003\200JF\000\000\000\000\000\000\200?fiJF\306\261\344\271\315\314L>\000iJF&\205\001\267\000\000\000\000\000iJF\000\000\000\000\000\000\000\000\000iJF\000\000\000\000\373\207\254>\000iJF\000\000\000\200\000\000\000\000\000iJF\000\000\000\000-U\020=\366hJF\377\261N\265\315\314L>\024hJF\277\205\216\267\000\000\000\000\024hJF\000\000\000\000\000\000\000\000\024hJF\000\000\000\000\315\314L>\000hJFfZ\315\265\252\320\324?\thJF\251{.5f:\240?\344gJF\242\347;\266\315\314L>\274YJF\361:\217\271\213\351\327<\nXJF\342\021\t\270\013`J:\000XJF\377\261N\265\000\000\000?\000XJF\000\000\000\000\200\327#<\000XJF\000\000\000\000\212\326\215>\003XJF\\|a4\000\000\000\000\003XJF\000\000\000\000\013\262\356>\000XJF\\|a\264\315\314L>RQJF\3016\007\271\227\300\235=\003XJF o\0079~\rK>\nXJFL\261\0335\315\314L>\000XJF\377\261N\265\336\316\227<\nXJF\377\261N5\220\300\035=\nXJF\000\000\000\000\000\000\000?\000XJF\377\261N\265\000\000\000\000\000XJF\000\000\000\000\000\000\000\000\000XJF\000\000\000\000\000\000\000\000\000XJF\000\000\000\000\315\314L>\000XJF\000\000\000\000\232\231\231>\000XJF\000\000\000\000\211\257\013>\nXJF\377\261N5\033\'\246@\3424JFu\3531\272\000\000\000\000\3424JF\000\000\000\000z\245\314>\035\024JFA\361%\272\315\314L>\277\tJFB5R\271\324\337w?\203\020JF\0302\t9\356\207\222>\205\010JFG\001\"\271\315\314L>{\010JF\377\261N\265\3521\251>\205\010JF\377\261N5_v\237>{\010JF\377\261N\265\315\314L>{\010JF\000\000\000\000\000\000\000\000{\010JF\000\000\000\000p\272\371={\010JF\000\000\000\000\315\314L>{\010JF\000\000\000\000\000\000\000\000{\010JF\000\000\000\000\336N\205?\205\010JF\377\261N5\315\314L>{\010JF\377\261N\265\241\324b>{\010JF\000\000\000\000\335e\272>\177\010JF\242\347\2734\232\231\231>{\010JF\242\347\273\264\000\000\000\000{\010JF\000\000\000\000\315\314L>{\010JF\000\000\000\000\000\000\000\000{\010JF\000\000\000\000P7\025>\205\010JF\377\261N5\272e\265>\177\010JF$9\354\264\000\000\000\000\177\010JF\000\000\000\000\000\000\000\000\177\010JF\000\000\000\000\214\210\220@\202\010JF\353\365v4\000\000\000\000\202\010JF\000\000\000\000\000\000\000\000\202\010JF\000\000\000\000\315\314L>{\010JF\350R\026\265\000\000\000\000{\010JF\000\000\000\000\000\000\000\000{\010JF\000\000\000\000\315\314L>{\010JF\000\000\000\000\000\000\000\000{\010JF\000\000\000\000\n\327\243=\205\010JF\377\261N5Wk\363<\205\010JF\000\000\000\000\315\314L>{\010JF\377\261N\265\000\000\000\000{\010JF\000\000\000\000szf<{\010JF\000\000\000\000\315\314L>{\010JF\000\000\000\000\000\000\000\000{\010JF\000\000\000\000\000\000\000\000{\010JF\000\000\000\000R\270\236>{\010JF\000\000\000\000\000\000\000\000{\010JF\000\000\000\000\000\000\000\000{\010JF\000\000\000\000\315\314L>{\010JF\000\000\000\000\000\000\000\000{\010JF\000\000\000\000\000\000\000\000{\010JF\000\000\000\000b\306N>{\010JFw\314+2\000\000\000\000{\010JF\000\000\000\000\000\000\000\000{\010JF\000\000\000\000\366\227-@\224\nJF.?*8\000\000\000\000\224\nJF\000\000\000\000\024\222\252>q\031JF\030\242\2269\315\314L>q\031JF\000\000\000\000\000\000\000\000q\031JF\000\000\000\000\000\000\000\000q\031JF\000\000\000\000\315\314L>q\031JF\000\000\000\000\000\000\000\000q\031JF\000\000\000\000\000\000\000\000q\031JF\000\000\000\000\315\314L>q\031JF\000\000\000\000\000\000\000\000q\031JF\000\000\000\000\000\000\000\000q\031JF\000\000\000\000\n\346\214>s\031JF\\|a4\000\000\000\000s\031JF\000\000\000\000\000\000\000\000s\031JF\000\000\000\000\315\314L>q\031JF\\|a\264\000\000\000\000q\031JF\000\000\000\000\371\240\277?\365\014JF_\365|\271\007+J:\270\030JF\333ln9\311\215\345?\t\010JF\217\026\251\271\315\314L>\005\010JF\350R\226\264x\267\354>\007\010JF!\226\0134B2\256>\000\010JF!\226\013\265\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000=\nW>\000\010JFw\314+3\000\000\000\000\000\010JF\000\000\000\000&\361\235=\n\010JFj\244F5\315\314L>\000\010JF\377\261N\265\332\254\227:\n\010JF\377\261N5\000\000\000\000\n\010JF\000\000\000\000\315\314L>\000\010JF\377\261N\265\000\000\000\000\000\010JF\000\000\000\000\315\314L>\000\010JF\000\000\000\200\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\315\314L>\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000:0@@\t\010JF\324\226>5\000\000\000\000\t\010JF\000\000\000\000\000\000\000\000\t\010JF\000\000\000\000\315\314L>\000\010JF\324\226>\265\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\315\314L>\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000W\231\245<\n\010JF\377\261N5\315\314L>\000\010JF\377\261N\265\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\315\314L>\000\010JF\000\000\000\000\224\367R<\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\315\314L>\000\010JF\000\000\000\000\007\377\035=\n\010JF\377\261N5\000\000\000\000\n\010JF\000\000\000\000\315\314L>\000\010JF\377\261N\2656\315[?\n\010JF\377\261N5\313~E?\n\010JF\000\000\000\000\315\314L>\000\010JF\377\261N\265\000\000\000\000\000\010JF\000\000\000\000\027\313|;\n\010JF\377\261N5\350j\333>\000\010JF\377\261N\265\315\314\314=\000\010JF\000\000\000\000\315\314L>\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\315\314L>\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\255\317\310<\n\010JF\234SI5\n\327#<\n\010JFw\314\2532\000\000\000\000\n\010JF\000\000\000\0008\006\204>\002\010JF\260\017!\265\000\000\000\000\002\010JF\000\000\000\000+\207n@\n\010JF\260\017!5],\213>\n\010JF\000\000\000\000\216\227\212<\n\010JF\000\000\000\000\000\000\000\000\n\010JF\000\000\000\000\315\314L>\000\010JF\377\261N\265\013`J:\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\315\314L>\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000rE\205>\002\010JF\006FA4\324$\250>\n\010JF~`\0365T\332t>\002\010JF\251{.\265\020\366\203?\n\010JFw\314+5\000\000\000\000\n\010JF\000\000\000\000\315\314L>\000\010JF\377\261N\265\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\303\365\204@\000\010JF\000\000\000\200\000\000\000\000\000\010JF\000\000\000\000;\001\315?\n\010JF\377\261N5K\263R>\000\010JF\234SI\265\n\200!=\n\010JF\234SI5\000\000\000\000\n\010JF\000\000\000\000\000\000\000\000\n\010JF\000\000\000\000\000\000\000\000\n\010JF\000\000\000\000=\nW>\000\010JFj\244F\265\000\000\000\000\000\010JF\000\000\000\000\312(.@\300\376IF\312\231;\271}\317\n?\006\010JF\243\032<9\372]\320>\000\010JF\213\210\003\265w\372\243>\000\010JF\000\000\000\200\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\315\314L>\000\010JF\000\000\000\000b\350\246;\010\010JF~`\0365-\313\374;\n\010JF\315\002L4\315\314L>\000\010JF\377\261N\265\030\037\024@\n\010JF\377\261N5\024\320$@\n\010JF\000\000\000\000\315\314L>\000\010JF\377\261N\265\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\315\314L>\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\006\372y>\002\010JF\350R\0264\000\000\000\000\002\010JF\000\000\000\000\000\000\000\000\002\010JF\000\000\000\000\000\000\000\000\002\010JF\000\000\000\000\000\000\000\000\002\010JF\000\000\000\000\000\000\000\000\002\010JF\000\000\000\000\253\317\335?\t\010JF\204\364\0205\000\000\000\000\t\010JF\000\000\000\000\000\000\000\000\t\010JF\000\000\000\000\000\000\000\000\tn\010JF\377\261N5\342\351\275?\n\010JF\000\000\000\000\315\314L>\000\010JF\377\261N\265\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\315\314L>\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\315\314L>\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\315\314L>\000\010JF\000\000\000\000r\376\035>\312\010JFM\257\1777\000\000\000\000\312\010JF\000\000\000\000\315\314L>\366\013JFK\236\2008\000\000\000\000\366\013JF\000\000\000\000\000\000\000\000\366\013JF\000\000\000\000\315\314L>\366\013JF\000\000\000\000\000\000\000\000\366\013JF\000\000\000\000\000\000\000\000\366\013JF\000\000\000\000\000\000\000\000\366\013JF\000\000\000\000\000\000\000\000\366\013JF\000\000\000\000\315\314L>\366\013JF\000\000\000\000\357\373\035=\000\014JF\377\261N5\0358+@e\034JF\2551\2469D\245\210?A)JFyN\2029\235b\300>\366/JF\320\327\0079\000\000\000\000\366/JF\000\000\000\000i0\212?\376/JFE\035)5\000\000\000\000\376/JF\000\000\000\000\315\314L>\366/JFE\035)\265\000\000\000\000\366/JF\000\000\000\000\000\000\000\000\366/JF\000\000\000\000\000\000\000\000\366/JF\000\000\000\000\004\335\035>\2233JF\262q\2228\315\314L>\0240JF(\224\215\270\250\331\235>\3417JF,\375\0359\000\000\000\000\3417JF\000\000\000\000\315\314L>\203HJF(t\2509\000\000\000\000\203HJF\000\000\000\000\000\000\000\000\203HJF\000\000\000\000\275\263{@\357pJF\323\235L:\247\341\211>\n\221JFLi\":\357\347\221<\006\200JF.\006\254\271\315\314L>\303YJF\021\177A\272\320<\034>p\222JF\223h\217:\000\000\000\000p\222JF\000\000\000\000\001\005y?s\200JFy\341\265\271\000\000\000\000s\200JF\000\000\000\000\315\314L>Q>JF`3\247\272\230\300\035=\000XJF\256\010\002:\000\000\000\000\000XJF\000\000\000\000\000\000\000\000\000XJF\000\000\000\000\315\314L>\330<JF\326o\t\272\000\000\000\000\330<JF\000\000\000\000\000\000\000\000\330<JF\000\000\000\000\315\314L>d>JFV\221\3727\000\000\000\000d>JF\000\000\000\000\000\000\000\000d>JF\000\000\000\000\315\314L>D>JF|\273!\266\031\324\235=\000?JFo\222n7\n\327\243=\003?JFY\331\2004\250W*@\025?JF\333*\2615\000\000\000\000\025?JF\000\000\000\000\242\214Y>\013?JFj\244F\265\352\311\235<\nLJF\005\236\2039\000\000\000\000\nLJF\000\000\000\000\315\314L>W>JF\236\260\212\271\000\000\000\000W>JF\000\000\000\000\000\000\000\000W>JF\000\000\000\000\315\314L>\270>JF8\364\3656\000\000\000\000\270>JF\000\000\000\000\000\000\000\000\270>JF\000\000\000\000\315\314L>\354>JF&\205\2016\000\000\000\000\354>JF\000\000\000\000\246[\230?\227TJF%n\3339L\352\313>\021_JFq\030T9\025E~;\326lJFj\\\2139\000\000\000\000\326lJF\000\000\000\000\000\000\000\000\326lJF\000\000\000\000\376\0237<=UJFb\275\356\271\315\314L>\024?JF\007M\340\271\000\000\000\000\024?JF\000\000\000\000\022\276&?\264\206JF\332P\265:\324\217\035>\242\226JFf\026\2419\315\314L>\000XJF\003J\236\272C\230\235=\312\213JF\r\013\203:\337O\031@Y\251JF\303r\025:\315\314L>R\\JFD\232\302\272\000\000\000\000R\\JF\000\000\000\000\000\000\000\000R\\JF\000\000\000\000\315\314L>\327^JF\035\315K8\023\375\177?\244\240JF\324z\246:y\313\215>\nlJF\335\350\204\272\315\314L>\005iJF3\\t\270\013`J:\nXJF~\320\253\271\000\000\000\000\nXJF\000\000\000\000\315\314L>H]JF\335%\3248\251\376\231@\001\262JF\227[\326:\000\000\000\000\001\262JF\000\000\000\000\315\314L>pZJF\0340\335\272\000\000\000\000pZJF\000\000\000\000\000\000\000\000pZJF\000\000\000\000\000\000\000\000pZJF\000\000\000\000\315\314L>\nXJF\202\'B\270\000\000\000\000\nXJF\000\000\000\000o\235\035=$\205JFY>d:\315\314L>\331]JFw\254F\272\000\000\000\000\331]JF\000\000\000\000\000\000\000\000\331]JF\000\000\000\000\315\314L>\310`JF\223Em8\310-\260@\376\255JF/X\303:\n\327#<\303\316JF?\213%:z6\253<d\203JF\240E\276\272\263\025\007<\000\200JF\0302\211\270\315\314L>\275qJF\2358\220\271\000\000\000\000\275qJF\000\000\000\000\027\023\200?\000\250JF|:\211:i\226M>\366\247JF\377\261N\2659\264\310=\366\247JF\000\000\000\200\000\000\000\000\366\247JF\000\000\000\000\000\000\000\000\366\247JF\000\000\000\000\315\314L>\000\200JF\356\351I\272\000\000\000\000\000\200JF\000\000\000\000\000\000\000\000\000\200JF\000\000\000\000+\366W>\001\200JFw\314+3\000\000\000\000\001\200JF\000\000\000\000\000\000\000\000\001\200JF\000\000\000\000/\335\344>\000\250JF0CJ:\000\000\000\000\000\250JF\000\000\000\000\315\314L>\310\226JF\206\001\256\271\000\000\000\000\310\226JF\000\000\000\000\357\300\304>\376\312JF\223\362\203:\315\314L>\231gJF\240\357\372\272\206\335\200?V\316JF1\361\001;\000\000\000\000V\316JF\000\000\000\000\315\314L>\017\200JF\\\237\305\272\000\000\000\000\017\200JF\000\000\000\000\315\314L>f\202JF.j=8\000\000\000\000f\202JF\000\000\000\000\023D><\\\251JF\247\001E:\315\314L>R\251JF\377\261N\265\000\000\000\000R\251JF\000\000\000\000\000\000\000\000R\251JF\000\000\000\000\321x\303<R\251JF\000\000\000\000\000\000\000\000R\251JF\000\000\000\000\315\314L>R\251JF\000\000\000\000\000\000\000\000R\251JF\000\000\000\000\000\000\000\000R\251JF\000\000\000\000\026=p>J\211JF\000\327!\272\000\000\000\000J\211JF\000\000\000\000\307\272\214@/\277JF(>\210:\315\314L>\004\200JF\302\205\237\272\000\000\000\000\004\200JF\000\000\000\000\000\000\000\000\004\200JF\000\000\000\000\315\314L>\000\200JF\260\017\241\264\360#\351=\366\247JF\207\021J:\000\000\000\000\366\247JF\000\000\000\000\315\314L>\000\200JF\356\351I\272\205|P=\000\200JF\000\000\000\000\000\000\000\000\000\200JF\000\000\000\000\347sN>\000\200JFw\314+2\000\000\000\000\000\200JF\000\000\000\000\371\340L>\000\200JFw\314+\262\227\372H>\n\200JF\377\261N5\000\000\000\000\n\200JF\000\000\000\000\000\000\000\000\n\200JF\000\000\000\000\000\000\000\000\n\200JF\000\000\000\000j\336\331?\t\200JF\006F\301\263\000\000\000\000\t\200JF\000\000\000\000\000\000\000\000\t\200JF\000\000\000\000\315\314L>\000\200JF?\2116\265\315\314L=\000\200JF\000\000\000\200|\337\320<\n\200JF\377\261N5\315\314L>\000\200JF\377\261N\265\000\000\000\000\000\200JF\000\000\000\000\000\000\000\000\000\200JF\000\000\000\000\315\314L>\000\200JF\000\000\000\000\000\000\000\000\000\200JF\000\000\000\000\000\000\000\000\000\200JF\000\000\000\000\340/\244>\'lJF\223\266\310\271\232\231\231>+fJF\2278\362\270\000\000\000\000+fJF\000\000\000\000=\nW>\000XJF\326]\217\271\000\000\000\000\000XJF\000\000\000\000B\022\216?|\177JF\273\321G:\370g\222>\250bJF\351\307\021\272S\005\313?u\230JF\230\033\210:\000\000\000\000u\230JF\000\000\000\000\000\000\000\000u\230JF\000\000\000\000%\353(@J\245JF~\271\2019\000\000\000\000J\245JF\000\000\000\000\000\000\000\000J\245JF\000\000\000\000\315\314L>\270vJF\241Sk\272\000\000\000\000\270vJF\000\000\000\000Fn*=\256{JF\214\262\3108\315\314L>\205\203JF\335\230\0369\000\000\000\000\205\203JF\000\000\000\000\000\000\000\000\205\203JF\000\000\000\000\315\314L>\205\203JF\000\000\000\000Q#\300<\217\203JF\377\261N5\000\000\000\000\217\203JF\000\000\000\000\355\206\320>\000\244JF\010\010$:\315\314L>\366\243JF\377\261N\265\364\225\211?\366\267JF\375$\3129\013`J:\327\317JFC<\3619\315\314L>\327\317JF\000\000\000\000\000\000\000\000\327\317JF\000\000\000\000*\251c?\341\317JF\377\261N5\000\000\000\000\341\317JF\000\000\000\000\315\314L>\327\317JF\377\261N\265\000\000\000\000\327\317JF\000\000\000\000\231\032\034>\341\317JFj\244F5Zc\035>\341\317JFY\331\00034\207.@\346\221JF\236y\234\272\000\000\000\000\346\221JF\000\000\000\000\333>\014>\\{JF\006\333\343\271\203z`>\\{JF\000\000\000\000\000\000\000\000\\{JF\000\000\000\000\000\000\000\000\\{JF\000\000\000\000\000\000\000\000\\{JF\000\000\000\000\000\000\000\000\\{JF\000\000\000\000\000\000\000\000\\{JF\000\000\000\000\335\330\215>\373{JF\334|H7y\374\205>\354\177JF\355l\2378\000\000\000\000\354\177JF\000\000\000\000)\\\217>\036qJF\346\271\225\271\000\000\000\000\036qJF\000\000\000\000\000\000\000\000\036qJF\000\000\000\000ff\346>ktJFj\241\2058B>\030@\270zJF\201\003\3778\000\000\000\000\270zJF\000\000\000\000\000\000\000\000\270zJF\000\000\000\000\315\314L>\\{JF\345\007O7\2305|=\354\177JF\211|\2708\000\000\000\000\354\177JF\000\000\000\000\315\314L>[lJF\276\331\305\271\000\000\000\000[lJF\000\000\000\000\250(\002>\270~JFe\311\2719\000\000\000\000\270~JF\000\000\000\000\315\314L>KmJF\000D\260\271\000\000\000\000KmJF\000\000\000\000\000\000\000\000KmJF\000\000\000\000\315\314L>m\\JF)\241\252\271\000\000\000\000m\\JF\000\000\000\000\000\000\000\000m\\JF\000\000\000\000\000\000\000\000m\\JF\000\000\000\000\000\000\000\000m\\JF\000\000\000\000\303\\\326>CtJF\3446\3619\000\000\000\000CtJF\000\000\000\000\000\000\000\000CtJF\000\000\000\000[\321-@GtJF\023n\2464\tD\374;HtJFY\331\2003\000\000\000\000HtJF\000\000\000\000v\014\321?\305|JF\310\311+9\000\000\000\000\305|JF\000\000\000\000\000\000\000\000\305|JF\000\000\000\000\315\314L>\366\177JFL\004\2018\000\000\000\000\366\177JF\000\000\000\000\000\000\000\000\366\177JF\000\000\000\000\315\314L>\366\177JF\000\000\000\000\000\000\000\000\366\177JF\000\000\000\000\000\000\000\000\366\177JF\000\000\000\000\315\314L>\366\177JF\000\000\000\000\000\000\000\000\366\177JF\000\000\000\000o\241\035>\000\200JF\377\261N5\315\314L>\366\177JF\377\261N\265\000\000\000\000\366\177JF\000\000\000\000\000\000\000\000\366\177JF\000\000\000\000\261\007\'=\000\200JF\377\261N5\315\314L>\222{JF\272C\263\270Nb\360?\253\177JF\004\315\2458\000\000\000\000\253\177JF\000\000\000\000\315\314L>rlJF9a\302\271\212D\374;\354sJF\0247\0279\000\000\000\000\354sJF\000\000\000\000\315\314L>m\\JF\345\250\355\271\000\000\000\000m\\JF\000\000\000\000\000\000\000\000m\\JF\000\000\000\000\000\000\000\000m\\JF\000\000\000\000_\345\036>\353rJFV\245\3439\315\314L>\303\\JFs\'\340\271\000\000\000\000\303\\JF\000\000\000\000\000\000\000\000\303\\JF\000\000\000\000\000\000\000\000\303\\JF\000\000\000\000\315\314L>\303\\JFY\331\000\263\000\000\000\000\303\\JF\000\000\000\000\000\000\000\000\303\\JF\000\000\000\000\315\314L>\303\\JF\000\000\000\000\000\000\000\000\303\\JF\000\000\000\000=#\370:\313\\JF\r\33235\000\000\000\000\313\\JF\000\000\000\000\271\023C=\315\\JF\225\277\3263\260rh>\303\\JF\242\347;\265\032\300\037@\315\\JF\242\347;5\013`J:\303\\JF\377\261N\265\321\001}>\303\\JF\000\000\000\000\000\000\000\000\303\\JF\000\000\000\000\000\000\000\000\303\\JF\000\000\000\000\000\000\000\000\303\\JF\000\000\000\000\315\314L>\303\\JF\000\000\000\200\000\000\000\000\303\\JF\000\000\000\0009X,?\315\\JF\377\261N5\177\3057;\303\\JF\377\261N\265\315\314L>\303\\JF\000\000\000\000\000\000\000\000\303\\JF\000\000\000\000\274z\377>\315\\JF\377\261N5\356\240\013>\315\\JF\000\000\000\000\323d\241?\313\\JFY\331\000\264\000\000\000\000\313\\JF\000\000\000\000\n\327\243<\315\\JFY\331\0004\000\000\000\000\315\\JF\000\000\000\000\000\000\000\000\315\\JF\000\000\000\000\315\314L>\303\\JF\377\261N\265\000\000\000\000\303\\JF\000\000\000\000=\n\'?\315\\JF\377\261N55\314\325<\315\\JF\000\000\000\000\000\000\000\000\315\\JF\000\000\000\000\315\314L>\303\\JF\377\261N\265\000\000\000\000\303\\JF\000\000\000\000\000\000\000\000\303\\JF\000\000\000\000\n\327#<\315\\JF\377\261N5\315\314L>\303\\JF\377\261N\265\000\000\000\000\303\\JF\000\000\000\000\000\000\000\000\303\\JF\000\000\000\000\000\000\000\000\303\\JF\000\000\000\000\324D5>\315\\JF\377\261N5\315\314L>\303\\JF\377\261N\265w\230\205>\315\\JF\377\261N5\000\000\000\000\315\\JF\000\000\000\000\000\000\000\000\315\\JF\000\000\000\000\200\301\355>\310\\JF\242\347\273\264P\225o?\325\\JF\201\003\1775\000\000\200?\315\\JF\341\276#\265\n\327\243<\327\\JF\377\261N5\241v\262>\321\\JF$9\354\264\374\245\316>\331\\JF\350R\0265\000\000\000\000\331\\JF\000\000\000\000\000\000\000\000\331\\JF\000\000\000\000\347\373A@\304\202JF\004\343?:\000\000\000\000\304\202JF\000\000\000\000\0326\265>wzJF3\343\'\271\000\000\000?3tJFS\206\375\270\2419\322>\000\210JF3K\3109\000\000\000\000\000\210JF\000\000\000\000b\232+?\367\207JF\242\347;\265\000\000\000\000\367\207JF\000\000\000\000\000\000\000\000\367\207JF\000\000\000\0006\233\035>\000\210JF\242\347;5\000\000\000\000\000\210JF\000\000\000\000\000\000\000\000\000\210JF\000\000\000\000\245\330.?\375\207JF\353\365v\264\'pC=\000\210JF\353\365v4\200j\024>\000\210JF\000\000\000\000\000\000\000\000\000\210JF\000\000\000\000\000\000\000\000\000\210JF\000\000\000\000\000\000\000\000\000\210JF\000\000\000\000\n\327#=\000\210JF\000\000\000\000\354\304\'@!\234JF\010\216\3139}\276@?\236\257JF\240\375\3049\000\000\000\000\236\257JF\000\000\000\000\000\000\000\000\236\257JF\000\000\000\000Xs\370>#\251JF\262\007\003\271\316%\263@7\315JF\201K6:\"\345\245@n\316JF\004\241\3047\275\365\026A\013\342JF\036\022\3069\354}7A\245\010KFO\323B:\032\005\246B\037\331KF\237n\203;C2\262?\r\252MF\020\370\021<\354f*@N%MF<=%\273 \"N? \220KF\036\317\374\273\303\000\374=\262sLF\214\030\217;\205\022\203=Q\223LF\322_\036:}\235&?\t`LF\200X\200\272@\304\n>\010`LF\225\277V\263\315\314L>\365\016LFI\034\313\272\366\262m:\341eKFN\035T\273\033\243\037=\341eKF\000\000\000\000\030\337S>\327eKFj\244F\265jK\r=\341eKFj\244F5\244p\235>\327eKF\377\261N\265-\322\317?\340eKF\r\33235\177\226\205@whKFr\212P8f,\212?w\304KFM\223\347:\205\373\242>\237_LF\'\356B;\017\361\311>\n8LF\342SF\272]rI>\n8LF\000\000\000\000\326\313\010?q/LF6p,\271\307M\034=\n8LFDx,9\262 \020?\227\377KF\275\207\215\272\025\352\277>\346\376KFx\313]\267\335\331R>\000\377KF\277\334\0026\000\000\000\000\000\377KF\000\000\000\000\315\314L>\354\377KF\251\316\2237sO\034>\3355LF_b\207:\317M\034=\0008LF\027a+81\376\004?l\020LF\301rF\272\203Fz;q\020LF\242\347\2734l\357\023?h\020LF\333*1\265\237\221\027=q\020LF\333*15\000\000\000\000q\020LF\000\000\000\000\315\314L>f\020LF\377\261N\265F~\375;f\020LF\000\000\000\200[`\243>g\020LF\225\277V36 K@\372uLF\347\332\376:\000\000\000\000\372uLF\000\000\000\000I\367\002?J\262LFl\006\227:\000\000\000\000J\262LF\000\000\000\000d\327\274>)\210LF\200\277R\272\223\300\375>\037\210LF\315\002L\265\020\315\372:)\210LF\315\002L5C\371\372?(\210LFw\314\253\263\312R\311<)\210LFw\314\2533B\323w>)\210LF\000\000\000\000\000\000\000?\037\210LF\315\002L\265\315\314L>\037\210LF\000\000\000\000\375e\254=)\210LF\315\002L5\247^\226:)\210LF\000\000\000\200`\333(@(\210LFY\331\200\263\371|\014>)\210LFY\331\2003\216\317x@\021\tMF\324W!;\336\000\225>\320\271LF\330\350\305\2729\322\n=\354\305LF\003Fr9hg\372?\341\305LF\315\002L\265\263Y~>\341\305LF\000\000\000\200\360\225n=\353\305LF\234SI5\"\316\032=\354\305LFw\314+2\000\000\000\000\354\305LF\000\000\000\000\243\222\212?\351\305LF\\|a\264\336!M?\351\305LFw\314\2532\000\000\000\000\351\305LF\000\000\000\000\000\000\000\000\351\305LF\000\000\000\000\315\314L>\341\305LF\032\002\031\265z\322\006?\354\305LF\315\002L5\177H\367?p\342LF\220\234\016:\315\314L>\341\356LFB\276x9\271\207z>$\023MFG,5:\254oi>`\034MF*w89u\225\025@\301?MF\364\2410:t\336<?R1MF\234\005\220\271\222o\222@\231uMFc^\252:\000\000\000\000\231uMF\000\000\000\000\315\314L>\244&MF\224\303\304\272\000\000\000\000\244&MF\000\000\000\000\000\000\000\000\244&MF\000\000\000\000\215 b>\316&MF1aQ64\261\311<\327&MFp895\360\362x<\327&MF\000\000\000\000\3155\205>\317&MF~`\036\265\000\000\000\000\317&MF\000\000\000\000\360\362\370;\327&MF~`k\350@\327&MFY\331\000\263\315\314L>\315&MF8\365C\265L}\235>\315&MFw\314\2532\354A\000?\323&MF$9\3544\000\000\000\000\323&MF\000\000\000\000\254NP>\327&MF\260\017\2414\000\000\000\000\327&MF\000\000\000\000!\306\253@}mMFjP\260:%&\314>\014`MF\r\002\206\271\000\000\000\000\014`MF\000\000\000\000\000\000\000\000\014`MF\000\000\000\000fF\n@\277=MF\317\003+\272\000\000\000\000\277=MF\000\000\000\000\000\000\000\000\277=MF\000\000\000\000\356\272\241>\177AMF\275\241\2258\000\000\200>{AMF\350R\226\264$\314\023@\205AMF\315\002L5\000\000\000\000\205AMF\000\000\000\000&x>?\303:MF9\346\006\271l\321a=f(MFc6\267\271\355\360x;f(MF\000\000\000\000\000\000\000\000f(MF\000\000\000\000\264\204F<f(MF\000\000\000\000\315\314L>\\(MF\315\002L\265\000\000\000\000\\(MF\000\000\000\000\373\031F=f(MF\315\002L5\000\000\000\000f(MF\000\000\000\000\000\000\000\000f(MF\000\000\000\000\000\000\000\000f(MF\000\000\000\000\315\314L>\\(MF\315\002L\265\000\000\000\000\\(MF\000\000\000\000_\260\002=f(MF8\365C5\021-\230?\247.MF{\252\3718\315\314L>\270?MFe_\2529\000\000\000\000\270?MF\000\000\000\000\000\000\000\000\270?MF\000\000\000\000\000\000\000\000\270?MF\000\000\000\000\024\270\320:\303?MF\315\002L5ff\346>\270?MF\315\002L\265\000\000\000\000\270?MF\000\000\000\000\315\314D@\303?MF\315\002L5\000\000\000\000\303?MF\000\000\000\000f\370\220>\270?MF\315\002L\2652B\001?\233EMF\246\361\3528\000\000\000\000\233EMF\000\000\000\000\000\000\000\000\233EMF\000\000\000\000\315\314L>\315LMF!\212\0179\000\000\000\000\315LMF\000\000\000\000\000\000\000\000\315LMF\000\000\000\000\000\000\000\000\315LMF\000\000\000\000<\370\223?\327LMF\315\002L5\000\000\000\000\327LMF\000\000\000\000\000\000\000\000\327LMF\000\000\000\000%(\366;\327LMF\000\000\000\200B\234\244;\327LMF\000\000\000\000C\034\343?\341LMF\234SI5\000\000\000\000\341LMF\000\000\000\000\350\034J>\360OMF\203&t8\000\000\000\000\360OMF\000\000\000\000R\270^@\366OMF$9\3544\000\000\000\000\366OMF\000\000\000\000\000\000\000\000\366OMF\000\000\000\000\000\000\000\000\366OMF\000\000\000\000\013\265\216@\001PMF\377\261N5\210d\233=\225jMF\234\217\004:\000\000\000\000\225jMF\000\000\000\000\212B\031?\205qMF\276^\n9\013`J:{qMF\315\002L\265\343\320\232=\205qMF\315\002L5v\2539>\205qMF\000\000\000\000\000\000\000\000\205qMF\000\000\000\000euF<{qMF\315\002L\265\2150\014A9wMFv\347\3448\000\000\000\0009wMF\000\000\000\000\000\000\000\0009wMF\000\000\000\000\000\000\000\0009wMF\000\000\000\000\000\000\000\0009wMF\000\000\000\000\000\000\000\0009wMF\000\000\000\000\000\000\000\0009wMF\000\000\000\000\000\000\000\0009wMF\000\000\000\000\000\000\000\0009wMF\000\000\000\000\000\000\000\0009wMF\000\000\000\000\000\000\000\0009wMF\000\000\000\000\364\375X@LvMF\335\"\223\267.\021|>\270wMF|\276\3427\000\000\000\000\270wMF\000\000\000\000\000\000\000\000\270wMF\000\000\000\000\000\000\000\000\270wMF\000\000\000\000\302\000\014@\362wMF\322\362\2176{\313%?\365wMF\353\365v4\226O)@\017\266MF]\276\232:\311\177\350=\000\360MF\3576\220:\n\2637?\000\360MF\000\000\000\000\242N$?\020\360MF\341\276\2435\000\000\000\000\020\360MF\000\000\000\000\315\314\314=\366\357MF$\340\004\266\34000<\000\360MF\315\002L5\000\000\000\000\000\360MF\000\000\000\000\000\000\000\000\000\360MF\000\000\000\000\000\000\000\000\000\360MF\000\000\000\000\341ww=\000\360MF\000\000\000\200\014\014\362;\000\360MF\000\000\000\000\032\033\t@\000\360MFw\314\253\262\000\000\200?\000\360MFw\314\2532\000\000\000\000\000\360MF\000\000\000\000\013\310 @\000\360MF\000\000\000\200\000\000\000\000\000\360MF\000\000\000\000+\260x@m\rNF\323R\022:\000\000\000\000m\rNF\000\000\000\000\273\303\032=\000@NF\364S{:\367u\2368\000@NF\000\000\000\000o\302\014A\000@NF\000\000\000\000\3704\204?\010@NFL\261\0335\265\303\032>\n@NF?\21164\000\000\000\000\n@NF\000\000\000\000\315\302\321>\022ENF\314\333\3078\262\020\203=OUNF>1\2419r\277D=\232WNF\"\02368\336\263\003@\024XNF\201\252\0277\000\000\000\000\024XNF\000\000\000\000\240\331I>4\200NF\220 G:p\0234?\373\250NFo6J:\000\000\000\000\373\250NF\000\000\000\000Z\333\t@@\257NF\326}\3708\034\342\214>8\277NF:8\2369\000\000\000\0008\277NF\000\000\000\000\306t\232=q\251NF\222\272\327\271\322\360@?\363\314NF!\362/:\316\3306@\202\362NFb\3729:\363@\232=\341\356NF\250\247\217\270we\232=\354\363NF\001\226\3078\000\000\000\000\354\363NF\000\000\000\000\340EB;q\274NF\336A\211\272\303\241\007@\214\346NF$\217P:\000\000\000\000\214\346NF\000\000\000\000i\340X@M\371NF(\245\2719\310\r\263?\000\374NFi\250U8\366\304@?\000\374NFw\314+\262\202\315\205>\000\374NF\000\000\000\000*7\232=\000\374NFw\314+2mg\247<\000\374NF\000\000\000\000\000\000\000\000\000\374NF\000\000\000\000\220)n> \373NFn\224\212\267\017\013U@y\004OF\021\00099\3648\032>\231\371NF\347\"W\271\361\224\034@\314\372NF\250\177\2757h\200\337?\276:OF\'-\236:!\347\226@\363gOF\325d_:\000\000\000\000\363gOF\000\000\000\000\022s\375>)1OF&@\207\272u\020\032=\0000OF\361\212\267\267\205_\311?\371/OFY\331\000\265\000\000\000\000\371/OF\000\000\000\000\000\000\000\000\371/OF\000\000\000\000\000\000\000\000\371/OF\000\000\000\000\000\000\000\000\371/OF\000\000\000\000\000\000\000\000\371/OF\000\000\000\000\000\000\000\000\371/OF\000\000\000\000\000\000\000\000\371/OF\000\000\000\000\000\000\000\000\371/OF\000\000\000\000\210\177i=\0000OFY\331\0005\206\035\320?\0000OF\000\000\000\000\303v@=\0000OF\000\000\000\000\205\020\232=\0000OF\000\000\000\200\211\345\"?\375/OFY\331\200\264\000\000\000\000\375/OF\000\000\000\000n4\300>\366/OF!\226\013\265Zg\223>\371/OF\353\365v4\000\000\000\000\371/OF\000\000\000\000\000\000\000\000\371/OF\000\000\000\000u\020\032=\0000OF!\226\0135\013`J:\366/OF\234SI\265\204\033~=\0000OF\234SI5\000\000\000\000\0000OF\000\000\000\000u\020\032=\0000OF\000\000\000\000\236\247G?\375/OF\225\277V\264\n\327\243<\0000OF\225\277V4\000\000\000\000\0000OF\000\000\000\000\243\001\324?\365POFl\341\":\000\000\000\000\365POF\000\000\000\000\024Ye?\316IOF\014Q\r\271\270`\231?\363tOF\205!U:\253\001x@o{OF\006\020\0009\000\000\000\000o{OF\000\000\000\000\216\026\"?\2362OF\032\257\263\272\000\000\000\000\2362OF\000\000\000\000\320DX>\3663OF\335%\3247\000\000\000\000\3663OF\000\000\000\000\\\000\344@8\237OF\265\204\004;<N\277=\276\263OF&p\3129\315\314L>\205\233OF4\324\356\271$9\3543\205\233OF\000\000\000\000\000\000\000\000\205\233OF\000\000\000\000o\022\203:\217\233OF\234SI5\315\314L>\205\233OF\234SI\265\000\000\000\000\205\233OF\000\000\000\000r&\360?\020\257OF\213\312\3009\000\000\000\000\020\257OF\000\000\000\000\325,\201>G\303OF\225U\3079tFd@\263\331OF+\006\3359\2132s>\024\263OF\370F>\272\013`\312:\366\247OF|<[\271\345=\032?\366\247OFw\314+2\262hf>C\316OFA\335<:1z;>H\033PF\035\305\275:Z\263\372?\001\033PF\251{\256\266\315\314L>+\315OF\266\201\277\272\000\000\000\000+\315OF\000\000\000\000\000\000\000\000+\315OF\000\000\000\000\315\314L>\024\334OF\231\372\2229\000\000\000\000\024\334OF\000\000\000\000\035\365\277>\037\334OF\234SI5y7\360>\237\346OF\016\355N9\343;\306?\035\035PF\2652\206:\232\231\231>\024\334OF8\376\237\272\355\r\276;\024\334OF\000\000\000\000\355A\366@\037\334OF\234SI5\310EU=\037\334OF\000\000\000\000\315\314L>\024\334OF\234SI\265\365\207\002?\037\334OF\234SI5\317\323\371>\037\334OF\000\000\000\000\016\265u<\037\334OF\000\000\000\000\260\037\236<\037\334OF\000\000\000\200}v\272?72PF\274\022\324:\262\037\\>(\tPF\250\362I\272P\323\017@aOPF\206\322\254:\234\344\305?NhPF^\r\3659\315\314L>\366OPF\2067\357\271\355LQ@B\210PF\024_\212:\260\355\276>\304JPF\260\373\226\272\315\314L>\030\373OFY\326\303\272\000\000\000\000\030\373OF\000\000\000\000L\246\312>:iPF\000\217\007;\246\250 @B\227PF\333,b:~b\361<*\234PFU\252\3008\374\354Q?\304\231PF\3142<\270\315\314L>3{PFq\014\026\272\275\336\342@L\331PF\320\026\347:4\211\3669={PF\241\225\346\272\235lr?\247\236PF\023\360-:(\321\036?=\263PF\221\027\3129(~L=\327\334PFQ\036L:\315\314L>H|PF\235\263\354\272$9\3543\341\334PF\201:\355:\341\325\240>\n\334PF\370\310\203\267)\\\217>\244\320PF\022\211_\271\314\021>=\244\333PF\351\273W9Gx\225<\232\333PF\234SI\265\324\314L>\302\232PF#\365\236\272\000\000\000\000\302\232PF\000\000\000\000!\333\337@\322\346PF\352\257\272:\361\246\207@\375\000QFaF\000:\000\000\000\000\375\000QF\000\000\000\000@\245\205>\254\374PF\244\"\251\270\205>\312=\205\367PFh\377\311\270\010\005\250>\205\367PFw\314+2\316\252??,\275PF}\366\216\272 \361>?$\367PF11\216:\212\226R?\354\371PF\240\357Y8d6\305?\340\377PF\344N\3518\000\000\000\000\340\377PF\000\000\000\000\n\327\243<\\\366PF\202r:\271q=\212>=\354PF\272nF\271M\\S@\261\002QF\377!\3349\3325\n>\253\352PFkf\353\271\276\002\261=\306\365PF3\257Y9\213\225\314>n\356PFf\345\017\271\n\327#<\315\365PFZv\0209\270\036\005>\313\365PF\350R\026\264\315\314\314>\325\353PFP9C\271\000\000\000\000\325\353PF\000\000\000\000\000\000\000\000\325\353PF\000\000\000\000\000\000\000\000\325\353PF\000\000\000\000\000\000\000\000\325\353PF\000\000\000\000\207\007\256?2\352PFs\203\000\270\000\000\000\0002\352PF\000\000\000\000\365v\364;3\352PF$9\3543\000\000\000\0003\352PF\000\000\000\000\315\314L>)\352PF\234SI\265\037\245\260@\363\357PFG\004\3438\217\363}?q\373PFiQa9\253\242W>D\003QFCM\0319\277/\240=\341\tQF\\\245\0019\233\371r>#\357PFP\000\003\272\n\327#<\327\tQF\302\336\002:\n\327#<\327\tQF\000\000\000\000\332\014e>\327\tQF\000\000\000\000\357\266W?u\005QF\237\261\253\270\217\302\365=\307\tQF\0358\2518\324}E>x\tQF\006F\301\266\024\256\307>\337\002QF\254<\001\271)\t\020>\234\tQFe\t\0049{\024.>\315\tQF\211<n6\267b\023@\324\tQF!\226\0135\000\000\000\000\324\tQF\000\000\000\000\214\017\272>\005\010QF\363\331\r\270o\022\203:\000\010QF?\211\266\264\000\000\000\000\000\010QF\000\000\000\000=\nW>\000\010QFw\314+3\000\000\000\000\000\010QF\000\000\000\000\000\000\000\000\000\010QF\000\000\000\000d^\207>\002\010QF\260\017!4\n\327#<\n\010QF\032\002\0315\000\000\000\000\n\010QF\000\000\000\000\315\314L>\000\010QF\234SI\265\n\327\243<\n\010QF\234SI5\315\314L=\n\010QF\000\000\000\200\256G\341>\006\010QF?\211\266\264\000\000\000\000\006\010QF\000\000\000\000\000\000\000\000\006\010QF\000\000\000\000\000\000\200>\002\010QF!\226\213\264\n\327#=\n\010QF\260\017!5\324\016e>\n\010QF\000\000\000\000\315\314L=\n\010QF\000\000\000\200\000\000\000\000\n\010QF\000\000\000\000\000\000\000\000\n\010QF\000\000\000\000\315\314L>\000\010QF\234SI\265pU\233?\000\010QF\000\000\000\200P\374\216@O\010QF \360\3006\000\000\000\000O\010QF\000\000\000\0000?\017?\002\010QF\242\347\273\266\000\000\000\000\002\010QF\000\000\000\000\n\327#<\n\010QF~`\0365\315\314L>\000\010QF\234SI\265\000\000\000\000\000\010QF\000\000\000\000\000\000\000\000\000\010QF\000\000\000\000\317\260\233@\311\010QF\005\240v7\n\327#<\354\tQF\264\253\2617\022n\307?\345\nQF\255\301\2307=\242\022?\374\013QF\253 \2537\000\000\000\000\374\013QF\000\000\000\000\000\000\000\000\374\013QF\000\000\000\000\226;\267<\000\014QF!\226\2134\037\205k>\367\013QF\251{.\265\000\000\000\000\367\013QF\000\000\000\000\000\000\000\000\367\013QF\000\000\000\000\000\000\200>\370\013QF\225\277V3\371`\202=\000\014QF\260\017!5\000\000\000\000\000\014QF\000\000\000\000\240\211\350?\000\014QF\000\000\000\200\000\000\000\000\000\014QF\000\000\000\000n\334bn\327\243<\000\014QF\000\000\000\200\256Ga>\367\013QF?\2116\265\000\000\000\000\367\013QF\000\000\000\000\000\000\000\000\367\013QF\000\000\000\000\256\274\205?y\017QF]\215\2118\035\366o;\366\017QFA\201\0307\301\227\200?\376\017QF\260\017!5\000\000\000\000\376\017QF\000\000\000\000\000\000\000\000\376\017QF\000\000\000\000\000\000\000\000\376\017QF\000\000\000\000\256\304^>\367\017QF\204\364\020\265\033\006e>\000\020QFp895J\244\000@\317\025QF\370\237\3438\000\000\000\000\317\025QF\000\000\000\000)\\\217=\346\'QF\333*\2619\253On>\354\033QF\245\213j\271\374\223\306>\271&QFT\242S9\246\360]@\373)QF>\016\1778\332\003]>\312+QFy\304\r8\000\000\000\000\312+QF\000\000\000\000\315\314L>\366\'QF\002\375\225\270fI\200;\366\'QF\000\000\000\200\000\000\000\000\366\'QF\000\000\000\0001\240\315:\000(QF\234SI5\243\261\177?\000(QF\000\000\000\200\315\314L>\366\'QF\234SI\265\000\000\000\000\366\'QF\000\000\000\000\000\000\000\000\366\'QF\000\000\000\000\315\314L>\366\'QF\000\000\000\000\000\000\000\000\366\'QF\000\000\000\000\177?{=\000(QF\234SI5\315\314L>\366\'QF\234SI\265\'%\356<\000(QF\234SI5\000\000\000\000\000(QF\000\000\000\000%C\230=\000(QF\000\000\000\000)\204\016?\374\'QF\204\364\220\264\000\000\000\000\374\'QF\000\000\000\000\000\000\000\000\374\'QF\000\000\000\000\315\314L>\366\'QFY\331\000\265\344\356g>\367\'QF$9\35434\367\216<\000(QFw\314+5\000\000\000\000\000(QF\000\000\000\000\0213XA#0QF\322\\\0379\n\230K@\3773QF\215\031\2278:w\262@ >QF\342SF9\215u\025?\362OQF\216k\2569\000\000\000\000\362OQF\000\000\000\000\000\000\000\000\362OQF\000\000\000\000\n\327#<\366OQF!\226\2134\033v\200>\356OQF\260\017!\265\330\311\205?{SQF\021\365\2128\000\000\000\000{SQF\000\000\000\000{\224\376?y[QF\343o\0349\000\000\000\000y[QF\000\000\000\000\322m)?\000`QF\036 \2618>BM:\366_QF\234SI\265\3315z?\000`QF\234SI5\320;\232?\376_QFY\331\000\264\256G\341=\000`QFY\331\0004\n\327#<\000`QF\000\000\000\000\035\372\225?\377_QF\006F\301\263\006\344\355?\377_QFw\314+2\000\000\000\000\377_QF\000\000\000\000ft\030>\000`QFw\314\2533\275\252\222?\324sQF\331\365\3019\000\000\000\000\324sQF\000\000\000\000\277\0066@0\270QF\340\031\247:_\342\'=\210\326QF\223&\024:\315\314L>){QF\022\361\336\272\217\302\365<.\310QF6?\274:\007i>;={QF\030\310\273\272\000\000\000\000={QF\000\000\000\000\000\000\000\000={QF\000\000\000\000\326Z\225?\312\215QF\213T\2659\357V\006>\320\347QF]\364\333:\000\000\000\000\320\347QF\000\000\000\000\210\211\262>\332\251QF\234\"\227\272(;\000@H\321QF\207\225@:\000\000\000\000H\321QF\000\000\000\000=u\262>\271\304QF\224-u\271\217\302\365<{\266QF\221\016\213\271\254\375\261?\302\346QF\245\273k:\315\314L>\007\344QF\026\022U\270\360\023\030=\315\344QF\256\026q7\000\000\000\000\315\344QF\000\000\000\000\261?\007@\262\345QF\201\001\2147\251G\022?\315\344QF\201\001\214\267\000\000@?=\344QF\217\321.\267\315\314L>#\340QF\3608\240\270\000\000\000\000#\340QF\000\000\000\000H\027.=\n\330QF|\372\035\271\347x\231>\003\330QF\2757\006\265\000\000\000\000\003\330QF\000\000\000\000\334\377\232>O\320QFT`\026\271S%/?\031\303QF\332\362\200\271\000\000\000\000\031\303QF\000\000\000\000\2534\250@\236\321QFr\300\2159\315\314L>q\277QF\367m\261\271t\255\314=\303\277QF\003\374\3076]x\363:f\304QF\0047\2658M\204M>\200\276QF\243d\346\270\000\000\000\000\200\276QF\000\000\000\000\246p/@\330\303QF\006\260\3208\232\231\231>\\\304QF\243:!7\250\327r>^\304QFY\331\0004\246\202\265>`\304QF\225\277V4\n\327#=f\304QF\300\332\3464\315\314L>\332\300QFn\224\212\270\"\322i>f\304QF\314\231\2128\356\240\013>\\\304QFj\244F\2654}\235>\265\303QF\301-L\267\315\314L>\365\277QF9\\\222\270\026\206\204=\204\276QFv&\341\267\000\000\000\000\204\276QF\000\000\000\000\204s(?\205\276QF\225\277V3\315\314L>{\276QFj\244F\265)\\\217=]\301QFiQa8\217\302\365<f\304QF\240\032m8\376\034\301=d\304QFw\314+\264\251\244\306?\221\321QF\243\237\2009g\301\0339\000\330QF\3047\3738\315\314L>\205\304QF\010\036\276\271\247X\200?\000\330QF{/\2769/\335t?\000\330QF\000\000\000\200\213\207j?\366\327QF\006FA\265\000\000\000\000\366\327QF\000\000\000\000;\337O>\347\327QFO\373\224\265\262\"OA\000\276QFr\316\374\271\204\0167@\017\260QF=\030\210\271\\PZ@\000\260QFO\373\224\265\000\000\000\000\000\260QF\000\000\000\000+9\037@\001\260QF\225\277V39]\000@\\\224QF\r\377\006\272\304\322\204?3{QF\020\334\365\271M\276\033@3{QF\000\000\000\000\256\374\331?\263|QF\261`\3527\357\021a?3{QF\261`\352\267\n\327#<\303\254QFTCr:\032\027\'?\343}QF\321\352d\272Ie\035@\027yQF6\247\273\270^\037\205@q{QF\313\01388\252C;@s`QF\220\360\003\272\217\320!?\rtQFf\267\27791d9@A`QF\207\222\301\271\366a\330@2_QF\300\327\245\267\221\351\014@v\377PF\350\033\352\272\016\226\204?\t\301PF\240\354\230\272\\\217B>B\355PF>\353X:\000\000\000\000B\355PF\000\000\000\000\200\353+AW\277PF\241\ra\272\034X\033@\376\234PF9~(\272\366(\234?\000\230PF8\365\303\270\315\302\321>\000\230PFw\314+\262\376d\233A\3322PFwE\370\272{S\240?\177MOF\261\001\215\273d\222\302?XROF\312\215\2778n\005\222@\357)OFY\227G\2724\017\027@m\013OFc\316\026\272\013>(>\266iOF\367\'\351:]mP@/\001OF\365\002\001\273?$\352?\244<OFe\016\223:\345.\371?\2519OF\232\202k\270RI\035:\256<OF\246\262n8\000\000\000\000\256<OF\000\000\000\000\330e\236?\300\374NFo\362\235\272\303#D@^}NFA\213\035\273i.\032>\303\007OF\353\222+;\341\260\366;\205\007OFg\000\230\266\227?\334>7#NF\261\'\215\273\355Q\226?\305$NFX6\3677\206p\001@#\375MF\305\340D\272t^\246>\367?NF\340\034\246:\000\000\000\000\367?NF\000\000\000\000R\205\260?\367?NFw\314+\262\312#C?\373?NFL\261\2334\321\217\024A\213\024NF\033\247W\272\366(\\>\241FNF$\337x:m\3274=\341\230NF`\'\314:\n\327\243<\354\230NF\315\002L5\315\314L>\270\230NF\350\253}\266\263\033\315?\221\022NF?<&\273\251\376\231@\344\304MF4\374\300\2721\022e@l\256MF;\241\337\271M\327\202@\346-NF\370\250\036;\021\316\232==2NF\275\215\254833\263>\326\rNF\241\3114\272=\341\242>\0242NF\324\0354:V\312\213?F\261MF\027\353\037\273(\216\204>42NF\203v ;u\365\271?=2NFp895\000\000\000\000=2NF\000\000\000\000`)\234?\271-NFjy\263\270\261Z\355<\000\030NF\367\303\327\271L\361\302<\n\030NF\315\002L5\315\314L>\000\030NF\315\002L\265\000\000\000\000\000\030NF\000\000\000\000T\277x?\000\030NF\000\000\000\200k\231\202?\000\030NFw\314\2532[\037\035@\246\374MF@\347\007\272d\225\251>\001\310MFe\332\202\272\247\211\202@=FNFg\n\035;o\022\203:\3663NF z\265\271\232\231\231?\222@NF\214~z9\000\000\000\000\222@NF\000\000\000\000=\261\222>\017ONF_\341\2179\264\310v>v\317MF\224T\036\273lS\311>\375\357MF\245\323!:\000\000\000\000\375\357MF\000\000\000\000\371\240[@\330\261NF\253\373p;k\030\274?rlNF\247\350\253\272\3444\204?\252\327NFM\370\004;\215?M>U\240NF\262\365\210\272\000\000\000\000U\240NF\000\000\000\000\331\256\003@\366\237NF\326:\355\266\315\314L>\354\237NF\315\002L\265\000\000\000\000\354\237NF\000\000\000\000\000\000\000\000\354\237NF\000\000\000\000\271\253K>\363\237NF\032\002\0315\1777\034@\343eNF\265\341\217\272\000\000\000\000\343eNF\000\000\000\000\000\000\000\000\343eNF\000\000\000\000\000\000\000\000\343eNF\000\000\000\000:\343\212>\346}NFFG\35695\357\270>F\323NF\302\260\323:L\354\202?\023\220NF\365[\246\272\000\000\000\000\023\220NF\000\000\000\000\253\2205?\213\350NF\350I\333:V\202\303?\014\325NF\214\375\300\271Q\010r?\007:OFV\371\371:\000\000\000\000\007:OF\000\000\000\000\000\000\000\000\007:OF\000\000\000\000\355\200\317?\314`OF\321\221?:R\322C:\327[OF\210\277\303\270~\035\347?\216dOFk*,9\315\314L>\354kOF\377o\0219\000\000\000\000\354kOF\000\000\000\000\000\000\000\000\354kOF\000\000\000\000\020\315\372:\366kOF\234SI5\353\017O>\366kOFw\314+2\n\327\243=\000lOF\234SI5\000\000\000\000\000lOF\000\000\000\000\000\000\000\000\000lOF\000\000\000\0009x\343@\366kOF\234SI\265Q\220\033?\372kOF\350R\2264\262[x@\366kOF\2757\206\264\365(\206>\000lOF\006FA5k+\226?\207\210OF\221\325\014:\000\000\000\000\207\210OF\000\000\000\000\232|<@\000lOF\033\302\014\272\256Ga>\260lOF\340\030Y7o\022\203:\000lOF\340\030Y\267\367\376\352<\000lOF\000\000\000\000\315\314L>\366kOF\234SI\265\177\262\262<\000lOF\234SI5\270\270\331?\000lOF\000\000\000\000fff>\367kOFp89\265\000\000\000\000\367kOF\000\000\000\000\353#9=\000lOFp895\305\306H@~\220OF\345\'4:\022\324t<\000lOF[\0104\272\000\000\200?\354\313OF\272\304\354:\315\314L>\004pOF\374r\342\272s~\027>\\\317OFLT\353:C\270\202?\325]OF\023\332\013\273\000\000\000\000\325]OF\000\000\000\000\366\360\205?\303\223OF\361&\205:\377\327\214>\305\223OF?\21164\000\000\000\000\305\223OF\000\000\000\000\000\000\200?\303\223OF\\|a\264&\311y>}\206OF\220\363\202\271\000\000\200?\n\200OF\247\202\376\270\324\260\317?\024\200OF\234SI5\252\234\370?%vOF\332\"D\271\276\304\302=f{OF\277\210\3178\000\000\000\000f{OF\000\000\000\000\362\322M>\"XOF\232\r.\272\217\302\365<\327\223OF^o\223:\000\000\000\000\327\223OF\000\000\000\000\315\314L>\037\200OF3\220\302\271L\320\003@\225\240OF70 :VI\204<\024\241OF\261\264\0357\315\314L>\n\230OF\321T2\271\000\000\000\000\n\230OF\000\000\000\000\322\260\207?_\246OF ]\2159\203\264k>S\237OF\021\365\n\271\2153\323>\374\317OF*\376o:Vl\207?a\017PF\"0\234:\224\267\305?w\231OF\346\024\021\273\000\000\000\000w\231OF\000\000\000\000\000\000\000\000w\231OF\000\000\000\000\230v\207?e\003PF\202\237\002;\315\314L>\n\256OF\271\026\322\272\336\036$?m!PFm;\016;3m\336=\252:PF\230Y\3709\211A\241?\327\026PF\203,0\272\r~\370=\315\240OF\3137\021\273\000\000\000\000\315\240OF\000\000\000\000\376`\207?\321 PF\300\326\035;\225\200r?\321?PFK\207\030:m\r\234<\000pPF\252\355l:\332\312\240?\035UPF%\026\004\272\000\000\000\000\035UPF\000\000\000\000\000\000\000\000\035UPF\000\000\000\000\364Lu=\3663PF\342\364\"\272\255\360\240?w\'PFS\321u\271,p->o\025PF:c\261\271\000\000\000\000o\025PF\000\000\000\000\312e\254>\254\365OF\004Q\034\272\000\000\000\000\254\365OF\000\000\000\000\000\000\000\000\254\365OF\000\000\000\000\315\314L>\033\315OF\356\274G\272\000\000\000\000\033\315OF\000\000\000\000\000\000\000\000\033\315OF\000\000\000\000uY\207?g,PF\277\315\352:\315\314L>\315\357OF\032\016\225\272\000\000\000\000\315\357OF\000\000\000\000\024\320$@\210XPF\001\361\000;\263\326\274@\224|PF\324&1:\000\000\000\000\224|PF\000\000\000\000\315\314L>=4PF\376\244\261\272\242\010H@\370GPF\002\016\3029\000\000\000\000\370GPF\000\000\000\000\000\000\000\000\370GPF\000\000\000\000\000\000\000\000\370GPF\000\000\000\000fL\207?\177@PF;\365\022\271\315\314L>\366GPFU\322\0229\000\000\000\000\366GPF\000\000\000\000\n\327#<\000HPF\234SI5\034c\227?\036IPF\273\350\2577\r3S>i`PF\375\004\3459T\260j?\233~PFMb\024:\340\333\213?\365\227PF\024\010\3719v\316T?\372\210PFj\021\223\271\261E\210?\000\230PF\207\207\2239=\nW>\3158PF\326\253\351\272C\255\311?9\230PF\314\242\352:\244/\210?\375\332PFq\341\243:\315\314L>34PF\\pL\273\tM\200?\365\272PF*\261%;\217\302\365<\n\230PF\236K+\272zq\023@\263\005QF\005\225\006;\271\375O<\223\247PF\354\217\346\272./,?\272,QF\022]#;\315\314L>\024\230PF\212\3535\273\277\241\024@\367\361PF\322\236\334:`5\365@\r7PF!\001e\273\315\314L>%\353OF\210\250\272\272\374,\224?t\'QFO\272\302;\372\341V;\327\002QF\007?3\272F\266s>\021lPF-\2538\273\315\314L=\303\373PF\215~0;\326\305\245?\373\373PF;@\2136\330\\\206?\210\360PF0e`\271\274\364g<3\343PFt\260\202\271\000\000\000\0003\343PF\000\000\000\000\315\314L>>\213PFX\230\327\272\000\000\000\000>\213PF\000\000\000\000\000\000\000\000>\213PF\000\000\000\000\000\000\000\000>\213PF\000\000\000\000\n\327\243<\303\334PF\361#\310:\315\314L>\007\210PF\267\266\317\272\000\000\000\000\007\210PF\000\000\000\000\223\364\274;\274\224PF\277\237y9\217\035%>\023\221PF\372\327\217\270\320\321P>\370=PFw\002\314\272\031$\207?\232~PF\017\351\236:\000\000\000\000\232~PF\000\000\000\000\022A\210>\224zPF\263\032\236\270\315\314L>\256<PF\025\002\230\272\000\000\000\000\256<PF\000\000\000\000\007\233\221@\325\037PFJ\333\r\272\315\314L>\3543PFm\251\3059]\364\213?,1PF\247,X\270#S\031@\316WPF\205\002>:\000\000\000\000\316WPF\000\000\000\000\315\314L>\000pPF\337\327\3559\217\302u=\npPF\234SI5\354Q\270=\001pPF\r\3323\265\315\314L>\000pPFw\314\253\263\000\000\000\000\000pPF\000\000\000\000\361s@=\tpPFw\314+5\037\205k>\001pPF\204\364\020\265\031A\371>\000pPF\225\277\326\263\000\000\000\000\000pPF\000\000\000\000Ik\021@\000pPF\000\000\000\000Z#\377>\001pPFY\331\2003\n\327#=\000pPFY\331\200\263\000\000\000\000\000pPF\000\000\000\000\'\240\t>\005pPF\333*\2614\307\025s>\002pPF$9l\264-C\234>\000pPFY\331\000\264\000\000\000\000\000pPF\000\000\000\000\r3S>\000pPF\000\000\000\000\000\000\000\000\000pPF\000\000\000\000\000\000\200>\000pPF\000\000\000\000\304\274\340=\000pPF\000\000\000\000-:\355?\000>PF\261\243u\272k\366\370>\003\321OF\202\373\005\273%\321E?\364\246OF><O\272=wT>\230\235OF\315\2448\271\346\314{>\272\014PF\374\007\t;\000\000\000\000\272\014PF\000\000\000\000\315\314L>\000\230OF\362\240\017\273\001\241u;\2560PF\032H<;\000\000\000\000\2560PF\000\000\000\000\315\314L>\000\230OF\007\276;\273\250W\036@`^PF\376\241t;\352@\363;\325\230OF\345\262r\273\343\330T?\315\013PF{\305\r;JJ\207?\275CPF8\252\211:\000\000\000\000\275CPF\000\000\000\000\315\243\177?7\023PF\"\227n\272\315\314L>q\231OF\017\322\025\273\246\233\304;{\231OF\234SI5\000\000\000\000{\231OF\000\000\000\000\315\314L>{\231OF\000\000\000\000\n\327#<\205\231OF\234SI5\000\000\000\000\205\231OF\000\000\000\000_\355\017?|\231OFp89\265\000\000\000\000|\231OF\000\000\000\000\000\000\000@\205\231OFp895\372\346L>{\231OF\234SI\265\000\000\000\000{\231OF\000\000\000\000\307\326\255>{\231OFw\314\2532\315\314L>{\231OFw\314\253\262\220f\3218\205\231OF\234SI5\n\327#<\205\231OF\000\000\000\000\256Ga>|\231OF?\2116\265\220f\3218\205\231OF?\21165\000\000\000\000\205\231OF\000\000\000\000\247\372L>{\231OF\234SI\265\376e\247?\205\231OF\234SI5\315\314L=\205\231OF\000\000\000\200\354\035`>\301\220OF\261\353,\271\"\306\253<\366\231OFd\24259tV\3218\000\250OF\244\201\2129\315\314L>\366\247OF\234SI\265\n\327\243<\000\250OF\234SI5\000\000\000\000\000\250OF\000\000\000\000\363\346L>\017\250OF\201\252\2275\000\000\000\000\017\250OF\000\000\000\000\216S\375>\000\250OF\201\252\227\265\340:\355>\341\220OF\251\010\344\271\000\000\000\000\341\220OF\000\000\000\000\346\223\366<\217\247OF\326\312\3379\000\000\000\000\217\247OF\000\000\000\000\324aa>k\204OF\245I-\272\000\000\000\000k\204OF\000\000\000\000\t|\3218\315\201OF6\322N\270\315\314L>\303\201OF\234SI\265\224O\037>c\247OF\212\2549:\000\000\000\000c\247OF\000\000\000\000\370\346L>\247\200OF\205\377>\272\000\000\000\000\247\200OF\000\000\000\000\252\361>@\327\350OF\'\211\000;\315\314L>\006\200OF_\017\001\273\000\000\000\000\006\200OF\000\000\000\000Lq\3218\366\217OF\251J\2359\000\000\000\000\366\217OF\000\000\000\000\355y%<\366\217OFw\314+2\000\000\000\000\366\217OF\000\000\000\000\" `>\213\201OF\235>\216\271\257\335\t<\000\220OF\254\254\2169\257K\231@\001dOF\314\014Y\272 \355M>\323\010OFb\032\341\272\353\366\3048\000lOFdC\365:\203\221\3218\327kOFh\377I\266\252\023\334?\276\311NF%\020H\273\204\367\3218\270\007OF2u\231:\000\000\000\000\270\007OF\000\000\000\000\000\000\000\000\270\007OF\000\000\000\000\331e\024?\264\007OF\023n\246\264\204\367\3218\000\010OF\274\221\2736\315\314L>\366\007OF\234SI\265\302t\207?\366\007OF\000\000\000\200\217\354\004@\366\007OF\000\000\000\000=\nW>\366\007OFw\314+3\204\367\3218\000\010OF\006FA5jR\345;\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\014\347L>\366\007OF\234SI\265ND2?\366\007OF\000\000\000\200\204\367\3218\000\010OF\234SI5P\272\004?\374\007OFL\261\233\264\204\367\3218\000\010OFL\261\2334\n\327#<\000\010OF\000\000\000\000\315\314L>\366\007OF\234SI\265)\\\217=\000\010OF\234SI5\000\000\000\000\000\010OF\000\000\000\000\326\335\365>\366\007OF\234SI\265\204\367\3218\315\007OF4\253J\266P\215\027=\366\006OF\236\365\204\267\371\333\267>\366\006OFw\314\2532\343\374\352?\263\003OF\253\t\201\270\300\253m>=\264NF\332\207\304\272\204\367\3218\315\006OF\370\200\314:\000\000\000\000\315\006OF\000\000\000\000\000\000\000\000\315\006OF\000\000\000\000\014\347L>b\240NF\355I\375\272\250ss=9\005OF\322\335\371:In(>\"\246NF^,\353\272\000\000\000\000\"\246NF\000\000\000\000\n\327#<\327\003OF\245,\350:\014\347L>t\220NF\262\260\016\273\000\000\000\000t\220NF\000\000\000\000\342\374\3218H\002OFv\021\r;\315\314L>\035\220NF(/\r\273X\t\016<R\001OF+M\014;\000\000\000\000R\001OF\000\000\000\000\r\347L>\362\220NF\030\371\n\273\000\000\000\000\362\220NF\000\000\000\000\266\272\030>\000\320NFLI\234:\021\363v;\000\320NF\000\000\000\000qo\220>W\247NFGTI\272\000\000\000\000W\247NF\000\000\000\000\2222\3228{\317NF1\350F:\210c\303@\254\342NFE\017\2769\2222\3228\000\320NF\315\327\270\271\000\000\000\000\000\320NF\000\000\000\000\014H\3228\366\270NF\337(\344\271\214@b>\271\236NF\347\367\001\272\313>89\240\252NF\372\355k9\344b\3228\256\237NF\340\345X\271\305\363E?\244\237NF\315\002L\265\000\000\000\000\244\237NF\000\000\000\000\031\347L>\004\220NFB\341\232\271\000\000\000\000\004\220NF\000\000\000\000B\360\032>\000\220NF!\226\213\264H\310\236?\353jNF\303\3247\272\242.P>DmNF\235O:8=c{>\261pNF\321\n\21085\223\3228\037qNFV\217\0077\310\335\'=\000qNFNV\030\2665\223\3228\000qNF\000\000\000\200\000\000\000\000\000qNF\000\000\000\000\232\231\231?\340hNF7-!\271\234\323\376?\000qNF\2252!9\000\000\000\000\000qNF\000\000\000\000\037\347L>ggNF\220n>\2715\223\3228\000pNF\"\235*9//<Am\311MF\035\221N\273\311\226\020=m\005NF\322H\225:\2612\371:\023@NF\335\300\221:\241K\233?t\nNF6\035\205\272\000\000\000\000t\nNF\000\000\000\000\000\000\000\000t\nNF\000\000\000\000]&\215>#\200MFd\332+\273\000\000\000\000#\200MF\000\000\000\000\000\000\000\000#\200MF\000\000\000\000{T\3238\256\260MF\261\342q:\000\000\000\000\256\260MF\000\000\000\000\000\000\000\000\256\260MF\000\000\000\000\3760\235>\244\260MF\315\002L\265\000\000\000\000\244\260MF\000\000\000\000\347=\371>a\037NFS\323\t;1\t\030=B?NF~`\036:)\\\217>b\350MF\316\253\327\272\016\242w<\360=NF3\276\324:\n\327#<\205$NF\310i\374\271\000\000\000\000\205$NF\000\000\000\000Y9\347>1\357MFnt\204\272\366\227Y@\225LNFW1\350:+&J?\331\346MF=|\374\272\000\000\000\000\331\346MF\000\000\000\000\000\000\000\000\331\346MF\000\000\000\000\315\314L>`\341MF&\332\331\270\000\000\000\000`\341MF\000\000\000\000\000\000\000\000`\341MF\000\000\000\000\372\341V;\354?NFJ \353:\307\313\034>\366?NF\315\002L5\336i\030@\354?NF\315\002L\265\315\314L>\354?NF\000\000\000\200\361\367\365=\354?NF\000\000\000\000\237\220M>\354?NF\000\000\000\000\002\234E?\354?NFw\314+2\000\000\000\000\354?NF\000\000\000\000\204RM>\354?NFw\314+\262\000\000\000\000\354?NF\000\000\000\000\216\235\001@\366?NF\315\002L5\313\354\274>\354?NF\315\002L\265\000\000\000\000\354?NF\000\000\000\000\367u\2368\366?NF\315\002L5\200`\203>\356?NF~`\036\265\000\000\000\000\356?NF\000\000\000\000%\0227>\273 NFF\343\032\272R\332\265<\377\023NF\363\032}\271\351\267\223@\365>NF\312|U:\315\314L>\n\360MF\317\351\303\272\000\000\000\000\n\360MF\000\000\000\000\000\000\000\000\n\360MF\000\000\000\000\000\000\000\000\n\360MF\000\000\000\000\315\314L>\232\362MF\347\254K8\000\000\000\000\232\362MF\000\000\000\000R\322C:\232\362MF\000\000\000\200K\034_>\304\363MFW\216\2717\000\000\000\000\304\363MF\000\000\000\000\315\314L=\000\030NF\345\'4:\330\036\215>\360\375MF\037\201\001\272\017\215|=\000\030NF:\221\001:\000\000\000\000\000\030NF\000\000\000\000\315\314L>\024\365MFX\201-\272\315\314L=\000\030NF3\236-:\000\000\000\000\000\030NF\000\000\000\000\315\314L>\366\027NF\315\002L\265\315\314L=\000\030NF\315\002L5\3310\277?\000\030NF\000\000\000\200\000\000\000\000\000\030NF\000\000\000\000\315\314L>\366\027NF\315\002L\2655z\2719\366\027NF\000\000\000\200\226\300\031=\370\027NF\225\277V4\313\t\267?\'\001NF\314\273\342\271\005Fb>-\347MF(!\001\272\312\345\232;\024\341MF\037\211\362\270\315\314L>\366\027NF9{\210:\000Yw>\366\027NF\000\000\000\000\000\000\000\000\366\027NF\000\000\000\000\000\000\000\000\366\027NF\000\000\000\000\315\314\314=\000\360MF\225\213F\272\037\356N>\000\360MF\000\000\000\000)\\\217=T\023NFV\254/:\000\000\000\000T\023NF\000\000\000\000\315\314L>\010\334MF\300b\211\272\000\000\000\000\010\334MF\000\000\000\000\222\232\222=\000\334MFE\035)\265>Is>\221\345MFu^>9fff?\327\344MF\200\261g\267\000\000\000\000\327\344MF\000\000\000\000\000\000\000\000\327\344MF\000\000\000\000\000\000\000\000\327\344MF\000\000\000\000\222\376\242=q\345MF\307\301>7\321\004\204>\225\345MFr\33556\000\000\000\000\225\345MF\000\000\000\000\252`\364?\022\013NF\323o::\000\000\000\000\022\013NF\000\000\000\000\315\314L>a\342MF\";J\272\275\235\306>\324\347MFt\330\3308\000\000\000\000\324\347MF\000\000\000\000\000\000\000\000\324\347MF\000\000\000\000q=\212>j\373MFH\317\3029\300rL<\n\360MF\330*b\271\000\000\000\000\n\360MF\000\000\000\000\315\314L>\024\360MF\315\002L5\000\000\000\000\024\360MF\000\000\000\000M\274\242<\244\360MF\215,27\000\000\000\000\244\360MF\000\000\000\000\000\000\000\000\244\360MF\000\000\000\000\306\341\232=\000\030NF#\266C:\n\327#=\000\030NF\000\000\000\000W\215\030?e\001NF\217\235\340\271\000\000\000\000e\001NF\000\000\000\000s\315\217<\303\027NF\007S\3369\320\325\356?\263\036NFC\343\t9z\266\t?\272*NF~\000o9\000\000\000\000\272*NF\000\000\000\000\000\000\000\000\272*NF\000\000\000\000\n\327#<\362\030NF\355\235\260\271\000\000\000\000\362\030NF\000\000\000\000\315\314L>4\rNF\014gi\271\225\237\204?\333\nNFM\205:\270\000\000\000\000\333\nNF\000\000\000\000\"\334h;\256*NFv)\036:\000\000\000\000\256*NF\000\000\000\000b\0346@\227\rNF\274}\020\272\n\331\326</*NF\264\031\016:%\204H?\341\016NF\305\236\007\272\315\314L>\205\rNF\264\001\330\267\000\000\000\000\205\rNF\000\000\000\000\344\273w<f(NF\247\222\005:\315\314L>\217\rNF3N\005\272\001\272w<\000*NF\276U\r:\000\000\000\000\000*NF\000\000\000\000C\016\236<\000*NF\000\000\000\000\315\314L>\257\rNFC\247\014\272\000\000\000\000\257\rNF\000\000\000\000#N\225=\244\rNF\225\277V\265\207\026\301?\244\rNF\000\000\000\000\023\022S>{\rNF\317\247H\266\017\nN=\205\rNF\006FA5\n\327#<\205\rNF\000\000\000\200\000\000\000\000\205\rNF\000\000\000\000XE[>|\rNF\324\226>\265\000\000\000\000|\rNF\000\000\000\000)\\\217=\205\rNF\324\226>5\000\000\000\000\205\rNF\000\000\000\000\000\000\000\000\205\rNF\000\000\000\000\000\000\000\000\205\rNF\000\000\000\000\315\314L>{\rNF\315\002L\265\000\000\000\000{\rNF\000\000\000\000\000\000\000\000{\rNF\000\000\000\000e\001 @\0040NF0\242+:)\\\217=\0141NF\356\223\2437\315\314L>\244\016NF;\336*\272\n\327\243<\232=NF\377^i:\264\177\361>\0269NF\272C\263\270\327\022\272?\330=NF\022\364\2748\000\000\000\000\330=NF\000\000\000\000\301S\231?\315\207NFa\232\267:[\010\215>\325:NF\341\320\276\272\000\000\000\000\325:NF\000\000\000\000\025\200\026?\363\217NFxR\323:\000\000\000\000\363\217NF\000\000\000\000\306\325\222=h\243NFc\345\3009\315\314L>\001\220NF\020O\300\271\000\000\000\000\001\220NF\000\000\000\000\004\316\236?H\006OF\032\226\022;\315\314L>\220\236NF\204A\000\273\000\000\000\000\220\236NF\000\000\000\000\315\314L=Q\"OF\010>#;y\222\225>7\352NF\353\253\212\272\226\266M>\022\245NFE\027\253\272N\333\360?\035\023OF\312R\010;\231\273\376?)\356NF<\2726\272\315\314L>\313\237NF\024\346\301\2724\264\307<\205\352NF\003*\271:\000\000\000\000\205\352NF\000\000\000\000XU/<f\352NFNV\030\266\000\000\000\000f\352NF\000\000\000\0005\004\225>_\352NF!\226\013\265\000\000\000\000_\352NF\000\000\000\000\000\000\000\000_\352NF\000\000\000\000\000\000\000\000_\352NF\000\000\000\000\315\314L>\\\352NFY\331\200\264\000o\001<\\\352NF\000\000\000\000\000\000\000\000\\\352NF\000\000\000\000\000\000\000\000\\\352NF\000\000\000\000\353ih>]\352NF\006F\3013\235hw=f\352NF\r\33235\000\000\000\000f\352NF\000\000\000\000b\020X>\\\352NF\315\002L\265\n\327\243<\\\352NF\000\000\000\000\020\235|?\t\352NF\232\256\314\266\364]@>\214\345NF\317\273\261\270\262\231\350<>\244NF\360\232\241\272\315\314L>7\223NF\267\310\250\271\n\327\243<\237\273NF\337KH:\000\000\000\000\237\273NF\000\000\000\0004\021\226>2\232NF\362\217%\272\000\000\000\0002\232NF\000\000\000\000$9\3543=\223NFC\343\t\271\357\367\366;\366\313NF\316\224\214:\000\000\000\000\366\313NF\000\000\000\000\315\314L>\\\223NFc\"\214\272\000\000\000\000\\\223NF\000\000\000\000\000\000\000\000\\\223NF\000\000\000\000\000\000\000\000\\\223NF\000\000\000\000\315\314L>\024\250NF\331k\3159\000\000\000\000\024\250NF\000\000\000\000\000\000\000\000\024\250NF\000\000\000\000\000\000\000\000\024\250NF\000\000\000\000:\205\032=q\223NF\264\213\314\271\000\000\000\000q\223NF\000\000\000\000\000\000\000\000q\223NF\000\000\000\000$9\3543f\223NF\315\002L\265\000\000\000\000f\223NF\000\000\000\000\000\000\000\000f\223NF\000\000\000\000\213;w<q\223NF\315\002L5s\363\315<q\223NF\000\000\000\000\000\000\000\000q\223NF\000\000\000\000\000\000\000\000q\223NF\000\000\000\000\000\000\000\000q\223NF\000\000\000\000\242EF?\036\222NF\376\014\322\267\000\000\000\000\036\222NF\000\000\000\000\000\000\000\000\036\222NF\000\000\000\000\000\000\000\000\036\222NF\000\000\000\000\000\000\000\000\036\222NF\000\000\000\000\000\000\000\000\036\222NF\000\000\000\000\266)\301>\n\220NF^\240$\270\000\000\000\000\n\220NF\000\000\000\000\000\000\000\000\n\220NF\000\000\000\000\000\000\000\000\n\220NF\000\000\000\000\000\000\000\000\n\220NF\000\000\000\000\252GV?\035\207NF\365\0071\271ayh?\334\217NF\351q-9\000\000\000\000\334\217NF\000\000\000\000\000\000\000\000\334\217NF\000\000\000\000\000\000\000\000\334\217NF\000\000\000\000\000\000\000\000\334\217NF\000\000\000\000\000\000\000\000\334\217NF\000\000\000\000tA\235>\013ONFU\247\240\272\000\000\000\000\013ONF\000\000\000\000\013&B<HgNF,\227\3609\000\000\000\000HgNF\000\000\000\000\000\000\000\000HgNF\000\000\000\000\000\000\000\000HgNF\000\000\000\000\336\223G>)gNFNV\030\266\000\000\000\000)gNF\000\000\000\000\000\000\000\000)gNF\000\000\000\000\000\000\000\000)gNF\000\000\000\000O\257\224=\000DNF\225o.\272\000\000\000\000\000DNF\000\000\000\000\000\000\000\000\000DNF\000\000\000\000\000\000\000\000\000DNF\000\000\000\000\000\000\000\000\000DNF\000\000\000\000\000\000\000\000\000DNF\000\000\000\000\000\000\000\000\000DNF\000\000\000\000\000\000\000\000\000DNF\000\000\000\000\226\3439=\nDNF\315\002L5\000\000\000\000\nDNF\000\000\000\000\000\000\000\000\nDNF\000\000\000\000\n\327#<\000DNF\315\002L\265\266\232w<\nDNF\315\002L5\000\000\000\000\nDNF\000\000\000\000\000\000\000\000\nDNF\000\000\000\000\000\000\000\000\nDNF\000\000\000\000\305\027\373?\tDNF\225\277\326\263\000\000\000\000\tDNF\000\000\000\000\000\000\000\000\tDNF\000\000\000\000\000\000\200?\347@NF\'\256x\270\000\000\000\000\347@NF\000\000\000\000\000\000\000\000\347@NF\000\000\000\000\000\000\000\000\347@NF\000\000\000\000\337\270\3269\000DNF|\351u8\000\000\000\000\000DNF\000\000\000\000\254\230\277<\000DNF\000\000\000\200\000\000\000\000\000DNF\000\000\000\000\000\000\000\000\000DNF\000\000\000\000\000\000\000\000\000DNF\000\000\000\000\000\000\000\000\000DNF\000\000\000\000\301\232wpA>\000DNF\315\002L5\351\033D=\000DNF\000\000\000\000\364\270\272?\366CNF\315\002L\265\000\000\000\000\366CNF\000\000\000\000\017\245\242?\240CNF\026\022\325\266\000\000\000\000\240CNF\000\000\000\000Nb\220>\000BNF\t\017\001\2705\302\232=\nBNF\315\002L5\000\000\000\000\nBNF\000\000\000\000\000\000\000\000\nBNF\000\000\000\000\301E\222@ \tNFQG\215\272T\024G@\203&NF\010\r\022:\000\000\000\000\203&NF\000\000\000\000\023\315\232=\2173NFO\235\2019\275\023\023?\003\360MF\352\267\247\272\000\000\000\000\003\360MF\000\000\000\000px@=\232\375MF\245&\2079\000\000\000\000\232\375MF\000\000\000\000\000\000\000\000\232\375MF\000\000\000\000\000\000\000\000\232\375MF\000\000\000\000\000\000\000\000\232\375MF\000\000\000\000\000\000\000\000\232\375MF\000\000\000\000\000\000\000\000\232\375MF\000\000\000\0007<\026>\334\347MF\247,\330\271\203S\205>\373\360MF\005j59\302\273\2368\366\347MF\237f3\271\232\231\231>\303\341MF\302\252\366\270\336\020\370;\303\341MF\000\000\000\000\036\037\304>\302\341MFw\314\253\262pB_;\256\341MF\003\374\307\265\363\020x;\256\341MF\000\000\000\000\032<\002<\256\341MF\000\000\000\000\202\315\205>\244\341MF\315\002L\265\333\365\re\017\240?\r\334MF\215\004\340\270\000\000\000\000\r\334MF\000\000\000\000\000\000\000\000\r\334MF\000\000\000\000\\\217\202>\n\334MF\315\002L\264\241\367F:\000\334MF\315\002L\265\000\000\000\000\000\334MF\000\000\000\000\000\000\000\000\000\334MF\000\000\000\000\\\217\242?\000\334MF\000\000\000\000\354\375t=\n\334MF\315\002L5\000\000\000\000\n\334MF\000\000\000\000\300\264\231?\000\334MF\315\002L\265\326\305\215?\261\333MF\321L\305\266\000\000\000\000\261\333MF\000\000\000\000\000\000\000\000\261\333MF\000\000\000\000\203\033\233=H\313MF\017B\243\271\000\000\000\000H\313MF\000\000\000\000\204\033\033>H\313MF\000\000\000\000\000\000\000\000H\313MF\000\000\000\000\000\000\000\000H\313MF\000\000\000\000\213%\014@\r\211MFG\305\244\272\341X\000@>\177MFz\204C\271\000\000\000\000>\177MF\000\000\000\000\000\000\000\000>\177MF\000\000\000\000\000\000\000\000>\177MF\000\000\000\000\000\000\000\000>\177MF\000\000\000\000\000\000\000\000>\177MF\000\000\000\000\000\000\000\000>\177MF\000\000\000\000\n\327#<=\232MF\234\211\006:\204y\242@:ZMF\222i\237\272\000\000\000\000:ZMF\000\000\000\000eYE>\276=MF\231\tn\340\342\271Yk??\237\"MF\265\343\341\271\000\000\000\000\237\"MF\000\000\000\000\000\000\000\000\237\"MF\000\000\000\000\000\000\000\000\237\"MF\000\000\000\000\000\000\000\000\237\"MF\000\000\000\000\000\000\000\000\237\"MF\000\000\000\000G\330\340:3(MF\211\322\3368(\\=A\327\226LF\367a5\273\000\000\000\000\327\226LF\000\000\000\000\000\000\000\000\327\226LF\000\000\000\000\000\000\000\000\327\226LF\000\000\000\000\022\203\200>\217\017MF\371\r\027;\000\000\000\000\217\017MF\000\000\000\000\000\000\000\000\217\017MF\000\000\000\000_\331\260>\210\260LF\351E\355\272\000\000\000\000\210\260LF\000\000\000\000\000\000\000\000\210\260LF\000\000\000\000,W\001?\016\303LF\005^\2719\000\000\000\000\016\303LF\000\000\000\000\000\000\000\000\016\303LF\000\000\000\000\000\000\000\000\016\303LF\000\000\000\000\270\222\255>R\337LF\276U\r:\000\000\000\000R\337LF\000\000\000\000=\nW>\217\342LF\376\237\2018\000\000\000\000\217\342LF\000\000\000\000\034\225\230=\000\343LF\307\302\0147\000\000\000\000\000\343LF\000\000\000\000\000\000\000\000\000\343LF\000\000\000\000\340\2140>\020\366LFh\211\2769\000\000\000\000\020\366LF\000\000\000\000\000\000\000\000\020\366LF\000\000\000\000\000\000\000\000\020\366LF\000\000\000\000K\233?>\000\377LF\234\23229\007\316-@c\355LF\320\364\257\271o\340\203@[\332LF{/\276\271\000\000\000\000[\332LF\000\000\000\000\000\000\000\000[\332LF\000\000\000\000\026/\371;R\365LF\262\310\006:\000\000\000\000R\365LF\000\000\000\000\000\000\000\000R\365LF\000\000\000\000\000\000\000\000R\365LF\000\000\000\000\000\000\000\000R\365LF\000\000\000\000r\344:=\024\364LF\n9\306\267\n\327#<\024\364LF\000\000\000\200\000\000\000\000\024\364LF\000\000\000\000\000\000\000?\n\364LF\315\002L\265\017\212\266@Z\371LF.V\3248\031\302Y>\347\000MF \331\0269\000\000\000\000\347\000MF\000\000\000\000\000\000\000\000\347\000MF\000\000\000\000\000\000\000\000\347\000MF\000\000\000\000\355\236Q?G\365LF\322Gh\271\371,\032A\322\276LF\314\007\210\272\373\023\307@_\215LF\204Pw\272\022\243x@\000tLF\325\005\376\271\212B\031?\346eLF\370D\215\271 \337\351>GcLFw\"R\270\345\213R>\r`LF\027J\201\270\267oc=\024`LF\032\002\0315\324@L?\n`LF\315\002L\265\025\361+=\n`LF\000\000\000\000\000\000\000\000\n`LF\000\000\000\000\000\000\000\000\n`LF\000\000\000\000\000\000\000\000\n`LF\000\000\000\000\000\000\000\000\n`LF\000\000\000\000\000\000\000\000\n`LF\000\000\000\000\000\000\200?\n`LF\000\000\000\000\000\000\000@\n`LF\000\000\000\000\000\232\324?\n`LF\000\000\000\200\000\000\000\000\n`LF\000\000\000\000Y\353i>\356\257LF\361#\310:\260\275\r=\024`LFB\274\307\272\000\000\000\000\024`LF\000\000\000\000\355\033k<\024`LF\000\000\000\000f\017\226A/RLF;@\213\271b{\262?\232TLFE\312C8\274t\223<\nhLF\246\324\3029\000\000\000\000\nhLF\000\000\000\000jOI<\\hLFfZ\3156\000\000\000\000\\hLF\000\000\000\000\000\000\000\000\\hLF\000\000\000\000\000\000\000\000\\hLF\000\000\000\000\000\000\000\000\\hLF\000\000\000\000\000\000\000\000\\hLF\000\000\000\000\341zT@A\320LFQ\035\002;kxq?3\274LF\000\000\000\000o\022\003<3\274LF\000\000\000\000\000\000\000\0003\274LF\000\000\000\000\307\003\366@\246\302LF\356\376\0009\000\000\000\000\246\302LF\000\000\000\000&\377\253=U\315LFA\303U9\000\000\000\000U\315LF\000\000\000\000\000\000\000\000U\315LF\000\000\000\000$\262\200=\366\277LFB\274\205\271\000\000\000\000\366\277LF\000\000\000\000\000\000\000\000\366\277LF\000\000\000\000\000\000\000\000\366\277LF\000\000\000\000\000\000\000\000\366\277LF\000\000\000\000Lp\374?\250\327LF~\006\3559\000\000\000\000\250\327LF\000\000\000\000\000\000\000\000\250\327LF\000\000\000\000\000\000\000\000\250\327LF\000\000\000\000\000\000\000\000\250\327LF\000\000\000\000\023S\371;\270\327LF\260\017\2415\000\000\000\000\270\327LF\000\000\000\000\000\000\000\000\270\327LF\000\000\000\000\341\230%<\335\327LF\327\34076\207\016\342>\000\330LF\251{.6\000\000\000\000\000\330LF\000\000\000\000\230\205\351=\\\300LFZY\354\271\222D\351=J\300LF\2461\265\265\000\000\000\000J\300LF\000\000\000\000\000\000\000\000J\300LF\000\000\000\000\217\302\365<\\\300LF\2461\2655\315\314L=\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000BY4>\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000fG\220<\\\300LF\000\000\000\200\217\302\365<\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000\317$Z;R\300LF\315\002L\265\000\000\000\000R\300LF\000\000\000\000o\022\343>\\\300LF\315\002L5\n\327\243=\\\300LF\000\000\000\200\000\000\000\000\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000\n\327#<\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000\027\272P:\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000\255P\301<\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000\000\000\000\000\\\300LF\000\000\000\000Q\225P>R\300LF\315\002L\265\000\000\000\000R\300LF\000\000\000\000\000\000\000\000R\300LF\000\000\000\000\n\327#<\\\300LF\315\002L5\271\3743@\\\300LF\000\000\000\000\037X\242=\330\327LF\213\341\3529\000\000\000\000\330\327LF\000\000\000\000\243\302\302>V\336LF\256\325\0019\315\226h<\037\365LF5\304\3439\n\327#<\037\365LF\000\000\000\200\253\211\361>\014\306LF\270.k\272\000\000\000\000\014\306LF\000\000\000\000\222 !AU\'MF\245=\363:\213\017\021@q+MF&\032\2448\305\273\300>\000PMF w6:.S\327?~>MFD\245\256\271y.\216?\367OMFs[\2569\000\000\000\000\367OMF\000\000\000\0000Z0<\000PMF\333*15\000\000\000\000\000PMF\000\000\000\000\252\326\035>\000PMF\000\000\000\000\000\000\000\000\000PMF\000\000\000\000\000\000\000\000\000PMF\000\000\000\000\250\260\315=\000PMF\000\000\000\000gD\251>\000PMF\000\000\000\000\000\000\000\000\000PMF\000\000\000\000\000\000\000\000\000PMF\000\000\000\000\000\000\000\000\000PMF\000\000\000\000\000\000\000\000\000PMF\000\000\000\000\376\262\271>\000PMF\000\000\000\000\007\301\370;\000PMF\000\000\000\200\000\000\000?\366OMF\315\002L\265\3371\2378\000PMF\315\002L5\000\000\000\000\000PMF\000\000\000\000\231M\271<\000PMF\000\000\000\000\237\200\2329\366OMF\315\002L\265\217\302\365<\000PMF\315\002L5\264\033\377<\000PMF\000\000\000\200*C\225>\000PMF\000\000\000\000q\315\231:\366OMF\315\002L\265\000\000\000\000\366OMF\000\000\000\000r\371\307?\000PMF\315\002L5\000\000\000\000\000PMF\000\000\000\000D:-@\000PMF\000\000\000\000\274;\327?UgMF\236\300\3509#\333\017@7\302MF\"\211\342:\251\005\202:\366\333MF\315 \000:\000\000\000\000\366\333MF\000\000\000\000\000\000\000\000\366\333MF\000\000\000\000\000\000\000\000\366\333MF\000\000\000\000\000\000\000\000\366\333MF\000\000\000\000\000\000\000\000\366\333MF\000\000\000\000\005\036\373>\000\334MF\315\002L5\2335\255=\000\334MF\000\000\000\200\n\327#<\000\334MF\000\000\000\000\266\225)@\000\334MF\000\000\000\000\373\250\030@\006\342MF\025\277\3578\036P\374>\022%NF\354\273\246:\000\000\000\000\022%NF\000\000\000\000\000\000\000\000\022%NF\000\000\000\000\000\000\000\000\022%NF\000\000\000\000\000\000\000\000\022%NF\000\000\000\000\000\000\000\000\022%NF\000\000\000\000s\327\016@\3066NF\370\331\2579\000\000\000\000\3066NF\000\000\000\000\016k\007?T@NF\216\325=9\230N\000?JONF\351\213\2249\363\264d>=`NF\'A\2509\217\253\232>=`NFY\331\0003\276\362\n@M`NFL\261\2335\000\000\000\000M`NF\000\000\000\000\000\000\000\000M`NF\000\000\000\000%\022I=R`NF\006F\3014\315\314L=R`NF\000\000\000\000\000\000\000\000R`NF\000\000\000\000\n\327\243<\000hNFvn\0309\000\000\000\000\000hNF\000\000\000\000|\010\353<\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\315\314L=\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\315\314L>\000hNF\000\000\000\000\n\327#<\000hNF\000\000\000\000a2\t@\222\212NF\371\201+:\\\307\344?\271\226NFx\366p9\000\000\000\000\271\226NF\000\000\000\000\366\346\022>)\300NFwdM:\253oI>\232\244NF\217{\010\272\000\000\000\000\232\244NF\000\000\000\000\000\000\000\000\232\244NF\000\000\000\000\000\000\000\000\232\244NF\000\000\000\000(\027y>3\273NF!\367\3379\000\000\000\0003\273NF\000\000\000\000\000\000\000\0003\273NF\000\000\000\000\000\000\000\0003\273NF\000\000\000\000\335{\032>\366\237NF\232\355\006\272\000\000\000\000\366\237NF\000\000\000\000\000\000\000\000\366\237NF\000\000\000\000\000\000\000\000\366\237NF\000\000\000\000\000\000\000\000\366\237NF\000\000\000\000H}\024=\366\237NF\000\000\000\200\n\327#<\366\237NF\000\000\000\000\000\000\000\000\366\237NF\000\000\000\000\000\000\000\000\366\237NF\000\000\000\000\337\340\363?\223\324NF\354_\202:\3365\202?\357\326NFv\320:8\256G\341=\220\351NF\202x\2709\000\000\000\000\220\351NF\000\000\000\000\000\000\000\000\220\351NF\000\000\000\000\n\327\243<\000\360NF/\323\3768\000\000\000\000\000\360NF\000\000\000\000\247\031\271;\000\360NF\000\000\000\000\000\000\000\000\000\360NF\000\000\000\000\000\000\000\000\000\360NF\000\000\000\000\000\000\000\000\000\360NF\000\000\000\000\2239\222=\244\322NF\270E\021\272\001\311\213<T\346NF\326\360\3029\253oI>1\240NF\307\220\255\272\000\000\000\0001\240NF\000\000\000\000\n\327#<\315\356NF>\311\302:\214|g>H\356NF\224\300$\267\373\315\027?7\225NF\017^\334\272\000\000\000\0007\225NF\000\000\000\000\000\000\000\0007\225NF\000\000\000\000\335\014\231@\010\364NFf\376\352:\000\000\000\000\010\364NF\000\000\000\000\224\366\356?\263\354NF\310\034\021\271\254B\032=\217\354NF\016\1770\266\\\217B>A\223NF\025\371\334\272\000\000\000\000A\223NF\000\000\000\000\000\000\000\000A\223NF\000\000\000\000\315\314L=\001\345NFv\237\312:\304z\243:\n\220NF\257C\322\272\037\243\201>\000\220NF\315\002L\265\n\327#<\n\220NF\315\002L5\000\000\000\000\n\220NF\000\000\000\000\000\000\000\000\n\220NF\000\000\000\000\000\000\000\000\n\220NF\000\000\000\000Jsl>\007\220NF!\226\213\264\000\000\000\000\007\220NF\000\000\000\000\000\000\000\000\007\220NF\000\000\000\000\000\000\000\000\007\220NF\000\000\000\000\000\000\000\000\007\220NF\000\000\000\000\322MZ>\n\220NF!\226\2134\000\000\000\000\n\220NF\000\000\000\000\270c\242>\006\220NF\333*\261\264\000\000\000\000\006\220NF\000\000\000\000\000\000\000\000\006\220NF\000\000\000\000\256G=@\n\220NF\333*\2614Lo\241<\n\220NF\000\000\000\200\000\000\000\000\n\220NF\000\000\000\000\217\302\365<\n\220NF\000\000\000\200\246\313\347=\n\220NF\000\000\000\000\000\000\000\000\n\220NF\000\000\000\000\000\000\000\000\n\220NF\000\000\000\000\307w\225<\n\220NF\000\000\000\000\000\000\000\000\n\220NF\000\000\000\000\000\000\000\000\n\220NF\000\000\000\000\000\000\000\000\n\220NF\000\000\000\000\222?\367;\n\220NF\000\000\000\000\000\000\000\000\n\220NF\000\000\000\000\000\000\000\000\n\220NF\000\000\000\000\303\207\032=\n\220NF\000\000\000\000\000\000\000\000\n\220NF\000\000\000\000\224\367\220=\n\220NF\000\000\000\2006\253>?\001\217NF\241\225\244\267\000\000\000\000\001\217NF\000\000\000\000\000\000\000\000\001\217NF\000\000\000\000\000\000\000\000\001\217NF\000\000\000\000\250?\367;\366\217NF\356\352\2277\n\327#<\000\220NF\315\002L5\000\000\000\000\000\220NF\000\000\000\000\000\000\000\000\000\220NF\000\000\000\000\000\000\000\000\000\220NF\000\000\000\000\000\000\000\000\000\220NF\000\000\000\000\000\000\000\000\000\220NF\000\000\000\000\n\327#<\000\220NF\000\000\000\000\000\000\000\000\000\220NF\000\000\000\000\000\000\000\000\000\220NF\000\000\000\000\000\000\000\000\000\220NF\000\000\000\000\000\000\000\000\000\220NF\000\000\000\000\250W\202?\262\217NF\237\235\302\266\033\"(=\000\220NF\237\235\3026\000\000\000\000\000\220NF\000\000\000\000\000\000\000\000\000\220NF\000\000\000\000\n\327\243=\000\220NF\000\000\000\000t:I=\000\220NF\000\000\000\000\000\000\000\000\000\220NF\000\000\000\000\n\327\243=\000\220NF\000\000\000\200\000\000\000\000\000\220NF\000\000\000\000\000\000\000\000\000\220NF\000\000\000\000\n\327\243<\000\220NF\000\000\000\000\000\000\000\000\000\220NF\000\000\000\000\n\327\243<\000\220NF\000\000\000\000v/\027@S\337NFU\236\304:\355g\220;\315\345NFJ8\0009\000\000\000\000\315\345NF\000\000\000\000%i+9\315\345NF\000\000\000\000\000\000\000\000\315\345NF\000\000\000\000\260r\000@-\'OF>\311\241:\n\327#<\315\345NF=\226\241\272X1A<\0000OFg\236\267:\000\000\000\000\0000OF\000\000\000\000\315\314L=\327/OF4\253J\266\330\320\233=\303/OF4\253\312\265\017\025\177?t\223NF\037\"A\273\000\000\000\000t\223NF\000\000\000\000\000\000\000\000t\223NF\000\000\000\000\000\000\000\000t\223NF\000\000\000\000\336,\322:\306\362NF\332?\354:\216\3107<\356\007OF\202^\3219\000\000\000\000\356\007OF\000\000\000\000\000\000\000\000\356\007OF\000\000\000\000\032A\255=\366\223NF\017f\017\273\n\327\243<\366\223NF\000\000\000\000\000\000\000\000\366\223NF\000\000\000\000\032C\014=\366\237NF\260\356m9\260\003\367?\314\037OF\000b\036;\000\000\000\000\314\037OF\000\000\000\000V\254\356<\246\016OF\245\210\251\271\244\337\2358\000\010OF:\213\003\271\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\315\314L>\331\250NFGQ\353\272\000\000\000\000\331\250NF\000\000\000\000\000\000\000\000\331\250NF\000\000\000\000\000\000\000\000\331\250NF\000\000\000\000\000\000\000\000\331\250NF\000\000\000\000\000\000\200>\272\275NF\007\351\3169_*v?i\035OFa\365\354:\000\000\000\000i\035OF\000\000\000\000\315\314L>\\\254NF5\273\013\273\000\000\000\000\\\254NF\000\000\000\000x\262==\032\002OFMh\324:\000\000\000\000\032\002OF\000\000\000\000\000\000\000\000\032\002OF\000\000\000\000\000\000\000\000\032\002OF\000\000\000\000\2672\002?\366/OF\377\331b:)\313l@tSOF\351k/:\241Kv<\250\\OFW\31559\315\314L>\210\331NF<\341!\273\000\342\302>\242jOF\301\2233;\000\000\000\000\242jOF\000\000\000\000\3512\033>\315kOF\035\242\2707\343\035\236>]hOF\006\305\207\270\000\000\000\000]hOF\000\000\000\000%WV<{kOF\037Jv8\315\314L>{fOF\304w\305\270O\210\350=\357hOF\217\374A8\000\000\000\000\357hOF\000\000\000\000\367\347\031?\205fOF\204\314>\270\000\000\000\000\205fOF\000\000\000\000\315\314L>{fOF\234SI\265\354Q8?\014fOF\357\346\010\267\000\000\000\000\014fOF\000\000\000\000\000\000\000\000\014fOF\000\000\000\000W\256\270<RhOF\240\23138\315\314L>\354gOF5\252\374\266\n\327#<\366gOF\234SI5\377\223|?\366gOF\000\000\000\0003}1?\363gOF$9l\264\023\363 ?\366gOF$9l4\000\000\000\000\366gOF\000\000\000\000\316\252\277?\366gOF\000\000\000\200\000\000\000\000\366gOF\000\000\000\000\315\314L>\354gOF\234SI\265.\332\177?\372iOF\214\\\"8\n\327#<\000lOF\307\355\0378\022v0=\000lOF\000\000\000\200\000\000\000\000\000lOF\000\000\000\000\315\314L>\307hOF\233\255~\2705f\014=\375kOFa\301}8\000\000\000\000\375kOF\000\000\000\000\000\000\000\000\375kOF\000\000\000\000\000\000\000\000\375kOF\000\000\000\0007\203}>\370kOF1a\321\264o\022\003;\366kOF\350R\026\264\000\000\000\000\366kOF\000\000\000\000[\345\306>\373kOFj\244\3064\000\000\000\000\373kOF\000\000\000\000z\005+?\000lOF\242\347\2734 c^?\000lOFY\331\0003\000\000\000\000\000lOF\000\000\000\000\320\374\317>\373kOFj\244\306\264)\\\217=\000lOFj\244\3064\000\000\000\000\000lOF\000\000\000\000\315\314L>\366kOF\234SI\265\000\000\000\000\366kOF\000\000\000\000\n\327#<\000lOF\234SI5\000\000\000\000\000lOF\000\000\000\000\000\000\000\000\000lOF\000\000\000\000\315\314L>\366kOF\234SI\265}\010\252<\000lOF8\365C5\000\000\000\000\000lOF\000\000\000\000\326\356?>\377kOF\225\277V\263\315\314L>\366kOF?\2116\265\217\302u=\367kOF!\226\0134\343\245\343?\000lOFE\035)5\000\000\000\000\000lOF\000\000\000\000q=\212>\370kOF\350R\026\265\000\000\000\000\370kOF\000\000\000\000\000\000\000\000\370kOF\000\000\000\000\315\314L>\366kOF\225\277V\264\000\000\000\000\366kOF\000\000\000\000\000\000\000\000\366kOF\000\000\000\000q\243\323?\201\203OF\035t\3509\334~\371:\366kOF\235Z\350\271{\257v>doOF\370\211\2078\000\000\000\000doOF\000\000\000\000\000\000\000\000doOF\000\000\000\000\000\000\000\000doOF\000\000\000\000\000\000\000\000doOF\000\000\000\000\315\314L>{mOFq\t\027\270\000\000\000\000{mOF\000\000\000\000?5^>\016\211OFJ \010:\315\314L>\235nOF\016t\002\272\000\000\000\000\235nOF\000\000\000\000\000\000\000\000\235nOF\000\000\000\000G97@\256\222OF\245\0072:\000\000\000\000\256\222OF\000\000\000\000\n\327#<\224\242OF\362\335\2349\000\000\000\000\224\242OF\000\000\000\000\000\000\000\000\224\242OF\000\000\000\000\000\000\000\000\224\242OF\000\000\000\000Z\320\241>#\204OF<\037\026\272\n\212\267>\365\247OF\326\3020:\326\274\342>\247\246OF&1\316\267 \354\263<\354\247OF|\021\3107\315\314L>uoOF*6\213\272\000\000\000\000uoOF\000\000\000\000\215\212\007>,\215OF\033\260\022:\315\314L>\000oOFt\336\024\272M\264\311?\244\247OF~\315\213:\232\231\231>\000oOF>\247\213\272\315\314L>\370mOF/\275\242\267\305y\344=\377kOFu\374\033\270\n\327\243=\366kOF\333*1\265\217[%>\310jOF\266\371\271\267\000\000\000\000\310jOF\000\000\000\000\315\314L>\232gOF\026h{\270\000\000\000\000\232gOF\000\000\000\000\315\314\314=^\230OF\322\306p:\367\322\311?\244gOF\036\\p\272H\341\272>ggOF5Q\225\266I\231I?\004gOF8\364\365\266\000\000\000\000\004gOF\000\000\000\000\000\000\000\000\004gOF\000\000\000\000\n\327#<\354fOFV\350\356\265+\255\376>\205fOFi\376\373\266\323M\242?\340cOF>6Q\270\000\000\000\000\340cOF\000\000\000\000\256Ga>\367\277NF\241SJ\273,\300\223<\366/OFl\254\n;\366(8@\355^OF\346 h:\217\302u<\217\007OF\337\265\327\272\000\000\000\000\217\007OF\000\000\000\000\315\314L>\025\373NFr\340v\271\000\000\000\000\025\373NF\000\000\000\000)\\\217=^zOF\220n\035;\000\000\000\000^zOF\000\000\000\000\000\000\000\000^zOF\000\000\000\000\300\026\245>x0OFJ]\266\272\000\000\000\000x0OF\000\000\000\000\000\000\000\000x0OF\000\000\000\000\315\314L>\000\010OF\271\002H\272\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\315\314L>\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\002\304\010@\344AOF\200*\217:q=\212>\026\244NF\314\352B\273\000\000\000\000\026\244NF\000\000\000\000\000\000\000\000\026\244NF\000\000\000\000\315\314L>3\302NF\020;\025:\000\000\000\0003\302NF\000\000\000\000\000\000\000\0003\302NF\000\000\000\000Jh\206>3\302NF\000\000\000\000\000\000\000\0003\302NF\000\000\000\000\315\314L>3\302NF\000\000\000\000\354Q\270=\"\315NF\007\230X9;\224\350>R\323NF\274\022\3658\315\314L>\330\305NF\301o\205\271\000\000\000\000\330\305NF\000\000\000\000\257{L>R\323NF\317w\2059\000\000\000\000R\323NF\000\000\000\000\000\000\000\000R\323NF\000\000\000\000k\377\t?\243\307NF\247cg\271\274t\023=R\323NF\023qg9-\311t=\\\323NF\315\002L5\000\000\000\000\\\323NF\000\000\000\000\370\326b>.\244NFa\231i\272\000\000\000\000.\244NF\000\000\000\000\000\000\000\000.\244NF\000\000\000\000\027\331\226?a\263NF\030\242\2269#\333y=\000\244NF\254[\230\271\000\000\000\000\000\244NF\000\000\000\000\000\000\000\000\000\244NF\000\000\000\000\017%P>\000lNFc\300\212\272\030\235\225=\000lNFw\314\2532\000\000\000\000\000lNF\000\000\000\000\315\314L>\000lNFY\331\000\263T\202\356:\nlNF\315\002L5\000\000\000\000\nlNF\000\000\000\000\000\000\000\000\nlNF\000\000\000\000\315\314L>\000lNF\315\002L\265\217\302\365<\nlNF\315\002L5\n\327#<\nlNF\000\000\000\000\315\314L>\000lNF\315\002L\265o\022\003<\000lNF\000\000\000\000\n\345@@\014DNFP0F\272\256Ga>P\027NF\245\030^\272\315\314\314<=,NF\325\372\3179\204\257!@l\000NF\307\241Y\272\232\231\231>\n\360MF\275\336\242\271\n\327\243<\303\027NF)\201E:\000\000\000\000\303\027NF\000\000\000\000\315\314L=!\021NF\005\321\003\271\000\000\000\000!\021NF\000\000\000\000q=\212>\241\tNF\032\016\025\271\n\327#<\000\220NFv\364&;\000\000\000\000\000\220NF\000\000\000\000\tV\207>\275#NF\252,\006\273\000\000\000\000\275#NF\000\000\000\000\000\000\000\000\275#NF\000\000\000\000\n\327\243<q(NF\360\345\2728\315\314L>\244\034NF\020fj\271\000\000\000\000\244\034NF\000\000\000\000\000\000\000\000\244\034NF\000\000\000\000\221\017\272?\225JNFU<d:\000\000\000\000\225JNF\000\000\000\000\000\000\000\000\225JNF\000\000\000\000\315\314L>\000\030NF3\024{\272\000\000\000\000\000\030NF\000\000\000\000U\031u=\020gNF\376j\304:\205\352W>*\034NF\274\312\271\272C\222U<\n\030NF\360\371\243\270zRh=)\030NFNV\0306\000\000\000\000)\030NF\000\000\000\000\000\000\000\000)\030NF\000\000\000\000\315\314L>\037\030NF\315\002L\265\n\327\243<)\030NF\315\002L5\000\000\000\000)\030NF\000\000\000\000\000\000\000\000)\030NF\000\000\000\000\243]\223>\"\374MF\226C\013\272\217\302u=\n\360MF\221mp\271\000\000\000\000\n\360MF\000\000\000\000\214\270\253>\000\360MF\315\002L\265\322,S>\000\360MF\000\000\000\000\3174<<\n\360MF\315\002L5\000\000\000\000\n\360MF\000\000\000\000\000\000\000\000\n\360MF\000\000\000\000\315\314L>\000\360MF\315\002L\265\000\000\000\000\000\360MF\000\000\000\000\336[\313;\n\360MF\315\002L5z\230\341?p\267MF\013\271\214\272\243\271\306>\016\217MF\303\005I\272\212\233\224=\000\330MF}\261\265:\315\314L>\270\247MF$-p\272\212\251+?\336\204MFf\211-\272\255\037B@\346OMFD\366\203\272\315\314L>\354\035MF\034?y\272Y2\276>\000(MF\0246I9\000\000\000\000\000(MF\000\000\000\000\000\000\000\000\000(MF\000\000\000\000\000\000\000\000\000(MF\000\000\000\000\315\314L>\354\'MF\315\002\314\265n\361x;\366\'MF\315\002L5\306s0=\366\'MF\000\000\000\200\315\314L>\366\'MF\000\000\000\000d\227\203;\000(MF\315\002L5\221~\217@\373aMF\030\264\220:F\363\t>\000\360MF\305\0041;\315\314L>\366\357MF\315\002L\265!8q=\376\357MFE\035)5\000\000\000\000\376\357MF\000\000\000\000\000\000\000\000\376\357MF\000\000\000\000\315\314L>\366\357MFE\035)\265\000\000\200>\366\357MF\000\000\000\000\000\000\000\000\366\357MF\000\000\000\000\205\353\221>Z\275MF$\243{\272\371B!=;\335MFI\246\036:\000\000\000\000;\335MF\000\000\000\000\315\314L>5\236MFe\275\234\272\000\000\000\0005\236MF\000\000\000\000\000\000\000\0005\236MF\000\000\000\000\315\314L>\n\214MF\221\362\264\271Pq.?4\347MF\266\023\343:\000\000\000\0004\347MF\000\000\000\000\315\314L>-\214MF\316W\342\272\315;>?\232\275MFT7v:\000\000\000\000\232\275MF\000\000\000\000\000\000\000\000\232\275MF\000\000\000\000\210\3178?\000\321MFj\034\3019\315\314L>\n\236MFZ\212}\272\257\235\302<\244\240MF\225=O8\000\000\000\000\244\240MF\000\000\000\000\237\222\210=\033\214MF]\212\314\271\365)\033=\037\270MF9G[:\315\314L>\307\222MF\216\3419\272\260\233F:\024\270MF\033\3209:M.F:\n\270MF\315\002L\265iX`>\310\234MF\340\256\007\272\000\000\000\000\310\234MF\000\000\000\000\000\000\000\000\310\234MF\000\000\000\000\315\314L>J\232MF\240\304F\270\000\000\000\000J\232MF\000\000\000\000\000\000\000\000J\232MF\000\000\000\000\315\314L>)\232MFIg\"\266\223:\351?\005\350MFf\344\301:\337\177\013>\000\360MF\023\271\0369\323\377\232=\n\360MF\315\002L5\315\314L>3\256MF\312\260\243\272\000\000\000\0003\256MF\000\000\000\000\315\314L>\037\256MF\315\002\314\265\000\000\000\000\037\256MF\000\000\000\000\000\000\000\000\037\256MF\000\000\000\000\315\314L>\037\256MF\000\000\000\000\000\000\000\000\037\256MF\000\000\000\000\n\327#<)\256MF\315\002L5\000\000\000\000)\256MF\000\000\000\000\341z\224>\037\256MF\315\002L\265\000\000\000\000\037\256MF\000\000\000\000\221\314\207>\037\256MF\000\000\000\000\315\314L>\037\256MF\000\000\000\000\345\231\004?\"\256MF\204\364\2204\000\000\000\000\"\256MF\000\000\000\000\344\203\276>)\256MF\213\210\0035q=\212>!\256MF\350R\026\265\000\000\000\000!\256MF\000\000\000\000\000\000\000\000!\256MF\000\000\000\000\000\000\000\000!\256MF\000\000\000\000\315\314L>\275\234MF\306*\255\271\000\000\000\000\275\234MF\000\000\000\000\000\000\000\000\275\234MF\000\000\000\000\246\272R>\322\205MFmJ\344\271\000\000\000\000\322\205MF\000\000\000\000$S\332=\ntMF2,\261\271\315\314L>\000tMF8\365C\265R\031d=\037\201MF\226\304\2029\016\210\257<\ntMF\216Z\202\271\000\000\000\000\ntMF\000\000\000\000\315\314L>\000tMF\315\002L\265\000\000\000\000\000tMF\000\000\000\000\000\000\000\000\000tMF\000\000\000\000\000\000\000\000\000tMF\000\000\000\000\315\314L>\026jMF\025\250E\271\000\000\000\000\026jMF\000\000\000\000\300\354\216?\204\255MF\331\022\250:\315\314L>\235dMF z\265\272\000\000\000\000\235dMF\000\000\000\000\000\000\000\000\235dMF\000\000\000\000M.F:\366sMF\032\002\2319\000\000\000\000\366sMF\000\000\000\000\315\314L>\366sMF\000\000\000\000\000\000\000\000\366sMF\000\000\000\000\000\000\000\000\366sMF\000\000\000\000U\016S>\366sMF\000\000\000\000\000\000\000\000\366sMF\000\000\000\000\000\000\000\000\366sMF\000\000\000\000&\236N>\366sMFw\314+2\n\327\243<\000tMF\234SI5\000\000\000\000\000tMF\000\000\000\000\315\314L>\366sMF\315\002L\2655\357\350?\025\224MF\021\032 :\000\000\000\000\025\224MF\000\000\000\000\315\314L>JtMFw\\\036\272\000\000\000\000JtMF\000\000\000\000\000\000\000\000JtMF\000\000\000\000\000\000\000\000JtMF\000\000\000\000\000\000\000\000JtMF\000\000\000\000\315\314L>\307\215MF:\017\3769\000\000\000\000\307\215MF\000\000\000\000\233\217\036=[\215MF\260b\006\267\237\306\203:\037\221MF\277\007\2268\315\314L>\024\221MF\315\002L\265\000\000\000\000\024\221MF\000\000\000\000\303r\025:\341\203MF\325\201\203\271\000\000\000\000\341\203MF\000\000\000\000b\020\230?\352\203MFw\314+5\000\000\000\000\352\203MF\000\000\000\000]mE=\343\203MFY\331\000\265\000\000\000\000\343\203MF\000\000\000\000\315\314L>\341\203MFw\314+\264\000\000\000\000\341\203MF\000\000\000\000\000\000\000\000\341\203MF\000\000\000\000\315\314L>\341\203MF\000\000\000\000\n^\272<\343\207MF\270\262\2378\000\000\000\000\343\207MF\000\000\000\000\000\000\000\000\343\207MF\000\000\000\000Lo\241<\341\215MF\367\342\3568-I\231?\352\215MFE\035)5\000\000\000\000\352\215MF\000\000\000\000\321\204\224>\354\215MF!\226\0134Ep4=\t\201MF\207\\\200\271\000\000\000\000\t\201MF\000\000\000\000X\250u>\270\200MFh\377\311\266\000\000\000\000\270\200MF\000\000\000\000\374\251\361?B\222MF\314\302\2569\n\327#<\037\256MF!\314\n:\n\327#<\023\256MF\362\211i\265\237\026\013:\341\237MFjV\215\271\315\314L>\300\216MF\"\235\252\271\n/7>\030\256MF\275&\034:\000\000\000\000\030\256MF\000\000\000\000\357:\225=\031\256MF\225\277V3\000\000\000\000\031\256MF\000\000\000\000\315\314L>\024\256MF?\211\266\264\000\000\000\000\024\256MF\000\000\000\000\266\346\2368\037\256MF\315\002L5\000\000\000\000\037\256MF\000\000\000\000\256Ga>\025\256MFp89\265\000\000\000\000\025\256MF\000\000\000\000F\372D<\024\256MF\350R\226\263\353\275E?)\242MF\032cm\271\000\000\000\000)\242MF\000\000\000\000\005\342\257;\000\200MFE\032*\272,e\331>\037\200MFNV\0306\315\314L>\n\200MF4\253\312\265\000\000\000\000\n\200MF\000\000\000\000\n\327#<\024\200MF\234SI5=\nW>\003\200MF\020$\255\265\212\260~@@zMF\224\303\345\270.<\316=5dMF\352\257\333\271u\335F:3tMF\002y\2379H\303\275>fGMF\004N_\272\315\314L>&\031MF\320\261f\272\000\000\000\000&\031MF\000\000\000\000\000\000\000\000&\031MF\000\000\000\000k\267}@\260\036MF\203:\3358\n\327\243<WrMF9\316\320:\000\000\000\000WrMF\000\000\000\000s5u>?\030MFj\207\340\272\325\250,<H\030MFw\314+5\000\000\200@=\030MF\315\002L\265\315\314L>=\030MF\000\000\000\000\000\000\000\000=\030MF\000\000\000\000\277}\215?\343`MFC\\\265:\000\000\000\000\343`MF\000\000\000\000\315\314L>\236\031MF\n\254\261\272n\361\370<\024(MF?f\2209)\\\217=\024(MF\000\000\000\000\000\000\000\000\024(MF\000\000\000\000\3241g>\033\372LF\302ye\272\000\000\200?]\000MF:\033\3728l\241)=\354\tMF4\002?9\000\000pA\026\334LF}\353d\272\315\314L>\320\311LFu\251\266\271\177?p?9\315LF\026f\2108\326\366\345>\010\001MF\316\203\201:\234\254H@\000\260LF^^\312\272\000\000\000\000\000\260LF\000\000\000\000s@\005>\000\260LFY\331\000\263u\335F:\000\264LF\272\030\2408\315\314L>\374\263LFL\261\233\264\315\314\314=\351\264LF\220$\2247\000\000\000\000\351\264LF\000\000\000\000\000\000\000\000\351\264LF\000\000\000\000\315\314L>\002\260LF\350*\304\270\000\000\000\000\002\260LF\000\000\000\0001\231\252=\365\274LF\334\213\2019(T\242>\037\276LF\t\220\2727}\331\033=j\320LF\254\374\2669\000\000\000\000j\320LF\000\000\000\000\226W\340?\304\275LF?}\272\271?1\240>\010\260LF\301c\211\271\027\226\373?\001\260LFSE\016\265\224\262\205?\n\260LF8\365C5\266\252\341=\n\260LF\000\000\000\000\t`\253>\000\260LF\315\002L\265\000\000\000\000\000\260LF\000\000\000\000z~\245=\n\260LF\315\002L5\231\027*=\n\260LF\000\000\000\000\215\222m=\n\260LF\000\000\000\200\274\224\335>\006\260LF\242\347\273\264qx\002A\356.LFYt!\273\260\323<=)\361KF\232\342\232\272\354\341\010?\224\223LFi\340K;\004\2726>\337\257LF9\236\r:\320x1?\315\257LFp8\271\265~=\362>\325\256LF\231\257\232\267\373\310\"?\315\257LF\231\257\2327F~[@\256\200LFN\272k\272C\014D>\327\207LFIo\0179\355\3147?\310KLF\364Y\226\272\000\000\000\000\310KLF\000\000\000\000\000\000\000\000\310KLF\000\000\000\000\210\035`>\362XLFI\371\2039A\265F?\005eLFS\020r9\000\000\000\000\005eLF\000\000\000\000\000\000\000\000\005eLF\000\000\000\000\315\314L>1\365KF\232\020\014\273 \354\263<\315\353KF\036\226<\271\000\000\000\000\315\353KF\000\000\000\000\000\000\000\000\315\353KF\000\000\000\000\275B\245>\3577LFt(\277:\000\000\000\000\3577LF\000\000\000\000\342\227\037>\3577LFY\331\200\263\324\244\317?\2135LF\000\256?\270\000\000\000\000\2135LF\000\000\000\000\000\000\000\000\2135LF\000\000\000\000q=\212>4\003LF\314k|\272\000\217\t<\2703LF\034\204s:\000\000\000\000\2703LF\000\000\000\000\315\314L>\366\004LF\336zj\272\000\000\000\000\366\004LF\000\000\000\000\000\000\000\000\366\004LF\000\000\000\000\000\000\000\000\366\004LF\000\000\000\000\344\\N?\036\036LFI\203\3749\315\314L>\3273LF\256\367\3319\204^\027>\3413LF\377\261N5\000\000\000\000\3413LF\000\000\000\000\315\314L>\306\005LF\\7g\272\000\000\000\000\306\005LF\000\000\000\000\275\322d=\2643LF\335\206f:\n\327\243<\2173LF?\2116\266\000\000\000\000\2173LF\000\000\000\000\232\231\231?\365\022LFu~#\272\252\361R>\327/LF\316\355\020:o\360\235?\021\nLF8p=\272\252\361\322=\327/LF\036\223=:\027\331\316>;\010LFf\242F\272\321\210\257?h\374KFyhm\271\000\000\000\000h\374KF\000\000\000\000(:K=\303/LFn\345\200:R\270\236>\253\352KF\222>\255\272\000\000\000\000\253\352KF\000\000\000\000\017\0104A\'|KF\265\276\n\273\n\327#<\366\347KFJ\241\007;\315\314L>-lKF(i\033\2736\235l?\r\010LF<*D;\342XW>\220XKFB0\\\273\000\000\000\000\220XKF\000\000\000\000\300[\000?\366\227KF\233\241\237:\214\373\314>\372\227KF\242\347\2734\361\224\347?\366\227KF?\211\266\264\000\000\000\000\366\227KF\000\000\000\000f\367d>\367\227KF\350R\2263\374@G<\366\227KFw\314\253\263\000\000\000\000\366\227KF\000\000\000\000c\273\375?G\340KF\036\336\265:&\231\t>\0000LF\rj\346;\0000LF\377\261N5A\304\022@\223/LF\357\346\010\267A2\031?\324\347KF$\350\263\272F\266\213?\327\347KF!\226\2134\n\327\243=\327\347KF\000\000\000\000\376\023\200>\315\347KF\377\261N\265V\365\220<\327\347KF\377\261N5\000\000\000\000\327\347KF\000\000\000\000\315\314L>\315\347KF\377\261N\265\000\000\000\000\315\347KF\000\000\000\000\000\000\000\000\315\347KF\000\000\000\000\372\377M>\315\347KF\000\000\000\000\027\267\3218\327\347KF\315\002L5\000\000\000\000\327\347KF\000\000\000\000\000\000\000\000\327\347KF\000\000\000\000d\034P>\315\347KF\234SI\265L\332;=\327\347KF\234SI5\000\000\000\000\327\347KF\000\000\000\000\315\314L>\315\347KF\377\261N\265\000\000\000\000\315\347KF\000\000\000\0007\331~=\327\347KF\377\261N5\177\332\352<\327\347KF\000\000\000\000\311\241\372?\326\347KFw\314\253\263\000\000\000\000\326\347KF\000\000\000\000\312\303f@\335\347KF\266\243\0235\315\314L>\366\347KFR\236\3655\000\000\000\000\366\347KF\000\000\000\000\000\000\000\000\366\347KF\000\000\000\000\322H\014@\367\347KF\350R\2263\315\314L>\366\347KF\350R\226\263\024\375\343?\000\350KF\377\261N5\000\000\000\000\000\350KF\000\000\000\000q=\212>\370\347KF\032\002\031\265\232\231\031>\000\350KF\032\002\0315\315\314L>\366\347KF\377\261N\265\"\213\234=\000\350KF\377\261N5\000\000\000\000\000\350KF\000\000\000\000\235\224Z>\366\347KF\006FA\265\000\000\000\000\366\347KF\000\000\000\000!\254#A\344\344KF\265\325v\270=\nW>\366\277KF\332v9\272\n\327#<\000\300KF8\365C5\000\000\000\000\000\300KF\000\000\000\000\n\327\243<\000\300KF\000\000\000\000=\nW>\366\277KF8\365C\265\n\327\243=\000\300KF8\365C5\251_\341?\366\277KF\377\261N\265\000\000\000\000\366\277KF\000\000\000\000\315\314L>\366\277KF\000\000\000\000\315\314\314<\000\300KF\377\261N5\000\000\000\000\000\300KF\000\000\000\000\000\000\000\000\000\300KF\000\000\000\000\327\371\361=\371\277KF!\226\013\265\000\000\000\000\371\277KF\000\000\000\000&\231\t>\366\277KF\2757\206\264\000\000\000\000\366\277KF\000\000\000\000\000\000\000\000\366\277KF\000\000\000\000\000\000\000\000\366\277KF\000\000\000\000\n\327#=\366\277KF\000\000\000\000\315\314L>\366\277KF\000\000\000\000\250\353\234?+\211KF\353\256\211\272\000\000\000\000+\211KF\000\000\000\000\025\252\034=\270\277KFz9\211:\266^T>.QKF\364\343\n\273\243\222\352?\256\277KF\210\"\013;\000\000\000\000\256\277KF\000\000\000\000\000\000\000\000\256\277KF\000\000\000\000\003\n:?\256\277KF\000\000\000\200\000\000\000\000\256\277KF\000\000\000\000\000\000\000\000\256\277KF\000\000\000\000\206\266\226?\256\277KF\000\000\000\000\\\217B>\256\277KF\000\000\000\000\256G\341=\245\277KF\242\347;\265\345\271\035@\007\210KFj\301\213\272\315\314L=\256\277KF\'\377\213:\000\000\000\000\256\277KF\000\000\000\000\200\020I:\244\277KF\377\261N\265\221\374\300>\244\277KF\000\000\000\000\000\000\000\000\244\277KF\000\000\000\000\314\266\006?\256\277KF\377\261N5\023\0147@\257\300KF\034P\2417RI\315?\316\346KF\200\224?:\000\000\000\000\316\346KF\000\000\000\000R%\315=\204\352KFB&\2258\000\000\000\000\204\352KF\000\000\000\000\033\r\005;\354/LFJC\256:\000\000\000\000\354/LF\000\000\000\000\000\000\000\000\354/LF\000\000\000\000\312d\036>\366/LF\377\261N5\000\000 A^/LF\010\353=\267\'\202\202?\217&LF\314\2740\271\217\302\365<\315/LF n99\000\000\000\000\315/LF\000\000\000\000\000\000\000\000\315/LF\000\000\000\000\n\327#<\205\352KF`\270\255\272#\216E?\232\032LF\366sq:\343\216\342=\205\352KF\353:q\272S\005#>\217\004LF\352\303\002:\313\177U?\351\345KF\326\326\031\272\000\000\000\000\351\345KF\000\000\000\000\000\000\000\000\351\345KF\000\000\000\000\031G\372;\000\020LF\347aS:\000\000\000\000\000\020LF\000\000\000\000\000\000\000\000\000\020LF\000\000\000\000\000\000\000\000\000\020LF\000\000\000\000\000\000\000\000\000\020LF\000\000\000\000\000\000\000\000\000\020LF\000\000\000\000Z\033\202?\315\017LFs\203\200\266\000\000\000\000\315\017LF\000\000\000\000\000\000\000\000\315\017LF\000\000\000\000\000\000\000\000\315\017LF\000\000\000\000\000\000\000\000\315\017LF\000\000\000\000\000\000\000\000\315\017LF\000\000\000\000\000\000\000\000\315\017LF\000\000\000\000\000\000\000\000\315\017LF\000\000\000\000\336\223w?\000\020LF\201\003\1776\237\220\271?\007\366KF/U\002\272\254\213[=\n\350KF\220o\214\271\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\0007s\255=\n\350KF\000\000\000\000Q\314\353<\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\256\307\362<\n\350KF\000\000\000\000)\\\217=\n\350KF\000\000\000\000\n\327#<\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\n\327#<\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\342\255C?\n\350KF\000\000\000\200j\217\260=\000\350KF\377\261N\265\000\000\000\000\000\350KF\000\000\000\000\n\327\243=\n\350KF\377\261N5\000\000\000\000\n\350KF\000\000\000\000\000\221N?\n\350KF\225\277V\263\000\000\000\000\n\350KF\000\000\000\000uec<\n\350KF\225\277V3\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\212\210\270=\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000 \322\315=\n\350KF\000\000\000\200\000\000\000\000\n\350KF\000\000\000\000\333\254\364<\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\235\216\264<\n\350KF\000\000\000\000\212\037\343?\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\177\0340?\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\000\000\000\000\n\350KF\000\000\000\000\244\276\237?\000\350KF\377\261N\265\000\000\000\000\000\350KF\000\000\000\000\000\000\000\000\000\350KF\000\000\000\000\000\000\000\000\000\350KF\000\000\000\000\370\254U@\000\344KFk\264\240\270\000\000\000\000\000\344KF\000\000\000\000\n\327#<\341\343KF\030]\034\266\000\000\000\000\341\343KF\000\000\000\000\315\314L=\217\342KF\366\317\323\267\262q\004>\317\254KF\262\373\206\272\000\000\000\000\317\254KF\000\000\000\000]m\315?\024\274KF_\220\2319D`\360>\n\274KF\377\261N\265\000\000\000\000\n\274KF\000\000\000\000\000\000\000\000\n\274KF\000\000\000\000\n\327#<)\230KF\337V4\272X\234\000@\037\230KF\377\261N\265\000\000\000\000\037\230KF\000\000\000\000\000\000\000\000\037\230KF\000\000\000\000T\r\334>\304\213KF\240\220x\271~\202>>B\215KF\342j\3607\000\000\000\000B\215KF\000\000\000\000g\375V?hpKF*$\021\272\000\000\000\000hpKF\000\000\000\000\265\2425?\204pKF!\226\0136\n\327#<4\226KF\000\264=:\n\327#<\n\226KF\227dS\266\000\000\000\000\n\226KF\000\000\000\000\000\000\000\000\n\226KF\000\000\000\000\000\000\000\000\n\226KF\000\000\000\000\000\000\000\000\n\226KF\000\000\000\000\000\000\000\000\n\226KF\000\000\000\000\000\000\000\000\n\226KF\000\000\000\000\007\324v>\033\225KFbh\226\267\n\327#<\037\225KF\350R\2264\212?\235?\312\340KF\260N\276:\000\000\000\000\312\340KF\000\000\000\000&[\034>\001\230KF\255\312\266\272\000\000\000?\000\230KF\225\277V\263\000\000\000\000\000\230KF\000\000\000\000\341\362\023=\000\230KFY\331\0003\200\020\311:\000\230KFY\331\000\263\000\000\000\000\000\230KF\000\000\000\000\000\000\000\000\000\230KF\000\000\000\000\217)J>\n\230KF\377\261N5[\355\321=\005\230KF1a\321\264\000\000\000\000\005\230KF\000\000\000\000\000\000\000\000\005\230KF\000\000\000\000\335\265\204<\n\230KF1a\3214\000\000\000\000\n\230KF\000\000\000\000\000\000\000\000\n\230KF\000\000\000\000_\350\017?\000\230KF8\365C\265\177+!?L\231KF\2134\3207\000\000\000\000L\231KF\000\000\000\000\000\000\000\000L\231KF\000\000\000\000\000\000\000\000L\231KF\000\000\000\000\000\000\000\000L\231KF\000\000\000\000\354\3558A2\267KF\254a\026:\000\000\000\0002\267KF\000\000\000\000\000\000\000\0002\267KF\000\000\000\000\000\000\000\0002\267KF\000\000\000\000\000\000\000\0002\267KF\000\000\000\000\000\000\000\0002\267KF\000\000\000\000\361\000\213>\205\314KFI`\3269\000\000\000\000\205\314KF\000\000\000\000\000\000\000\000\205\314KF\000\000\000\000\000\000\000\000\205\314KF\000\000\000\000\306\345S;\000\230KF\222\361\203\272\000\000\000\000\000\230KF\000\000\000\000\205\256\3109\n\230KF\377\261N5\000\000\000\000\n\230KF\000\000\000\000\035z\200=\005\230KF\006F\301\264\000\000\200@\254kKF\232\017_\272\000\000\000\000\254kKF\000\000\000\000\000\000\000\000\254kKF\000\000\000\000\n\327\243<\271oKF\217(\2438`\261\333=\232iKFH\225\366\2709\276\213?FJKF\002\262\035\272\202\300hA\315,KF\033w\024\272A\037\235=\306\'KF4\253\312\2707\224\002A\000 KF\273\275\034\271\355da@\007 KF\2757\0065\317\314\214?4\035KF.\300c\270\360\247\036@\000\034KFL\007\302\267\342\363W@\021\375JF\020\363\033\272\313\207\373;\315\013KF\272\242\2249\000\000\000\000\315\013KF\000\000\000\000\0075\035=\244\013KF\377\261N\266\233n\035@\235\226JF\217\214\023\273\217\302\365<K\205JFS\023\257\271t7\231?\303\227JF\003\277\2729\000\000\000\000\303\227JF\000\000\000\000\000\000\000\000\303\227JF\000\000\000\000\200\270\000@\203fJF\345\353x\272p5\374;\000\200JF\205\363\000:\n\327#<\327\177JF\314]O\2664\212d@\223IJFr4\211\272\217\302u=)lJF\250\022/:\007\273\232>)lJF\000\000\000\000\000\000\000\000)lJF\000\000\000\000\211:\275;)lJF\000\000\000\0000\303\326>\037lJF\377\261N\265\000\000\000\000\037lJF\000\000\000\000\363{\204?`YJF\215\242\275\271\3658a=\321kJF$\240\2729\342F\275?\334\037JF\277\036\300\272\023\354J>\335kJFj\204\300:\035\024P=WeJF\353\363\003\271I\027\211>3`JF\367\016\320\270\177\207\242:)`JF\377\261N\265\217\262Y?\017%JF8\205\225\272\365\312\034@1\013JF\020\r\003\272\373\342Q?}\371IF\\q\263\271X\250%?=\007JF\205l\2139\000\000\000\000=\007JF\000\000\000\000\217\302u<\354\024JF\244\264\2129\000\000\000\000\354\024JF\000\000\000\000k\020\355=\366\024JF\377\261N5\000\000\000\000\366\024JF\000\000\000\000\000\000\000\000\366\024JF\000\000\000\000\000\000\000\000\366\024JF\000\000\000\000-A>?\366\024JF\000\000\000\000\t%\277>\354\024JF\315\002L\265\232\231\231>\354\024JFw\314\253\262\262\325\345;\354\024JF\000\000\000\000\000\000\000\000\354\024JF\000\000\000\000\373\352*9\354\024JF\000\000\000\000\000\000\000\000\354\024JF\000\000\000\000\336:\177<\362\024JF\2757\0065B\375z>\027\027JFV\345-8\n\327\243=\355WJFjB\244:#\335\t>\366WJF?\21165\000\000\000\000\366WJF\000\000\000\000\000\000\000\000\366WJF\000\000\000\0005p\317<\354WJF\377\261N\265\024\"\3409\366WJF\377\261N5\000\000\000\000\366WJF\000\000\000\0000\022\002?\375WJFL\261\0335\037Xa:\000XJF\315\002L4\000\000\000\000\000XJF\000\000\000\000\000\000\000\000\000XJF\000\000\000\000\000\000\000\000\000XJF\000\000\000\000Uo\246;\000XJF\000\000\000\000Zg\374<\000XJF\000\000\000\000\03579A\247\\JF`X\2748T\315\224>\354\317JF%\322\021;\216\333\261?\366\317JF\234SI5\000\000\000\000\366\317JF\000\000\000\000Jc\035>\366\317JFw\314\2532Jc\235>\366\317JF\000\000\000\000\305\362\345>\366\317JF\000\000\000\000-M\300?\366\317JF\000\000\000\000\325\314@?\366\317JF\000\000\000\000\303\376\240<\366\317JF\000\000\000\000\000\000\000\000\366\317JF\000\000\000\000\001\201\367?\373\003KF/R\203:\n\327#<\354\037KF\021\357\014:_d\275<\354\037KF\000\000\000\200\000\000\000\000\354\037KF\000\000\000\000\"!\210>\367\037KF\\|a5B\223\010>\000 KF\242\347;5E%\235=\000 KF\000\000\000\000\000\000\000\000\000 KF\000\000\000\000\274tE>\000 KF\000\000\000\000\000\000\000\000\000 KF\000\000\000\000\000\000\000\000\000 KF\000\000\000\000%c-:\000 KF\000\000\000\000\000\000\000\000\000 KF\000\000\000\000\000\000\000\000\000 KF\000\000\000\000\000\000\000\000\000 KF\000\000\000\000\000\000\000\000\000 KF\000\000\000\000\254J\300@\366\037KF\377\261N\265\337\372(?\313\037KF\225\277V\266\000\000\000\000\313\037KF\000\000\000\000\366\242\344=\t\370JFmmH\272\357\372\310>\263\357JFx>(\271\000\000\000\000\263\357JF\000\000\000\000\232\231\231>\373\317JFN\013 \272N\372\357<\366\317JF\\|\341\264\n\327#=\024\314JF]\270\234\270\000\000\000\000\024\314JF\000\000\000\0003\302v>\367iJF/\266\367\272\000\000\000\000\367iJF\000\000\000\000\357\277\241?8KJF\267\213\033\272\000\000\000\0008KJF\000\000\000\000\000\000\000\0008KJF\000\000\000\000\000\000\000\0008KJF\000\000\000\000\000\000\000\0008KJF\000\000\000\000\000\000\000\0008KJF\000\000\000\000\303\365\270?\037XJFY\240\2029\000\000\000\000\037XJF\000\000\000\000\000\000\000\000\037XJF\000\000\000\000\000\000\340@\024XJF\377\261N\265/g|<\037XJF\377\261N5G\271\t<\037XJF\000\000\000\000\203\021\352@\025XJF\315\002L\2657\203v=\037XJF\315\002L5\314\205\2418\037XJF\000\000\000\000\315\314L=\024XJF\377\261N\265K\225\005>bEJF\223@\275\271\000\000\000\000bEJF\000\000\000\000\000\000\000\000bEJF\000\000\000\000\n\327#={6JF.\341\226\271J\213$A\301\344IFe\356\316\272\000\000\000\000\301\344IF\000\000\000\000\000\000\000\000\301\344IF\000\000\000\000\000\000\000\000\301\344IF\000\000\000\000\n\327#<\366\007JF7\2212:\002+\233@!TJF\364\010\301:\000\000\000\000!TJF\000\000\000\000E\327d<\276LJFQ\224\025\271/\313\261?\256\006JFqQ\261\272\307\031F@s\374IF*cO\271\000\000\000\000s\374IF\000\000\000\000\000\000\000\000s\374IF\000\000\000\000\000\000\000\000s\374IF\000\000\000\000\335\217->^IJF\344\370\302:\316\346\216=E(JFQ\217\'\272\000\000\000\000E(JF\000\000\000\000\000\000\000\000E(JF\000\000\000\000\000\000\000\000E(JF\000\000\000\000\000\000\000\000E(JF\000\000\000\000\000\000\000\000E(JF\000\000\000\000\000\000\000\000E(JF\000\000\000\000\000\000\000\000E(JF\000\000\000\000\000\000\000\000E(JF\000\000\000\000\246\323\247>a\347IF8W\244\272\260\307\354>\3326JF\234\206\311:\000\000\000\000\3326JF\000\000\000\000\000\000\000\000\3326JF\000\000\000\000)\\\217=\037\010JF\330\243l\272\000\000\000\000\037\010JF\000\000\000\000\n\247\\<\025\010JF\234SI\265\371\017\215@_\'JF1\230\036:\370u;<\035\010JF\276S\036\272\000\000\000\000\035\010JF\000\000\000\000\217\302\025?\037\010JF\225\277\3263\000\000\000\000\037\010JF\000\000\000\000\000\000\000\000\037\010JF\000\000\000\000\000\000\000\000\037\010JF\000\000\000\000\000\000\000\000\037\010JF\000\000\000\000\000\000\000\000\037\010JF\000\000\000\000\330f\273=\024\010JF\377\261N\265\315\314L>\024\010JF\000\000\000\000\000\000\000\000\024\010JF\000\000\000\000\3021]=\037\010JF\377\261N5\000\000\000\000\037\010JF\000\000\000\000\000\000\000\000\037\010JF\000\000\000\000E\201}=\037\010JF\000\000\000\000}\277\t>\037\010JF\000\000\000\000\000\000\000\000\037\010JF\000\000\000\000\000\000\000@\024\010JF\377\261N\265\205\336\"?\024\010JF\000\000\000\000\000\000\000\000\024\010JF\000\000\000\000\"\313|<\037\010JF\377\261N5\000\000\000\000\037\010JF\000\000\000\000\000\000\000\000\037\010JF\000\000\000\000\261\277D@\3269JFe\374{:;H~?\372SJF\367_\004:\000\000\000\000\372SJF\000\000\000\000\000\000\000\000\372SJF\000\000\000\000j; >\217\010JFD\331\276\272\226\312|;\217\010JF\000\000\000\000\000\000\000\000\217\010JF\000\000\000\000\272\254\027<\217\010JF\000\000\000\000\000\000\000\000\217\010JF\000\000\000\000\000\000\000\000\217\010JF\000\000\000\000)\\\217=\217\010JF\000\000\000\000\000\000\000\000\217\010JF\000\000\000\000)\\\217=\217\010JF\000\000\000\000\n\327#<\217\010JF\000\000\000\000)\\\217=\217\010JF\000\000\000\000\014\023\200?\217\010JF\000\000\000\000\217\302\365<\217\010JF\000\000\000\000\000\000\000\000\217\010JF\000\000\000\000\000\000\000\000\217\010JF\000\000\000\000DQ\237=\217\010JF\000\000\000\000\260`\343?\375\010JFT\352\n7\000\000\000\000\375\010JF\000\000\000\000\236^\321@\337HJF\300\343\241:\000\000\000\000\337HJF\000\000\000\000\000\000\000\000\337HJF\000\000\000\000l\t\371:\024XJFn\376\2319\000\000\000\000\024XJF\000\000\000\000\315\314L=\037XJF\377\261N5\000\000\000\000\037XJF\000\000\000\000\000\000\000\000\037XJF\000\000\000\000\200\013\326?\024XJF\377\261N\265xD\203<\025XJF\000\000\000\000\363\266\251:\037XJF\377\261N5\000\000\000\000\037XJF\000\000\000\000\000\000\000\000\037XJF\000\000\000\000\271\260\340?\024XJF\377\261N\265\000\000\000\000\024XJF\000\000\000\000\000\000\000\000\024XJF\000\000\000\000\036p\375<\037XJF\377\261N5\274\005R@\037XJF\000\000\000\200\000\000\000\000\037XJF\000\000\000\000\000\000\000\000\037XJF\000\000\000\000\000\000\000\000\037XJF\000\000\000\000\375\305\205;\037XJF\000\000\000\000|\025)?\026XJF\023n&\265\000\000\000\000\026XJF\000\000\000\000\000\000\000\000\026XJF\000\000\000\000\n\327\243<\037XJF\023n&5\000\000\000\000\037XJF\000\000\000\000\000\000\000\000\037XJF\000\000\000\000\316\313<:\037XJF\000\000\000\000\000\000\000\000\037XJF\000\000\000\000\000\000\000\000\037XJF\000\000\000\000\000\000\000\000\037XJF\000\000\000\000\000\000\000\000\037XJF\000\000\000\000\000\000\000\000\037XJF\000\000\000\000\000\000\000\000\037XJF\000\000\000\000\000\000\000\000\037XJF\000\000\000\000\000\000\000\000\037XJF\000\000\000\000N\332\334=\037XJF\000\000\000\000\315\314\314=\037XJF\000\000\000\200iQ\317=\027XJF\341\276#\265\000\000\000\000\027XJF\000\000\000\000~\007Q@\037XJF\341\276#5\000\000\000\000\037XJF\000\000\000\000\315\314L=\037XJF\000\000\000\000\"!\210>\024XJF\377\261N\265\000\000\000\000\024XJF\000\000\000\000\3140S=\024XJF\000\000\000\000\363A\266>\034XJF\032\002\0315\n\327#<\037XJF\225\277V4\324\322*@\017XJF\345\010\235\265\000\000\000\000\017XJF\000\000\000\000\373\2212>%\020JFJ\370\265\272\000\000\000\000%\020JF\000\000\000\000\000\000\000\000%\020JF\000\000\000\000\n\327\243<\244\010JF\356\035\030\271)\\\217=\244\010JF\000\000\000\200\225a\363?\244\010JF\000\000\000\000\315\314\314=\207\010JF\266\243\023\266\315\314L=\244\010JF\266\243\0236\n\327#<\244\010JF\000\000\000\000\000\000\000\000\244\010JF\000\000\000\000\321\"\373?\244\010JF\000\000\000\200EH\260@O\251IF\206\226\361\272\300a}<\n\220IF\036Q\000\272\000\000\000\000\n\220IF\000\000\000\000\266\272\2758\n\220IF\000\000\000\000:\021\037@\000\220IF\377\261N\265\353S\302>\000\220IFw\314\25322A\272=\n\220IF\234SI5\300a}<\n\220IF\000\000\000\000\000\000\000\000\n\220IF\000\000\000\000\307\325\250>\000\220IF\377\261N\265\000\000\000\000\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000\306\276\371?\000\220IFw\314+\262\223J\332@\000\220IFw\314+2F\231)@\310iIF\332(B\272\234h\234@\027&IF\356\022\254\2723\221\232@j\014IF\326\267\002\272\364n\351=\242\'IF\211\244\n:\214J\352=\313\375HFO\001U\272\236bz>\325\371HF\034P\241\270\200\020I:\315\371HF\251{.\265\000\000\000\000\315\371HF\000\000\000\000\372a\020?\024\372HF?\211\2666\000\000\000\000\024\372HF\000\000\000\000\221\033;@\024\372HF\000\000\000\200\000\000\000\000\024\372HF\000\000\000\000\312\321\245?\004\372HF\023n\246\265\235\331\247>\316\371HFn\224\212\266\000\000\000\000\316\371HF\000\000\000\000\272O\371>\327\371HF\324\226>5\000\000\000\000\327\371HF\000\000\000\000\360\016\003?\315\371HF1aQ\265i\232\202?\030\367HF\025\224\\\270{\246\264?\266\360HF\311\030\002\271\000\000\000\000\266\360HF\000\000\000\000\000\000\000\000\266\360HF\000\000\000\000\n\327#<\270\371HF\032\24379\3768\342=\256\371HF1aQ\265\003\275\245<\256\371HF\000\000\000\000!W\320?_\362HFO\373\024\271\000\000\000\000_\362HF\000\000\000\000DQ\265=\256\371HF\256\000\0259R\270\236>\244\371HF\234SI\265C\266X>\244\371HFw\314\2532\000\000\000\000\244\371HF\000\000\000\0005#$<\256\371HF8\365C5\000\000\000\000\256\371HF\000\000\000\000\232\231\231>\244\371HF1aQ\265\277\375\206?\256\371HF1aQ5\000\000\000\000\256\371HF\000\000\000\000\234\201\250>\364\360HFI\3211\271\000\000\000\000\364\360HF\000\000\000\000R\270\236>\000\350HF\340\2036\271Q\002\027>\n\350HF\234SI5\000\000\000\000\n\350HF\000\000\000\000\n\327#<\312\341HF\321\315\376\270\000\000\000\000\312\341HF\000\000\000\000\000\000\000\000\312\341HF\000\000\000\000\274\305\370>\212\341HFz\026\245\266\000\000\000\000\212\341HF\000\000\000\000\200\357\003Au(IF\351\301\264:\303=a>\233\352HF:n\235\272\250d<>\000\360HF\302\375\3338\232\231\231>\366\357HF1aQ\265Dp\021>\000\360HF1aQ5\000\000\000\000\000\360HF\000\000\000\000f3\014Ad\355HF\266\246T\270ptr?\037\310HF\301\363=\272\232\231\231>\024\310HF1aQ\265\214\246\344>\026\310HF\350R\0264x\312\003=\037\310HFw\314+5\333\261\350:\037\310HF\000\000\000\000\342\3325?\032\310HF\333*\261\264o\201`@\037\310HF\333*\2614\273Ku@%\314HF\343$\2448\321\"\024>\255\321HFk\267\3418\355\226\374=\000\360HF*\240\032:\000\000\000\000\000\360HF\000\000\000\000\270\317\247>\367\357HF\324\226>\265\000\000\000\000\367\357HF\000\000\000\000\000\000\000\000\367\357HF\000\000\000\000\000\000\000\000\367\357HF\000\000\000\000\206x\207?\000\360HF\324\226>5\232\231\231>\366\357HF1aQ\265\314\037\020>\367\357HF$9\3543\374\212\210A\005\340HF\'\206\242\271\000\000\000\000\005\340HF\000\000\000\000\000\000\000\000\005\340HF\000\000\000\000\000\000\000\000\005\340HF\000\000\000\000C\306\243<\366\357HF\320\204\2429\223\252\234?\000\360HF1aQ5\246\233D;\366\357HF1aQ\265\315\316?<\366\357HF\000\000\000\200h\221m<\375\357HF\204\364\0205\246\233\304:\366\357HF\204\364\020\265w\276\277>\000\360HF\377\261N5\3711~@\213\364HF-C\2718\r\303\247=3\371HFs\305\2758g\"\244>3\371HFw\314\2532\000\000\000\0003\371HF\000\000\000\000\000\000\000\0003\371HF\000\000\000\000\246\233\304:)\371HF1aQ\265\034\247Q<3\371HF1aQ5\251\260\213>3\371HFw\314+\262LyF<3\371HFw\314+2\274t\223;)\371HF1aQ\265\246\233\304:)\371HF\000\000\000\000\246\233D;)\371HF\000\000\000\000T\343\005?)\371HF\000\000\000\000\246\233D;)\371HF\000\000\000\200/\376\323<2\371HFp895\000\000\000\0002\371HF\000\000\000\0009\264\310<1\371HF\225\277V\263\376C6@3\371HF\350R\0264\354\037~<3\371HF\000\000\000\000\246\233\304:)\371HF1aQ\265\246\233D;)\371HF\000\000\000\000i\034 >3\371HF\315\002L5\246\233\304:)\371HF\315\002L\265\246\233\304:)\371HF\000\000\000\000|\367 <0\371HF\204\364\0205\246\233D;)\371HF\204\364\020\265\246\233\304:)\371HF\000\000\000\000\031\004\326=)\371HF\000\000\000\000v\002\177>)\371HF\000\000\000\200eg\267<2\371HF\r\33235\246\233D;)\371HF\r\3323\265\246\233D;)\371HF\000\000\000\000\247\265\362=3\371HF\315\002L5\246\233D;)\371HF\315\002L\265\246\233D;)\371HF\000\000\000\000\333\371\306?3\371HF1aQ5\223Q\'=2\371HFw\314\253\263\246\233D;)\371HFp89\265\364\375T<1\371HF\260\017!5\246\233D;)\371HF\260\017!\265\246\233D;)\371HF\000\000\000\000\246\233D;)\371HF\000\000\000\000\246\233D;)\371HF\000\000\000\000\246\233D;)\371HF\000\000\000\000\246\233D;)\371HF\000\000\000\000\246\233D;)\371HF\000\000\000\000\274t\223;)\371HF\000\000\000\000\246\233D;)\371HF\000\000\000\000\002+\007=2\371HF\324\226>5\246\233D;)\371HF\324\226>\265\274t\223;)\371HF\000\000\000\000\2627\004@3\371HF\315\002L5\305 0=2\371HFw\314+\263\246\233D;)\371HF\006FA\265\246\233D;)\371HF\000\000\000\000\226C\213<1\371HFw\314+5\246\233D;)\371HFw\314+\265\023\351\211>3\371HF\377\261N5\225\213\245;-\371HF\207\227\361\264\246\233D;)\371HFw\314\253\264\274t\223;)\371HF\000\000\000\000\33760<0\371HF\350R\0265\246\233D;)\371HF\350R\026\265\246\233D;)\371HF\000\000\000\000\246\233D;)\371HF\000\000\000\000\246\233D;)\371HF\000\000\000\000\276]\341;/\371HF$9\3544\317\211\230;)\371HF\371\035\334\264\246\233\304:)\371HFY\331\000\263\325x\001@3\371HF1aQ5\000\000\000\0003\371HF\000\000\000\000\246\233D;)\371HF1aQ\265\246\233D;)\371HF\000\000\000\000\246\233D;)\371HF\000\000\000\000\327\277\353<)\371HF\000\000\000\200\002+\007=2\371HF\324\226>5\246\233D;)\371HF\324\226>\265\274t\223;)\371HF\000\000\000\000\000\000\000\000)\371HF\000\000\000\000\371w\t<3\371HF1aQ5\000\000\000\0003\371HF\000\000\000\000\000\000\000\0003\371HF\000\000\000\000\000\000\000\0003\371HF\000\000\000\000\226(\025@)\371HF1aQ\265\206Z1=3\371HF1aQ5\310\200\375?3\371HF\000\000\000\200v).>3\371HF\000\000\000\000\362\376\335>3\371HF\000\000\000\000\000\000\000\0003\371HF\000\000\000\000\000\000\000\0003\371HF\000\000\000\000\000\000\000\0003\371HF\000\000\000\000\204\363=@h\375HF\254\206\2538\000\000\000\000h\375HF\000\000\000\000\213\212\366:\366\003IF\222\206\0059\"1n?\000\004IF1aQ5\207AK:\000\004IF\000\000\000\000\n\327\243<\000\004IF\000\000\000\000\345\310\324<\000\004IF\000\000\000\000\000\000\000\000\000\004IF\000\000\000\000\357\266p=\000\004IF\000\000\000\000\017O\331=\000\004IF\000\000\000\2004Zt>\000\004IF\000\000\000\000t\030\236?\000\004IF\000\000\000\000\204(\211@JSIF\255\365\311:\000\000\000\000JSIF\000\000\000\000\000\000\000\000JSIF\000\000\000\000+u\002=\240vIF+\2713:\324\252{@\rbIF**\321\271\\8\205?\n\220IFz\332i:\351\252j?\n\220IF\000\000\000\200\334&\2428\n\220IF\000\000\000\000\000\000\000\000\n\220IF\000\000\000\000\000\000\000\000\n\220IF\000\000\000\000\000\000\000\000\n\220IF\000\000\000\000\301a}>\n\220IF\000\000\000\000\000\000\000\000\n\220IF\000\000\000\000G[\332=\n\220IF\000\000\000\000\000\000\000\000\n\220IF\000\000\000\000\002+\177?\n\220IF\000\000\000\000\000\000\000\000\n\220IF\000\000\000\000\226\330\306>\n\220IF\000\000\000\200\202v\203?\n\220IF\000\000\000\000\000\000\000\000\n\220IF\000\000\000\000\317\310T<\n\220IF\000\000\000\000\0349%?\000\220IF1aQ\265\016\370\374;\n\220IF1aQ5\177\024\"?\n\220IF\000\000\000\000\000\000\000\000\n\220IF\000\000\000\0004\242D@\n\220IF\000\000\000\000\272\256V>\n\220IF\000\000\000\000\000\000\000\000\n\220IF\000\000\000\000\000\000\000\000\n\220IF\000\000\000\000\000\000\000\000\n\220IF\000\000\000\000\032\010P?\n\220IF\000\000\000\000\262\362K:\000\220IF1aQ\265\000\000\000\000\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000\n\327#<\n\220IF1aQ5\334&\2428\n\220IF\000\000\000\000)\\\217=\n\220IF\000\000\000\200\000\000\000\000\n\220IF\000\000\000\000\000\000\000\000\n\220IF\000\000\000\000\000\000\000\000\n\220IF\000\000\000\000\n\327#<\n\220IF\000\000\000\000\315\314L>\000\220IF1aQ\2657\211\311?\n\220IF1aQ5_\364E?\n\220IF\000\000\000\000_\207\336:\000\220IF1aQ\265\000\000\000\000\000\220IF\000\000\000\000\315\314L>\000\220IF\000\000\000\000\367T\260?\000\220IF\000\000\000\000\374\264\002<\000\220IF\000\000\000\200\000\000\000\000\000\220IF\000\000\000\000a\345\t>\000\220IF\000\000\000\000\315\314L>\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000\375@\002>\000\220IFw\314\2532\000\000\200>\000\220IFw\314\253\262\000\000\000\000\000\220IF\000\000\000\000\002\342\207?\n\220IF1aQ5\315\314L>\000\220IF1aQ\265\000\000\000\000\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000\315\314L>\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000\257\324\305>\n\220IF1aQ5\371\267\200?\007\220IF\\|a\264\005\n\310@\n\220IF\\|a4R\363\224<\n\220IF\000\000\000\000\002\342\247?\000\220IF1aQ\265\000\000\000\000\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000n\227\306>\n\220IF\377\261N5\000\000\000\000\n\220IF\000\000\000\000\315\314L>\000\220IF\377\261N\265\216\331I>\n\220IF1aQ5\000\000\000\000\n\220IF\000\000\000\000\315\314L>\000\220IF1aQ\265\000\000\000\000\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000\315\314L>\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000\315\314L>d\217IFj\244F\267\211*\"?\373\217IFm\356?7\367#z>qhIF\202\337H\272\315\314L>fhIF1aQ\265\216em>qhIF1aQ5\274L\222=qhIF\000\000\000\000\315\314L>fhIF1aQ\265\000\000\000\000fhIF\000\000\000\000\000\000\000\000fhIF\000\000\000\000\315\314L>&hIF/\275\242\266\030&O@qhIFo\223\2746\000\000\000\000qhIF\000\000\000\000\000\000\000\000qhIF\000\000\000\000\315\314L>\222bIF\334\322\356\270\000\000\000\000\222bIF\000\000\000\000\000\000\240A[\032IF\t\231\267\272\315\314L>\0373IF\3106\3749\000\000\000\000\0373IF\000\000\000\000\000\000\000\000\0373IF\000\000\000\000\315\314L>\2565IF\370tP8\000\000\000\000\2565IF\000\000\000\000\000\000\000\000\2565IF\000\000\000\000\315\314L>\2565IF\000\000\000\000P\023\252>\2705IF1aQ5\232\231\231>\2565IF1aQ\265\315\314L>\2565IF\000\000\000\000\200\036\035A\2565IF\000\000\000\200\037M\224>\315(IF%\031\203\271\334F\303?=)IF\005G\0177\211*\"?\032\020IF\013\355\377\271M\010f@\336\363HF\351\315\017\272\234i\356=b\324HF\240n \272\034K\247>\215\345HFS\023\2579\000\000\000\000\215\345HF\000\000\000\000\000\000\000\000\215\345HF\000\000\000\000i&\331=\244\004IFOw\036:Q\310\027>\n\005IF\345[\0027\231\2172>\n\005IF\000\000\000\000\000\000\000\000\n\005IF\000\000\000\000\256G\341=\000\005IF1aQ\265\340\302c>\372\004IF\213\210\003\2659:\031A3\004IF(\325|\267\000\000\000\0003\004IF\000\000\000\000\000\000\000\0003\004IF\000\000\000\000\321\\\361>\021\362HFF\272\270\271[,\276<\374\361HF.\027\330\265\000\000\000\000\374\361HF\000\000\000\000a\205\267=\373\361HF\225\277\326\263\0162\345<\366\361HF1a\321\264\243\007\261?\364\361HF\350R\026\264\230\234`=\217\362HF\267\242E7\372\227E@\246\003IF(/\2569\207AK:\354\361HF`\243\264\271I\255\235>\354\361HFw\314\2532\000\000\000\000\354\361HF\000\000\000\000\000\000\000\000\354\361HF\000\000\000\000\000\000\000\000\354\361HF\000\000\000\000\313\213\261?\356\361HF\225\277V4\216\245U;\366\361HF\350R\02654*\353>\357\361HF\357\346\010\265\000\000\000\000\357\361HF\000\000\000\000\017\201\025?\366\361HF\357\346\0105\000\000\000\000\366\361HF\000\000\000\000\000\000\000\000\366\361HF\000\000\000\000\315\314\314?\354\361HF1aQ\265\000\000\000\000\354\361HF\000\000\000\000\000\000\000\000\354\361HF\000\000\000\000\372\245\255>\354\361HF\000\000\000\200\357\'S?\366\361HF1aQ5\242A\243>\354\361HF8\365C\265A\376\312;\354\361HF\225\277V\263\276\301\223@\366\361HF1aQ5\000\000\000\000\366\361HF\000\000\000\000\256\331\036>\366\361HF\000\000\000\000\376-}<\366\361HF\000\000\000\000\000\000\000\000\366\361HF\000\000\000\000\000\000\000\000\366\361HF\000\000\000\000\000\000\000\000\366\361HF\000\000\000\000+\3015Az\361HF\276\211\035\267\000\000\000\000z\361HF\000\000\000\000\346\r\262>\205\345HF\322\275s\271\333;\n=H\345HF2\007\234\266+9~;3\345HF1a\321\265\036-\203@)\345HF1aQ\265\000\000\000\000)\345HF\000\000\000\000\000\000\000\000)\345HF\000\000\000\000\000\000\000\000)\345HF\000\000\000\000\000\000\000\000)\345HF\000\000\000\0000\332O?)\345HF\000\000\000\000\335$2@\272\351HFf/\2728\000\000\000\000\272\351HF\000\000\000\000\000\000\000\000\272\351HF\000\000\000\000\305\331\352?\365\361HFw\330\'9\000\000\000\000\365\361HF\000\000\000\000\000\000\000\000\365\361HF\000\000\000\000\000\000\000\000\365\361HF\000\000\000\000\000\000\000\000\365\361HF\000\000\000\000\000\000\200?\354\361HF\315\002L\265\265\326\337<\366\361HF1aQ5\325\020\306>\366\361HF\000\000\000\200vi\315=\366\361HF\000\000\000\200\000\000\000\000\366\361HF\000\000\000\000\000\000\000\000\366\361HF\000\000\000\000o\317G=\366\361HF\000\000\000\000\000\000\000\000\366\361HF\000\000\000\000|u\364=\366\361HF\000\000\000\000\272\332\332?\366\361HF\000\000\000\200\000\000\000\000\366\361HF\000\000\000\000\nt\271}<^JIF\370I\336:\370\363\245?rzIF\346\223t:\000\000\000\000rzIF\000\000\000\000\363\223\036>RJIFE\231t\272\3655\306=RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\254\034\262?RJIF\000\000\000\200\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\357\223\236<RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\006h\033=RJIF\000\000\000\200\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000:\235\371;RJIF\000\000\000\000w\275\340?RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\n\327\243<RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\253\363,?RJIF\000\000\000\200\000\000\000\000RJIF\000\000\000\000O\036R@RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\217\302\365<KJIF!\226\013\265\351f\202?RJIF!\226\0135\000\000\000\000RJIF\000\000\000\000\021\332{@RJIF\000\000\000\200\274d\t>RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\261\364Y=RJIF\000\000\000\000\315\314L>HJIF1aQ\265\000\000\000\000HJIF\000\000\000\000\000\000\000\000HJIF\000\000\000\000\000\000\000\000HJIF\000\000\000\000\000\000\000\000HJIF\000\000\000\000\017\021\363=RJIF1aQ5\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\020Xm@RJIF\000\000\000\200\207\205\226?RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\n\327#<RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\217\302\365<RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000)\\\217=RJIF\000\000\000\200\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\n\327#<RJIF\000\000\000\000Y\023\257=RJIF\000\000\000\200\000\000\000\000RJIF\000\000\000\000\000\000\000\000RJIF\000\000\000\000\037K>=RJIF\000\000\000\000\211br;HJIF1aQ\265\222|\332=RJIF1aQ5\314\370\r@RJIF\000\000\000\000\3578F>RJIF\000\000\000\000]\326\210@\255LIF\363\330?8\371\027\334?]mIF\323G&:\315\314L=\000\220IF\003\0230:\230\256\267=\371\217IF\350R\026\265\000\000\000\000\371\217IF\000\000\000\000\014\317\263>\000\220IF\350R\0265\002h\003=\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000\212J\212>\000\220IF\000\000\000\200\000\000\000\000\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000Pq\031?\000\220IF\000\000\000\000\000\000\000\000\000\220IF\000\000\000\000eu$@\007\220IF!\226\0135\000\000\000\000\007\220IF\000\000\000\000\000\000\000\000\007\220IF\000\000\000\000/v[@\t\345IF\354\357\327:\356\031\232>\n\220IF\231\214\327\272\000\000\000\000\n\220IF\000\000\000\000\016iD>\n\220IF\000\000\000\000\017\365 ?\n\220IF\000\000\000\200\271V\364?\251\356IFoY\360:\217\302u<\205\274IF\347B~\272\336l\253=\205\274IF\000\000\000\000\271\310\305>\205\274IF\000\000\000\000\000\000\000\000\205\274IF\000\000\000\000\000\000\000\000\205\274IF\000\000\000\000\000\000\000\000\205\274IF\000\000\000\000\000\000\000\000\205\274IF\000\000\000\000\177g\276?\204\274IF\225\277\326\263\010=C@\361QJF\\\236=;\000\000\000\000\361QJF\000\000\000\000\000\000\000\000\361QJF\000\000\000\000\371\333Z>D\035JF\335M\205\272\000\000\000\000D\035JF\000\000\000\000b\253|=\205!JF\000\203\2548\000\000\000\000\205!JF\000\000\000\000\007\220x?\205!JF\000\000\000\000\337\324~>{!JF\377\261N\265\000\000\340@\256\010JF0E\373\271\353\036\365=\217\024JF\361\330p9?<\237>y\010JF\344\367t\271\n\327#<\217\024JF\241\002u9IAr?\n\010JF\021\304}\271t\371\344<\n\010JF\000\000\000\000\271[i<\n\010JF\000\000\000\000\000\000\000\000\n\010JF\000\000\000\000\033<\376;\n\010JF\000\000\000\000\000\000\000\000\n\010JF\000\000\000\000bX\002?-WJF\365\213\310:\000\000\000\000-WJF\000\000\000\000\000\000\000\000-WJF\000\000\000\000\250\376\242?\000\227JF\304\200\241:(\014^?V\252JF\266u\3039\000\000\000\000V\252JF\000\000\000\000\315\314L>(\026JF\221,;\273N/|=\372\204JF$b\014;\324\272\221?g(JF\310\010\352\272{\235\017?\001\010JF\204\037$\272\000\000\000\000\001\010JF\000\000\000\000\267\267\227>\017%JF\032G\023:\n\327\243<\231\177JF&P\345:\261\341\211<HuJF\353\237P\271\255\374\230?UkJF\234SI\271\000\000\000\000UkJF\000\000\000\000\000\000\000\000UkJF\000\000\000\000\000\000\000\000UkJF\000\000\000\000\354nX;=\026JF\272:\327\272\000\000\000\000=\026JF\000\000\000\000z\271\374;=\026JF\000\000\000\200o\271|<H\026JF\377\261N5\000\000\200?H\026JF\000\000\000\200\000\000\000\000H\026JF\000\000\000\000\217\302u>=\026JF\377\261N\265\000\000\000\000=\026JF\000\000\000\000\304\036P>\t\014JF\362\334N\271\000\000\000\000\t\014JF\000\000\000\000\213l3@\200\202JF\\\031\026;D\326\357=,\014JF~\225\025\273g\000\262=\035\243JFG@?;\000\000\000\000\035\243JF\000\000\000\000:O\227=f\026JF_\3051\273{g\000@i\232JF\026:\';\000\000\000\000i\232JF\000\000\000\000\000\000\000\000i\232JF\000\000\000\000\000*j;\232\236JF+s\2518\000\000\000\000\232\236JF\000\000\000\000\000\000\000\000\232\236JF\000\000\000\000\000\000\000\000\232\236JF\000\000\000\000\000\000\000\000\232\236JF\000\000\000\000\000\000\000\000\232\236JF\000\000\000\000\027G\014?\224\203JF`\222\010\272\000\000\000\000\224\203JF\000\000\000\000\020\347\304>\270\243JF+\210\":\005mg>rQJF\252\341\317\272\000\000\000\000rQJF\000\000\000\000\000\000\000\000rQJF\000\000\000\000\333\371~>\'SJF\276^\n8\000\000\000\000\'SJF\000\000\000\000\000\000\000\000\'SJF\000\000\000\000x\013\364?\303JJF\367\353)\271\000\000\000\000\303JJF\000\000\000\000\037\205k>\273JJF\260\017!\265\217\302u=\314ZJF\024\255\2429\000\000\000\000\314ZJF\000\000\000\000\000\000\000\000\314ZJF\000\000\000\000\315\314L>\270\243JF\223\202\270:\302\206\327=\271\243JF\350R\2263\332c\366<\303\243JF\242\347;5\315\314L>\270\243JF\377\261N\265`\345\320=\330\240JF\thh\270\216Ol>\321bJF\270\273\234\272w\276\237=\266\243JFC+\244:\n\327\243<\270\243JF\006FA4A\250\002>\n\224JFV{\236\271\303\203\206>\333dJF\250\201n\272u\246\266?\264,JF\362\013\216\272\316\210.@\307~JF\235\331\317:\227\256\225>\004}JF,\306\016\270\000\000\000\000\004}JF\000\000\000\0005/U>)7JF\236\241\260\272\000\000\000\000)7JF\000\000\000\000\000\000\000\000)7JF\000\000\000\000\000\000\000\000)7JF\000\000\000\000\246C\204?feJFR(j:\000\000\000\000feJF\000\000\000\000\303\201`>\0238JF&Pe\272\000\000\000\000\0238JF\000\000\000\000\000\000\000\000\0238JF\000\000\000\000\014\261T>\327=JF\r\232\3518\000\000\000\000\327=JF\000\000\000\000\000\000\000\000\327=JF\000\000\000\000\315\314L>\327=JFY\331\000\263\347\214$@\234sJF\237\037\210:\000\000\000\000\234sJF\000\000\000\000\315\314L>\327=JFb\373\207\272\000\000\000\000\327=JF\000\000\000\000\000\000\000\000\327=JF\000\000\000\000\315\314L>i5JF\251\272*\271\370\324\035=\341=JFi\221+98\032\234=\006pJF\233\343}:\315\314L>T4JFX\372\226\272\000\000\000\000T4JF\000\000\000\000\000\000\000\000T4JF\000\000\000\000\315\314L>\203%JF\332\027\226\271\000\000\000\000\203%JF\000\000\000\000\334\3572>\341hJF\326\242\252:\315\314L>}%JF9x\252\272y\263\235=\327hJF\030\227\252:\000\000\000\000\327hJF\000\000\000\000\025\214\032@\327\207JF5\323\034:\000\000\000\000\327\207JF\000\000\000\000\035\215\245?\031*JFk\373\354\272\227?|<\341wJFL\376\304:\000\000\000\000\341wJF\000\000\000\000\315\314L>\3302JF&\223\256\272\000\000\000\000\3302JF\000\000\000\000\257Z|<)bJF3\236o:`j\261@|\014JFI\277\330\272\000\000\000\000|\014JF\000\000\000\000$<\312:\315\007JF\010\353\275\270\315\314L>\303\007JF\377\261N\265\000\000\000\000\303\007JF\000\000\000\000\000\000\000\000\303\007JF\000\000\000\000\315\314L>\303\007JF\000\000\000\000\000\000\000\000\303\007JF\000\000\000\000\n\327\243<\315\007JF\377\261N5\315\314L>W\375IF \033T\271/\235\033={\371IF\360w\234\270\000\000\000\000{\371IF\000\000\000\000\315\314L>\000\364IF\224A\336\270\327\243`@\n\364IF\377\261N5\342as:\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\315\314L>\000\364IF\377\261N\265\000\000\000\000\000\364IF\000\000\000\000\227_\036=\n\364IF\377\261N5\000\000\000\000\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\315\314L>\000\364IF\377\261N\265\000\000\000\000\000\364IF\000\000\000\000\000\000\000\000\000\364IF\000\000\000\000\303K]?\000\364IF\000\000\000\000\315\314L>\000\364IF\000\000\000\200\000\000\000\000\000\364IF\000\000\000\000\000\000\000\000\000\364IF\000\000\000\000\000\000\000\000\000\364IF\000\000\000\000)\\\217=\n\364IF\377\261N5\315\314L>\000\364IF\377\261N\265\025\0359?\n\364IF\377\261N5\000\000\000\000\n\364IF\000\000\000\000/\275N=\n\364IF\000\000\000\000\315\314L>\000\364IF\377\261N\265\330\360\364<\n\364IF\377\261N5\000\000\000\000\n\364IF\000\000\000\000K\021L=\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\315\314L>\000\364IF\377\261N\265B\344\374;\n\364IF\377\261N5\000\000\000\000\n\364IF\000\000\000\000\255\016\236=\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\215\350\246;\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\n\327\243<\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\217\302u=\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\177c\336=\n\364IF\000\000\000\200\332\254\252@\n\364IF\000\000\000\000\n\327\243=\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\0007\253==\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\0005\213a<\000\364IF\377\261N\265q=\212>\003\364IF\225\277V4\000\000\000\000\003\364IF\000\000\000\000\000\000\000\000\003\364IF\000\000\000\000\315\314L>\000\364IF\225\277V\264d\024\270>\n\364IF\377\261N5\320\335q>\n\364IF\000\000\000\000\217\302u=\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\n\327\243<\n\364IF\000\000\000\000\n\327#<\n\364IF\000\000\000\000\244\337\326?\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\0008rk?\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\n\327\243<\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000q=\212>\003\364IF\032\002\031\2657]5=\n\364IF\032\002\0315\000\000\000\000\n\364IF\000\000\000\000\000\000\000\000\n\364IF\000\000\000\000\274\256\201?\000\364IF\377\261N\265\000\000\000\000\000\364IF\000\000\000\000\000\000\000\000\000\364IF\000\000\000\000\000\000\000\000\000\364IF\000\000\000\000\n\327\243<\n\364IF\377\261N5\2609\236@\326\366IF\262\336b8f6\342>\000\370IFb\276\2747\362\232H@L\373IF\205\261\2058\000\000\000\000L\373IF\000\000\000\000\000\000\000\000L\373IF\000\000\000\000Uv\210=\000\010JF\364\317\2009\000\000\000\000\000\010JF\000\000\000\000\337O\215=\000\010JF\000\000\000\200\351H\316>\366\007JF\377\261N\265\000\000\000\000\366\007JF\000\000\000\000\020\377\235=\000\010JF\377\261N5\000\000\000\000\000\010JF\000\000\000\000\006\341L>\366\007JF\377\261N\265\000\000\000\000\366\007JF\000\000\000\000\341\201\013>\000\010JF\377\261N5\274t\023<\366\007JF\377\261N\265\000\000\000\000\366\007JF\000\000\000\000\035\215f`a@\000\010JF\377\261N5\000\000\000\000\000\010JF\000\000\000\000\020\377\235=\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\000\000\000\000\000\010JF\000\000\000\000\021RX;\366\007JF\377\261N\265\000\000\000\000\366\007JF\000\000\000\0009\3375A\007!JF\255 \3769A\372\337=m\\JFts\226:`bq?\224\302JF}:\001;\000\000\000\000\224\302JF\000\000\000\000\000\000\000\000\224\302JF\000\000\000\000\315\314L>{\261JFK\257\254\271\000\000\000\000{\261JF\000\000\000\000\000\000\000\000{\261JF\000\000\000\000\315\314L>{\261JF\000\000\000\000\000\000\000\000{\261JF\000\000\000\000\000\000\000\000{\261JF\000\000\000\000\315\314L>{\261JF\000\000\000\000\000\000\000\000{\261JF\000\000\000\000\000\000\000\000{\261JF\000\000\000\000\315\314L>\222\221JF\2252!\272\305\217\205@\343\322JFw\024\245:+R\373<\223\261JF\005-(\272\342\027G<\\\261JFn\224\212\266\276[\177>T\261JF\023n&\265\000\000\000\000T\261JF\000\000\000\000\000\000\000\000T\261JF\000\000\000\000\315\314L>R\261JF\260\017!\264\000\000\000\000R\261JF\000\000\000\000\000\000\000\000R\261JF\000\000\000\000\315\314L>R\261JF\000\000\000\000\000\000\000\000R\261JF\000\000\000\000\014{t\033&@[\261JF\324\226>5\000\000\000\000[\261JF\000\000\000\000\272o\261;\\\261JFY\331\2003\315\314L>R\261JF\377\261N\265\000\000\000\000R\261JF\000\000\000\000\000\000\000\000R\261JF\000\000\000\000q\255\366:R\261JF\000\000\000\200\000\000\000\000R\261JF\000\000\000\000\315\314L>R\261JF\000\000\000\000+\'\211<\\\261JF\377\261N5\013{\035=\\\261JF\000\000\000\000\322\3335>\\\261JF\000\000\000\200\331\372\375>h\261JF\300\332f5\000\000\000\000h\261JF\000\000\000\000\000\000\000\000h\261JF\000\000\000\000\000\000\000\000h\261JF\000\000\000\000\000\000\000\000h\261JF\000\000\000\000\001\036-@\273\261JF}\272\3236\001\220\311:\000\264JFAU78\000\000\000\000\000\264JF\000\000\000\000333?\366\263JF\377\261N\265,e\205@\000\264JF\377\261N5\000\000\000\000\000\264JF\000\000\000\000wd@\000\264JF\000\000\000\000\000\000\000\000\000\264JF\000\000\000\000\000\000\000\000\000\264JF\000\000\000\000\315\314L>\205\266JF\347\254K8\000\000\000\000\205\266JF\000\000\000\000\000\000\000\000\205\266JF\000\000\000\000\000\000\000\000\205\266JF\000\000\000\000\206Z\343?b\016KFZ\354\335:\000\000\000\000b\016KF\000\000\000\000S\361\373:\217\266JF\214r\335\272;\354\024A\315\024KF\205\007\356:\215r!?\000 KF\377\334a9iq\304?\334DKF\033\3209:\000\000\000\000\334DKF\000\000\000\000\000\000\000\000\334DKF\000\000\000\0005\"\235=\366#KF\221\273%\272S8~@NwKFW\017\322:\315\314L>\001HKF8\014n\272\000\000\000\000\001HKF\000\000\000\000\000\000\000\000\001HKF\000\000\000\000\315\314L>qJKF\333UD8\000\000\000\000qJKF\000\000\000\000\263P<<\234gKF\325\353\022:e+\205?\260kKF\031E\2448\355\236\344?)\204KF\237c\3669\256Ga>\354oKF*\242\313\271\204\316\202>\354oKF\225\277V\263\202\347\034=\366oKF\234SI5\315\314L>\354oKF\377\261N\265\000\000\000\000\354oKF\000\000\000\000\021\233s>\366oKF\377\261N5\315\314L>\0171KF\263M\236\272\000\000\000\000\0171KF\000\000\000\000\000\000\000\000\0171KF\000\000\000\000\000\000\000\000\0171KF\000\000\000\000\272\333\244?\366EKFW\247\3229\000\000\000\000\366EKF\000\000\000\000\327\243p>\000 KF\3479?\272.]{;=.KF\206\223\2179\000\000\000\000=.KF\000\000\000\000\000\000\000\000=.KF\000\000\000\000\000\000\000\000=.KF\000\000\000\000\377\277,==.KF\000\000\000\200\000\000\000\000=.KF\000\000\000\000\350\205\274==.KF\000\000\000\000\000\000\000\000=.KF\000\000\000\000\245\275\361?\034NKFF\236 :\366\001\315>\366oKF\233\177*:\000\000\000\000\366oKF\000\000\000\000\337O\215=fHKF\345\037G\272\271\376~?\302jKFF\021-:)\\\217=\366oKFg\201\3218\276p\240<\366oKFw\314+2\315\314L>\354oKF\377\261N\265\000\000@A\003?KF\357-v\272\000\000\000\000\003?KF\000\000\000\000\000\000\000\000\003?KF\000\000\000\000\000\000\000\000\003?KF\000\000\000\000\214&\376;D4KF\354\207X\271\n\327#<\\HKF\231\201\3129S\001,=\360GKF\";\010\267\000\000\000\000\360GKF\000\000\000\000\000\000\000\000\360GKF\000\000\000\000\024B0@\226=KF\177\222P\271\000\000\000\000\226=KF\000\000\000\000\005n\274;\366GKF\251\020Q9\000\000\000\000\366GKF\000\000\000\000\000\000\000\000\366GKF\000\000\000\000\315\314L=\315;KFP\005u\271\000\000\000\000\315;KF\000\000\000\000\000\000\000\000\315;KF\000\000\000\000\n\327\243<\244;KF\377\261N\266\234\315H>\244;KFw\314+\262y<\000>\244;KFw\314+2\346\227\353>\232;KF\377\261N\265\312\207Y?\275!KFvL\002\272\000\000\000\000\275!KF\000\000\000\000\000\000\000\000\275!KF\000\000\000\000\226\tX>H;KF\331\277\000:,\020\235<H;KF\000\000\000\200\000\000\000\000H;KF\000\000\000\000\n\327#<H;KF\000\000\000\200\n\327\243<H;KFw\314+2\246\233D;=;KF\377\261N\2657\211\021?=;KF\000\000\000\000\000\000\000\000=;KF\000\000\000\000%\005\342?N6KF5\352\306\270\274\n\006@\3417KFT\354\3757L\364\242;\3417KF\000\000\000\000\000\000\000\000\3417KF\000\000\000\000\000\000\000\000\3417KF\000\000\000\000sh\221=\n4KF\320\317\232\270\n\327\243<\n4KFw\314+2\000\000\000\000\n4KF\000\000\000\000\000\000\000\000\n4KF\000\000\000\000\000\000\000\000\n4KF\000\000\000\000\000\000@@\332 KF5b\301\271\334\324\271=\316 KFY\331\200\265&x\216=\315 KFw\314\253\262\000\000\000\000\315 KF\000\000\000\000a\326\224<+(KF\324\177\0249\000\000\000\000+(KF\000\000\000\000\005\305/@\264%KF\255\231F\270&\206\253=\343 KF\374<\302\270\000\000\000\000\343 KF\000\000\000\000\000\000\000\000\343 KF\000\000\000\000\000\000\200?z KFX4\004\267\000\000\000\000z KF\000\000\000\000\000\000\000\000z KF\000\000\000\000\246\003\375>\000 KF\315\003\032\267\000\000\000\000\000 KF\000\000\000\000L\210\244=\001 KF\350R\2263\000\000\000\000\001 KF\000\000\000\000\000\000\000\000\001 KF\000\000\000\000\000\000\000\000\001 KF\000\000\000\000\n\327\243=\t KF\260\017!5\000\000\240@\000 KF\r\3323\265\266n\373;\n KF\377\261N5\n\327#<\n KF\000\000\000\000v5u@\n KF\000\000\000\000\000\000\000\000\n KF\000\000\000\000\031\313\227@;\036KF*!\022\270\000\000\000\000;\036KF\000\000\000\000\232\231\231>\357\035KF;?\275\266u>\3318\n\034KF\344\341\030\270Vm\014@\000\034KF\234SI\265\227}\257>\000\034KFw\314\253\262\000\000\000\000\000\034KF\000\000\000\000\000\000\000\000\000\034KF\000\000\000\000\000\000\000\000\000\034KF\000\000\000\000\306\013\350@>\310JF*$\323\272\000\000\000\000>\310JF\000\000\000\000\232\231\231?\217\244JFG/4\272\303\365\250>\001\200JF\353\2668\272\n\327#=\366\247JF\321\nJ:\000\000\000\000\366\247JF\000\000\000\000\000\000\000\000\366\247JF\000\000\000\000\000\000\000\000\366\247JF\000\000\000\000\013`J:\354\247JF\377\261N\265b\020\330?\266\252JF\031\207a8\000\000\000\000\266\252JF\000\000\000\000\000\000\000\000\266\252JF\000\000\000\000\000\000\000\000\266\252JF\000\000\000\000\000\000\000\000\266\252JF\000\000\000\000;p\316=}\260JF\312\244\3518\000\000\000\000}\260JF\000\000\000\000\000\000\000\000}\260JF\000\000\000\000\020\360\373;\315\267JF0\271\0239\000\000\000\000\315\267JF\000\000\000\000\000\000\000\000\315\267JF\000\000\000\000\257e\216<\315\267JF\000\000\000\000\004\342\317>\265\365JFiZ\234:\n\327#=\354\367JF\235\31528 d\366=\233\363JF\1770\256\270\000\000\000\000\233\363JF\000\000\000\000\000\000\000\000\233\363JF\000\000\000\000\215\345\206<=\363JFq7\353\266jM\213?\366\357JF\251d\204\270\000\000\000\000\366\357JF\000\000\000\000gK\260<\366\357JF\000\000\000\000\000\000\000\000\366\357JF\000\000\000\000\000\000\000?\321\306JF\335\232O\272\031\301\357:\341\267JF\317\333\226\271\000\000\000\000\341\267JF\000\000\000\000n\377\305<\366\357JF\355\243\215:(\017\030>\000\360JF\377\261N5\000\000\000\000\000\360JF\000\000\000\000eS\236=\000\360JF\000\000\000\000\013`J:{\273JF/\201\204\272\000\000\000\000{\273JF\000\000\000\000QmO?\016\360JF\244\306\204:\000\000\000\000\016\360JF\000\000\000\000)\255\205:\327\357JF\210>\212\266\304\'\371<\341\357JF\377\261N5\217\302u=\341\357JF\000\000\000\200\3175\305?\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\260\017\2418\341\357JF\000\000\000\000\n\327\243<\327\357JF\377\261N\265\000\000\000\000\327\357JF\000\000\000\000\000\000\000\000\327\357JF\000\000\000\000\000\000\000\000\327\357JF\000\000\000\000\000\000\000\000\327\357JF\000\000\000\000\320\013\024?z\275JFY!~\272\000\000\000\000z\275JF\000\000\000\000p\252\373;\327\357JF\035c~:\265\221\263=\232\357JF\315\003\232\266\260\017!9\232\357JF\350R\226\263\000\000\000\000\232\357JF\000\000\000\000\000\000\000\000\232\357JF\000\000\000\000\000\000\000\000\232\357JF\000\000\000\000j\032\221@%\274JFQ\321\201\272\000\000\000\000%\274JF\000\000\000\000\000\000\000\000%\274JF\000\000\000\000\000\000\000\000%\274JF\000\000\000\000\000\000\000\000%\274JF\000\000\000\000\235\352\373;)\274JF\350R\2264\000\000\000\000)\274JF\000\000\000\000\315\314\314<\037\274JF\377\261N\265\000\000\000\000\037\274JF\000\000\000\000\000\000\000\000\037\274JF\000\000\000\000\000\000\000\000\037\274JF\000\000\000\000\000\000\000\000\037\274JF\000\000\000\000\n\327#<)\274JF\377\261N5\n\327#<)\274JF\000\000\000\000\000\000\000\000)\274JF\000\000\000\000\000\000\000\000)\274JF\000\000\000\000\241\210\355?)\274JF\000\000\000\000\n\327#<)\274JF\000\000\000\000\000\000\000\000)\274JF\000\000\000\000n\'\236@)\274JFY\331\0003\331\340\317<)\274JFY\331\000\263\n\327#<)\274JF\000\000\000\200\341z\224>)\274JF\000\000\000\200\213l\267?)\274JF\000\000\000\000\000\000\000\000)\274JF\000\000\000\000\010\235\034>)\274JF\000\000\000\000\000\000\000\000)\274JF\000\000\000\000\n\327\243<)\274JF\000\000\000\200\000\000\000\000)\274JF\000\000\000\000\000\000\000\000)\274JF\000\000\000\000\000\000\000\000)\274JF\000\000\000\000\000\000\000\000)\274JF\000\000\000\000g\362)>)\274JF\000\000\000\000\361\366\373;\037\274JF\377\261N\265\n\327\243=)\274JF\377\261N5\365\365\010>)\274JF\000\000\000\000\374\251q=)\274JF\000\000\000\000\000\000\000\000)\274JF\000\000\000\000\000\000\000\000)\274JF\000\000\000\000\300\212\036@)\274JF\000\000\000\200\000\000\000\000)\274JF\000\000\000\000\000\000\000\000)\274JF\000\000\000\000\000\000\000\000)\274JF\000\000\000\000R\240\260>)\274JF\000\000\000\200#J\'@\362\307JF\226\021n9\000\000\000\000\362\307JF\000\000\000\000\353*\312>&\357JF\361\367E:\000\000\000?\327\357JF\335\316_7\000\000\000\000\327\357JF\000\000\000\000\n\327#<\341\357JF\377\261N5\000\000\000\000\341\357JF\000\000\000\000\372\267\007@\341\357JF\000\000\000\000\324\277\274<\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\315\314L=\341\357JF\000\000\000\200\311\027\372=\341\357JF\000\000\000\000\372Q\214=\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\n\327\243<\341\357JF\000\000\000\2009\264\200?\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\315\357k>\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000G%1>\327\357JF\377\261N\265\000\000\000\000\327\357JF\000\000\000\000\000\000\000\000\327\357JF\000\000\000\000\000\000\000\000\327\357JF\000\000\000\000\000\000\000\000\327\357JF\000\000\000\000\000\000\000\000\327\357JF\000\000\000\000-\035\306>\341\357JF\377\261N5\000\000\000\000\341\357JF\000\000\000\000q\2525:\327\357JF\377\261N\265\000\000\000\000\327\357JF\000\000\000\000\021\321==\341\357JF\377\261N5\260\017\2418\341\357JF\000\000\000\000u\002:?\341\357JF\000\000\000\000j\223\035>\341\357JF\000\000\000\000\315\314\314=\341\357JF\000\000\000\000\273\234\257;\341\357JF\000\000\000\000\211J\035>\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\n\327#<\341\357JF\000\000\000\200\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\374\023\351=\341\357JFw\314+\262\000\000\000\000\341\357JF\000\000\000\000\315\357\353=\341\357JFw\314+2\000\000\000\000\341\357JF\000\000\000\000\365\271\"@\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\n\327#<\341\357JF\000\000\000\200\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\000\000\000\000\341\357JF\000\000\000\000\254Z\334?\344\357JF\006FA4E\252{<\000\360JF\037\361\0166\000\000\000\000\000\360JF\000\000\000\000\000\000\000\000\000\360JF\000\000\000\000\026\326\020=\000\360JF\000\000\000\200\230n2@\000\360JF\000\000\000\000\000\000\000\000\000\360JF\000\000\000\000\000\000\000\000\000\360JF\000\000\000\000\000\000\000\000\000\360JF\000\000\000\000\242\264\337?\235\020KF?\216$:\000\000\000\000\235\020KF\000\000\000\000\000\000\000\000\235\020KF\000\000\000\000E%\235<\000 KF\"3\2339\000\000\000\000\000 KF\000\000\000\000\000\000\000\000\000 KF\000\000\000\000\n\327#<\000 KF\000\000\000\000\000\000\000\000\000 KF\000\000\000\000\363\316[<\374\037KF\023n\246\264\372~\262?\000 KF\023n\2464\000\000\000\000\000 KF\000\000\000\000\000\000\000\000\000 KF\000\000\000\000\000\000\000\000\000 KF\000\000\000\000\000\000\000\000\000 KF\000\000\000\000\000\000\000\000\000 KF\000\000\000\000\000\000\000\000\000 KF\000\000\000\000\206\350\323>\376\037KFw\314+\2645\357\250?\003 KF\006F\3014\000\000\000\000\003 KF\000\000\000\000\000\000\000\000\003 KF\000\000\000\000UB\026@\n KF\032\002\0315\003J\314=\n KF\000\000\000\000\000\000\000\000\n KF\000\000\000\000\266n\373;\n KF\000\000\000\000;2\343?\n KF\000\000\000\200SJ\023@\342+KF\213\325n9\000\000\000\000\342+KF\000\000\000\000\000\000\000\000\342+KF\000\000\000\000\000\000\000\000\342+KF\000\000\000\000\000\000\000\000\342+KF\000\000\000\000\311;\210?\000,KF\034\247\0256\375\033\035=\000,KF\000\000\000\000\000\000\000\000\000,KF\000\000\000\000\375\321,>\000,KF\000\000\000\000\245\245\t?\000,KF\000\000\000\200K\352\020@\000,KF\000\000\000\000#\222\363?\000,KF\000\000\000\200\000\000\000\000\000,KF\000\000\000\000\363X3<\000,KF\000\000\000\000\000\000\000\000\000,KF\000\000\000\000\375b\304?\000,KF\000\000\000\000\000\000\000\000\000,KF\000\000\000\000\000\000\000\000\000,KF\000\000\000\000BI6@\000,KF\000\000\000\000\000\000\000\000\000,KF\000\000\000\000l\037S>\000,KF\000\000\000\200\000\000\000\000\000,KF\000\000\000\000\000\000\000\000\000,KF\000\000\000\000\357gB<\366+KF\377\261N\265\000\000\000\000\366+KF\000\000\000\000AD/@\000,KF\377\261N5C\267\262?\331BKF#K\3469\024\361W?\005KKF\033\253$9\356\307G>\000PKF\247\302\3108cT\230>\000PKF\000\000\000\000\227QK@\314\235KF\321\352\303:\000\000\000\000\314\235KF\000\000\000\000Z\212\375>\366\273KF\340\257\027:=\nW>\354\273KF8\365C\265\315\314\314=\354\273KFw\314+\263\000\000\000\000\354\273KF\000\000\000\000\000\000\000\000\354\273KF\000\000\000\000\000\000\000\000\354\273KF\000\000\000\000\000\000\000\000\354\273KF\000\000\000\000#9\256;\366\273KF\377\261N5X%D?\366\273KF\000\000\000\000\315\314L>\354\273KF\377\261N\265\000\000\000\000\354\273KF\000\000\000\000\000\000\000\000\354\273KF\000\000\000\000\000\000\000\000\354\273KF\000\000\000\000*hS?\354\273KF\000\000\000\200[\224\226@\366\273KF\377\261N5\000\000\000\000\366\273KF\000\000\000\000\212\216\024@\354\273KF\377\261N\265\000\000\000\000\354\273KF\000\000\000\000\315\314L>\354\273KF\000\000\000\200\307y\215?\366\273KF\377\261N5\250\323\255?\366\273KF\000\000\000\000\000\000\000\000\366\273KF\000\000\000\000\301\240\323?\370\273KFw\314+4\000\000\000\000\370\273KF\000\000\000\000\000\000\000\000\370\273KF\000\000\000\000\000\000\000\000\370\273KF\000\000\000\000\000\000\000\000\370\273KF\000\000\000\000\000\000\000\000\370\273KF\000\000\000\000.gW?C\302KF\225\025\3758\000\000\000\000C\302KF\000\000\000\000\232\031\300=\366\303KFL\206\0108\236W\264>\360\303KF$9\354\264\000\000\000\000\360\303KF\000\000\000\000{\005d=\366\303KF$9\3544\353\256\256>\366\303KF\000\000\000\000\202>~?\362\303KF\350R\226\264\000\000\000\000\362\303KF\000\000\000\000\027Q\254<\366\303KF\350R\2264\256Ga>\354\303KF\242\347;\265\000\000\000\000\354\303KF\000\000\000\000\'|\352?\366\303KF\242\347;5H\241}?\366\303KF\000\000\000\000\005\027&>\366\303KF\000\000\000\000\\\311\356<\354\303KF\377\261N\265\315\314L=\366\303KF\377\261N5\315\314L>\354\303KF\377\261N\265\000\000\000\000\354\303KF\000\000\000\000d\352\243=\366\303KF\377\261N5\n\327\243<\366\303KF\000\000\000\000\n\327\243<\366\303KF\000\000\000\000\000\000\000\000\366\303KF\000\000\000\000\n\327#<\366\303KF\000\000\000\000\312\374\275>\366\303KF\000\000\000\200\210d\313<\366\303KF\000\000\000\000\000\000\000\000\366\303KF\000\000\000\000\000\000\000\000\366\303KF\000\000\000\000\000\000\000\000\366\303KF\000\000\000\000(\350o=\366\303KF\000\000\000\000[+)@\347\326KF|bn\327#=\3667LF\260\017!\264\000\000\000\000\3667LF\000\000\000\000\246B\200@\0008LF\377\261N5\363m\346;\0008LF\000\000\000\000\000\000\000\000\0008LF\000\000\000\000\000\000\000\000\0008LF\000\000\000\000\000\000\000\000\0008LF\000\000\000\0007\355\331<\0008LF\000\000\000\000\367\277!@G\010LFMHo\272\305NC>n5LF\347\230b:\000\000\000\000n5LF\000\000\000\000\000\000\000\000n5LF\000\000\000\000\010\307\205=\341\347KF\245n\302\272\032\000q?\272\327KF\264A\242\271\000\000\000\000\272\327KF\000\000\000\000\000\000\000\000\272\327KF\000\000\000\000\306;J==\323KF\016@\264\270\315\314\314==\323KF\000\000\000\000M\206\355@=\323KF\000\000\000\000\000\000\000\000=\323KF\000\000\000\000\000\000\000\000=\323KF\000\000\000\0002\303\215<H\323KF\377\261N5\n\327#<H\323KF\000\000\000\200\000\000\000\000H\323KF\000\000\000\000\n\327#<H\323KF\000\000\000\000U\000\013@\007\340KFk\031\2009{\272\353>\000\350KFv# 9\000\000\000\000\000\350KF\000\000\000\000\352\254y<\000\350KF\000\000\000\000\000\000\000\000\000\350KF\000\000\000\000\337$\314=\000\350KF\000\000\000\200\000\000\000\000\000\350KF\000\000\000\000\315\314L>\366\347KF\377\261N\265\000\000\000\000\366\347KF\000\000\000\000\000\000\000\000\366\347KF\000\000\000\000\217\302\365=\000\350KF\377\261N5\000\000\000\000\000\350KF\000\000\000\000\000\000\000\000\000\350KF\000\000\000\000\000\000\000\000\000\350KF\000\000\000\000)\\\217=\000\350KF\000\000\000\000\n\327\243<\000\350KF\000\000\000\000\000\000\000\000\000\350KF\000\000\000\000\315\314L>\366\347KF\377\261N\265\331\203\022>\000\350KF\377\261N5C:\240>\000\350KF\000\000\000\000\301=K<\000\350KF\000\000\000\200\000\000\000\000\000\350KF\000\000\000\000\273\270\025@\000\350KF\000\000\000\200\nx\373#?\366\347KFj\244F\265\000\000\000\000\366\347KF\000\000\000\000\000\000\000\000\366\347KF\000\000\000\000\000\000\000\000\366\347KF\000\000\000\000fgr;\000\350KFj\244F5\000\000\000\000\000\350KF\000\000\000\000\000\000\000\000\000\350KF\000\000\000\000\000\000\000\000\000\350KF\000\000\000\000\000\000\000\000\000\350KF\000\000\000\000\000\000\000\000\000\350KF\000\000\000\000\250\351+=\000\350KF\000\000\000\000\000\000\000\000\000\350KF\000\000\000\000\000\000\000\000\000\350KF\000\000\000\000\343\332\260>\000\350KF\000\000\000\200\177j\354?B\360KF\316\337%9\232.z<\000$LF \347\201:\000\000\000\000\000$LF\000\000\000\000\000\000\000\000\000$LF\000\000\000\000\315\314L>\366#LF\377\261N\265\n\327#<\000$LF\377\261N5\n\327#<\000$LF\000\000\000\000\000\000\000\000\000$LF\000\000\000\000\000\000\000\000\000$LF\000\000\000\000\000\000\000\000\000$LF\000\000\000\000\352\314L=\213(LFsC\2668\362\352\234=\0008LF\224\021\2339\000\000\000\000\0008LF\000\000\000\000\000\000\000\000\0008LF\000\000\000\000\000\000\000\000\0008LF\000\000\000\000\315\314L>\3667LF\377\261N\265\000\000\000\000\3667LF\000\000\000\000\000\000\000\000\3667LF\000\000\000\000\371\300N>\3667LFw\314+2`\314\026;\3667LFw\314+\262\000\000\000\000\3667LF\000\000\000\000\000\000\000\000\3667LF\000\000\000\000\000\000\000\000\3667LF\000\000\000\000\000\000\000\000\3667LF\000\000\000\000~}a<\0008LF\377\261N5\260U,@8FLF\341\231\2169\362\352\234=\nLLF\274i\3518\000\000\000\000\nLLF\000\000\000\000\'0\006@\033OLF8\364u8b\232\367?\351WLF\260y09\000\000\000\000\351WLF\000\000\000\000\362\025\224<\354WLF\315\002L4[\222\350<\354WLF\000\000\000\000\000\000\000\000\354WLF\000\000\000\000\375>\\?\354WLF\000\000\000\000e5\034>\354WLF\000\000\000\000\024\025P=\354WLF\000\000\000\000\000\000\000\000\354WLF\000\000\000\000\000\000\000\000\354WLF\000\000\000\000\333o\355;\354WLF\000\000\000\000\351\230\230;\354WLF\000\000\000\000T\014\205<\354WLF\000\000\000\000\267g\376?\354WLF\000\000\000\000\016tq\26618r\214\240>AkLF\363\200\2529\315\314L>)}LF\237f\2639Kg\334>\272\203LF\334\205\0039\000\000\000\000\272\203LF\000\000\000\000\000\000\000\000\272\203LF\000\000\000\000\000\000\000\000\272\203LF\000\000\000\000\020\301$=\000\204LF\\}\2576\204\357\000@\000\204LF\000\000\000\000\315\314L>\366\203LF\315\002L\265\000\000\000\000\366\203LF\000\000\000\000\000\000\000\000\366\203LF\000\000\000\000\000\000\000\000\366\203LF\000\000\000\000\000\000\000\000\366\203LF\000\000\000\000\000\000\000\000\366\203LF\000\000\000\000\000\000\000\000\366\203LF\000\000\000\000\000\000\000\000\366\203LF\000\000\000\000\315\314L>\366\203LF\000\000\000\000\004c\365=\366\203LF\000\000\000\000\004\260\277:\000\204LF\315\002L5Fj\001@\000\204LF\000\000\000\000\000\000\000\000\000\204LF\000\000\000\000\000\000\000\000\000\204LF\000\000\000\000\000\000\000\000\000\204LF\000\000\000\000\311\244\027?\000\204LF\000\000\000\200\000\000\000\000\000\204LF\000\000\000\000\315\314L>\366\203LF\315\002L\265\254\247C?\000\204LF\315\002L5\000\000\000\000\000\204LF\000\000\000\000\315\314L>\366\203LF\315\002L\265\332(\364=\000\204LF\315\002L5\322\267\376=\000\204LF\000\000\000\000q;\215?\376\203LF\350R\026\264\340J;>\000\204LF\350R\0264\n\327#<\000\204LF\000\000\000\000\000\000\000\000\000\204LF\000\000\000\000\200\020I:\366\203LF\315\002L\265\372\004\001>\000\204LF\315\002L5\n\327\243=\366\203LF\315\002L\265K\366\035;\000\204LF\315\002L5\353\266\272<\000\204LF\000\000\000\200\354\300\361?\000\204LF\000\000\000\000\000\000\000\000\000\204LF\000\000\000\000\n\327#<\000\204LF\000\000\000\000%\312=;\000\204LF\000\000\000\200\000\000\000\000\000\204LF\000\000\000\000\000\000\000\000\000\204LF\000\000\000\000\000\000\000\000\000\204LF\000\000\000\000\000\000\000\000\000\204LF\000\000\000\000\000\000\000\000\000\204LF\000\000\000\000\000\000\000\000\000\204LF\000\000\000\000u74?\000\204LF\000\000\000\200\000\000\000\000\000\204LF\000\000\000\000\315\314L>\366\203LF\315\002L\265\000\000\000\000\366\203LF\000\000\000\000\000\000\000\000\366\203LF\000\000\000\000\000\000\000\000\366\203LF\000\000\000\000\000\000\000\000\366\203LF\000\000\000\000\315\314L>\366\203LF\000\000\000\000\'x\214=\000\204LF\315\002L5M\334I<\377\203LF$9\354\263\000\000\000\000\377\203LF\000\000\000\000E\301\001>\366\203LF\251{w\314+\265\000\000\000\000\367\203LF\000\000\000\000\000\000\000\000\367\203LF\000\000\000\000\000\000\000\000\367\203LF\000\000\000\000\000\000\000\000\367\203LF\000\000\000\000\000\000\000\000\367\203LF\000\000\000\000\000\000\000\000\367\203LF\000\000\000\000\000\000\000\000\367\203LF\000\000\000\000\rC\223=\000\204LFw\314+5\037\364\004@\000\204LF\000\000\000\200\220E\374>\000\204LF\000\000\000\000\000\000\000\000\000\204LF\000\000\000\000\000\000\000\000\000\204LF\000\000\000\000\020\013\007>\000\204LF\000\000\000\000\003\374\007?\374\203LFL\261\233\264\000\000\000\000\374\203LF\000\000\000\000\000\000\000\000\374\203LF\000\000\000\000\226\232T>\366\203LF\207\227\361\264\000\000\000\000\366\203LF\000\000\000\000\217\302\365<\000\204LFjnu\335\265\324\314L>.wLF\3174~\271:G\324<\256\200LF\253K>9`\203\221;\276kLF\262\255\321\271\000\000\000\000\276kLF\000\000\000\000\000\000\000\000\276kLF\000\000\000\000\000\000\000\000\276kLF\000\000\000\000\000\000\000\000\276kLF\000\000\000\000\000\000\000\000\276kLF\000\000\000\000\000\000\000\000\276kLF\000\000\000\000\206M\236?\334\177LFK\211\3119\\+]=\222\200LFt\201d7\000\000\000\000\222\200LF\000\000\000\000\n\327#<\327{LF\303\217\275\270\000\000\000\000\327{LF\000\000\000\000\353l\215>\203nLF~z\205\271\000\000\000\000\203nLF\000\000\000\000\325\t\370?\232{LF\324\033\2039\000\000\000\000\232{LF\000\000\000\000\000\000\000\000\232{LF\000\000\000\000\000\000\000\000\232{LF\000\000\000\000\000\000\000\000\232{LF\000\000\000\000\032\372\207?\217{LF\315\002L\265q=\212>BsLF\317E&\271\000\000\000\000BsLF\000\000\000\000 \206L=\341sLFP\372F7\000\000\000\000\341sLF\000\000\000\000\253\335\2378\232sLF&\204\263\266\000\000\000\000\232sLF\000\000\000\000\000\000\000\000\232sLF\000\000\000\000\335\007\241<6pLF\336\337\207\270\000\000\000\0006pLF\000\000\000\000\000\000\000\0006pLF\000\000\000\000\000\000\000\0006pLF\000\000\000\000\000\000\000\0006pLF\000\000\000\000\334\014\2739\354oLFp8\271\266\000\000\000\000\354oLF\000\000\000\000\n\327#<\366oLF\315\002L5\000\000\000\000\366oLF\000\000\000\000\223\251\006@\366oLF\000\000\000\000\235\321y<\366oLF\000\000\000\000\000\000\000\000\366oLF\000\000\000\000\000\000\000\000\366oLF\000\000\000\000\207\026\231>\354oLF\315\002L\265\000\000\000\000\354oLF\000\000\000\000\000\000\000\000\354oLF\000\000\000\000\000\000\000\000\354oLF\000\000\000\000\000\000\000\000\354oLF\000\000\000\000\000\000\000\000\354oLF\000\000\000\000\000\000\000\000\354oLF\000\000\000\000\000\000\000\000\354oLF\000\000\000\000\000\000\000\000\354oLF\000\000\000\000\000\000\000\000\354oLF\000\000\000\000\274\370\357<\354oLF\000\000\000\000\315\314L=\366oLF\315\002L5\000\000\000\000\366oLF\000\000\000\000\000\000\000\000\366oLF\000\000\000\000\000\000\000\000\366oLF\000\000\000\000\000\000\000\000\366oLF\000\000\000\000\n\327\243<\366oLF\000\000\000\000\363\037R=\354oLF\315\002L\265\310\337\343?\336qLF%2\0348\000\000\000\000\336qLF\000\000\000\000\000\000\000\000\336qLF\000\000\000\000\000\000\000\000\336qLF\000\000\000\000\000\000\000\000\336qLF\000\000\000\000\000\000\000\000\336qLF\000\000\000\000\000\000\000\000\336qLF\000\000\000\000\000\000\000\000\336qLF\000\000\000\000\000\000\000\000\336qLF\000\000\000\000\000\000\000\000\336qLF\000\000\000\000\000\000\000\000\336qLF\000\000\000\000\n\327#=\000\200LF\311\216\2159\000\000\000\000\000\200LF\000\000\000\000\000\000\000\000\000\200LF\000\000\000\000\000\000\000\000\000\200LF\000\000\000\000\000\000\000\000\000\200LF\000\000\000\000\347\232\220@\366\177LF\315\002L\265\277}i3\020;\000\200LF\315\002L5\000\000\000\000\000\200LF\000\000\000\000\000\000\000\000\000\200LF\000\000\000\000\000\000\000\000\000\200LF\000\000\000\000\000\000\200>\000\200LF\000\000\000\000\007\276y<\000\200LF\000\000\000\000\000\000\000\000\000\200LF\000\000\000\000\n\327#<\000\200LF\000\000\000\000\000\000\000\000\000\200LF\000\000\000\000\344\203\276>\000\200LF\000\000\000\000\000\000\000\000\000\200LF\000\000\000\000\000\000\000\000\000\200LF\000\000\000\000\n\327#=\000\200LF\000\000\000\000\000\000\000\000\000\200LF\000\000\000\000\214Fbo\022\203<\000\200LF\315\002L5\000\000\000\000\000\200LF\000\000\000\000\000\000\000\000\000\200LF\000\000\000\000\000\000\000\000\000\200LF\000\000\000\000\000\000\000\000\000\200LF\000\000\000\000\000\000\000\000\000\200LF\000\000\000\000\nyq\2506\300[\344?\345\203LF\247\002\2238\261\275\204?\000\204LF\357\346\0106\372\r[?\375\203LF!\226\213\264\000\000\000\000\375\203LF\000\000\000\000H\274V@\204\206LF\273\225J8\273\'\217?\345\241LF:\023\t:\3565\022@\366\253LF\217~I9\216\030\361?\366\253LF\000\000\000\200uJ\232>\366\253LF\000\000\000\000\000\000\000\000\366\253LF\000\000\000\000\3565\022@\366\253LF\000\000\000\000\000\000\000\000\366\253LF\000\000\000\000<\016\310>\371\253LF$9l4\300\230\202@x\271LF%\r\2079\017\241D@A\000MF\365\007\261:\200\020I:\366\327LF\333FI\272\000\000\000\000\366\327LF\000\000\000\000\315\314L=\213\022MF\000m\222:\354\330\242>\000\024MF%\336\3507\000\000\000\000\000\024MF\000\000\000\000\000\000\000\000\000\024MF\000\000\000\000\254\250B@\t1MF\343\371\020:\374\3702@ymMFe\317\226:\000\000\000\000ymMF\000\000\000\000#\206G?Q\177MFk\345\2619a\363\340>\004\214MF7\020}9(\017\263?\250\236MF\250\276\2719>\332\350>\000\240MFB)\3267\027\267\3218\366\237MF\315\002L\265\000\000\000\000\366\237MF\000\000\000\000\026D\031AU\242MFH\024=8\000\000\000\000U\242MF\000\000\000\000\242E6=\037\256MFb\311j9\315\314L>\037\256MF\000\000\000\200\214\220`=)\256MF\315\002L5\000\000\000\000)\256MF\000\000\000\000A\0357?&\256MF\\|a\264\000\000\000\000&\256MF\000\000\000\000\000\000\000\000&\256MF\000\000\000\000\000\000\000\000&\256MF\000\000\000\000\000\000\000\000&\256MF\000\000\000\000\000\000\000\000&\256MF\000\000\000\000\000\000\000\000&\256MF\000\000\000\000\000\000\000\000&\256MF\000\000\000\000\000\000\000?)\256MF\\|a4\353\017\007?)\256MF\000\000\000\000\000\000\000\000)\256MF\000\000\000\000\000\000\000\000)\256MF\000\000\000\000D\372\325?i\260MF3Y38\372\226%?\251\331MF\022[M:\000\000\000\000\251\331MF\000\000\000\000\000\000\000\000\251\331MF\000\000\000\000k=&@{\357MF\323\020\3319\000\000\000\000{\357MF\000\000\000\000\333\307\202?\n\360MFg\25527\n\327#=\n\360MF\000\000\000\000\000\000\000\000\n\360MF\000\000\000\000\000\000\000\000\n\360MF\000\000\000\000\000\000\000\000\n\360MF\000\000\000\000\000\000\000\000\n\360MF\000\000\000\000\000\000\000\000\n\360MF\000\000\000\000\000\000\000\000\n\360MF\000\000\000\000\364u\006@\n\360MF\000\000\000\200\034\353b=\000\360MF\315\002L\265\2627H<\010\360MF\023n&5\000\000\000\000\010\360MF\000\000\000\000$\334\236=\023\360MF\377\261N5\352x\314:\n\360MFE\035)\265\000\000\000\000\n\360MF\000\000\000\000\000\000\000\000\n\360MF\000\000\000\000\314\377\232=\024\360MF\315\002L5V\324\020@f(NF\334\004\214:`Yi>\322?NF\324\255\3509\n\327\243<\000@NF\302\177c6\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\364\375T<\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\n\327#<\000@NF\000\000\000\000\006\234\347;\366?NF\315\002L\265\000\000\000\000\366?NF\000\000\000\000\000\000\000\000\366?NF\000\000\000\000\372(6@\000@NF\315\002L5\000\000\000\000\000@NF\000\000\000\000\n\327#<\n@NF\315\002L5\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\n@NF\000\000\000\000D\301\232>KCNF\2364\2018\021\307\272=qDNFX3\2667\000\000\000\000qDNF\000\000\000\000\250e>>{DNF\315\002L5;\030\215>{DNF\000\000\000\000,>\035=\034JNF-\231\3378`\345P={QNF+T\0229\253\304\010@\365\202NF7\216u:\003c;?\303\212NF \315\0329\362Ew;\303\212NF\000\000\000\000\000\000\000\000\303\212NF\000\000\000\000\225<\211=\303\212NF\000\000\000\000wl\220\213?\273\212NF?\21164\211K\365=\303\212NFL\261\0335\000\000\000\000\303\212NF\000\000\000\000\000\000\000\000\303\212NF\000\000\000\000\000\000\000\000\303\212NF\000\000\000\000q\262%?\236\213NF\";\2107\372\325\367;\000\214NFn\355\3616pDw<\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\250\215I<\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\346\367\353>\000\214NF\000\000\000\200\000\000\000\000\000\214NF\000\000\000\000\345\362\227?\000\214NF\000\000\000\000\n\327#<\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000G@\2368\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\230p\306=\000\214NF\000\000\000\200\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\347[X=\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000ts\271<\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000.\320g=\000\214NF\000\000\000\000k\303E?\366\213NF\315\002L\265\000\000\000\000\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000\362r}<\000\214NF\315\002L5iPh@\375\213NF$9l\264\000\000\000\000\375\213NF\000\000\000\000\000\000\000\000\375\213NF\000\000\000\000\000\000\000\000\375\213NF\000\000\000\000\000\000\000\000\375\213NF\000\000\000\000\000\000\000\000\375\213NF\000\000\000\000\000\000\000\000\375\213NF\000\000\000\000\211\301\201?\366\213NFSE\016\265\000\000\000\000\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000\232\260\222?\366\213NFw\314+\262\000\000\000\000\366\213NF\000\000\000\000\310\212\032=\000\214NF\315\002L5\000\000\000\000\000\214NF\000\000\000\000\315\314L=\366\213NF\315\002L\265\000\000\000\000\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000pDw;\000\214NF\315\002L5\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\335\372\237=\000\214NF\000\000\000\000e\270\334?\000\214NF\000\000\000\200\000\000\000\000\000\214NF\000\000\000\000Ts9<\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\315\314L>\366\213NF\315\002L\265\000\000\000\000\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000\210o\270;\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000ly\234?\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000\315\2630=\366\213NF\000\000\000\000\270\305\252=\376\213NFL\261\0335\341z\224>\000\214NF\006FA4\346?t?\366\213NF\315\002L\265\r\330\243=\366\213NF\000\000\000\000)\\\217=\000\214NF\315\002L5\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\312\212\032>\000\214NF\000\000\000\000pDw<\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000Y\320\305:\000\214NF\000\000\000\000\'P\217@\000\214NF\000\000\000\000\037K\276<\366\213NF\315\002L\265\n\327#<\000\214NF\315\002L5\n\327#<\000\214NF\000\000\000\000\315\314L=\000\214NF\000\000\000\000\n\327#<\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000pDw;\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\206\333\312:\000\214NF\000\000\000\000\364\375\254?\000\214NF\000\000\000\200\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\n\327#<\000\214NF\000\000\000\000\\Svt\023<\366\213NF\000\000\000\000\215\005*<\000\214NF\315\002L5\021\307\332?\000\214NF\000\000\000\200\000\000\000\000\000\214NF\000\000\000\000Ysc\264\234>\000\214NF\315\002L5\000\000\000\000\000\214NF\000\000\000\000$9\3543\366\213NF\315\002L\265,\205\033;\000\214NF\315\002L5\352\225R?\366\213NF\315\002L\265\n\327#<\000\214NF\315\002L5\000\000\000\000\000\214NF\000\000\000\000\315\314L=\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\n`@\366\213NF\000\000\000\000\2412\016?\000\214NF\315\002L5V\370\340=\000\214NF\000\000\000\200\000\000\000\000\000\214NF\000\000\000\000\n\327\243<\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000V\016-?\366\213NF8\365C\265\234\312\325>\366\213NFw\314\253\262\315\314L>\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000\n\327#=\366\213NF\000\000\000\000\"uv>\000\214NF\315\002L5\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\000\000\000\000\000\214NF\000\000\000\000\232\231\231>\366\213NF\315\002L\265[\261\027@\000\214NF\315\002L5sD\202>\366\213NF\315\002L\265\000\000\000\000\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000\000\000\000\000\366\213NF\000\000\000\000\n\327\243<\000\214NF\315\002L5gMPA\214}NFdL\217\271\211\026&AB4NF\342\272\265\272\346\204\214?\371\007NF\364\350[\272\000\000\000\000\371\007NF\000\000\000\000\031\375\207?\003!NF5\351\3709`\370\020?\215\354MF\321O\202\272\n\327#<R?NF%\313\315:\375\305\344?\376\314MF`\350\r\273m%\255=\244\006NF\230k\217:\000\000\000\000\244\006NF\000\000\000\000\000\000\000\000\244\006NF\000\000\000\000\361\316\026@\376\"NFb\354\014:Q\251A>\357\007NFmm\006\272\000\000\000\000\357\007NF\000\000\000\000\000\000\000\000\357\007NF\000\000\000\0004\220\233@\334\257MF\333\334\332\272\016X\210<\305\003NFS\335\320:\000\000\000\000\305\003NF\000\000\000\000\027\331\316?s\020NF\255&|9\000\000\000\000s\020NF\000\000\000\000\000\000\000\000s\020NF\000\000\000\000\000\000\000\000s\020NF\000\000\000\000\027\331N>\366\003NF&Hx\271+h\314=\000\004NF\315\002L5\000\000\000\000\000\004NF\000\000\000\000\317\360\032=\000\004NF\000\000\000\000\000\000\000\000\000\004NF\000\000\000\000I\246\2368\000\004NF\000\000\000\000\000\000\000\000\000\004NF\000\000\000\000\212R\3069\000\004NF\000\000\000\000\000\000\000\000\000\004NF\000\000\000\000\000\000\000\000\000\004NF\000\000\000\000\000\000\000\000\000\004NF\000\000\000\000i|\320>\371\003NFSE\016\265\000\000\000\000\371\003NF\000\000\000\000\tJxn\234?\273\026NFf/\2729\004\031\035?\000\030NF\342\024\3127\033+\274>\000\030NF\000\000\000\200\255~\234>\366\027NF\315\002L\265\000\000\000\000\366\027NF\000\000\000\000\000\000\000\000\366\027NF\000\000\000\000\n\327\243<\303\026NF\307\301\276\267\302\027\346?\373\026NF\240C\2156X\177^?\332?NF\345\023K:\000\000\000\000\332?NF\000\000\000\000\000\000\000\000\332?NF\000\000\000\000\213\275\354>\203#NF\257\264\014\272\334\264\007>\377?NF\253|\r:\327\271\014<\000DNF\251\021\2378\304\222\005=\000DNF\000\000\000\000\000\000\000\000\000DNF\000\000\000\000\000\000\000\000\000DNF\000\000\000\000d\312O?\000DNF\000\000\000\000Z\021L?LONF\266O`9\000\000\000\000LONF\000\000\000\000\000\000\000\000LONF\000\000\000\000\000\000\000\000LONF\000\000\000\000\000\000\000\000LONF\000\000\000\000)\\\217=\256jNFF\353\007:\200\327#<\noNF8\t\2558\000\000\000\000\noNF\000\000\000\000\000\000\000\000\noNF\000\000\000\000\000\000\000\000\noNF\000\000\000\000\314\211 >\000|NF7\222\2009#l\207?\000|NF\000\000\000\200\000\000\000\000\000|NF\000\000\000\000\000\000\000\000\000|NF\000\000\000\000\353\377\t@\000\204NF\006\261\0369\202\270\331@|\216NFb\351O9\000\000\000\000|\216NF\000\000\000\000\000\000\000\000|\216NF\000\000\000\000\000\000\000\000|\216NF\000\000\000\000\000\000\000\000|\216NF\000\000\000\000\000\000\000\000|\216NF\000\000\000\000\000\000\000\000|\216NF\000\000\000\000\000\000\000\000|\216NF\000\000\000\000\347\204\005?\000\220NFN\253\3607\312\273\225?\367\217NF\251{.\265N\254\247?\001\220NFp895\000\000\000\000\001\220NF\000\000\000\000\360\177\316<\354\223NFf[\2338\000\000\000\000\354\223NF\000\000\000\000\000\000\000\000\354\223NF\000\000\000\000\000\000\000\000\354\223NF\000\000\000\000\000\000\000\000\354\223NF\000\000\000\000\r\340\235?\234\233NFvn\0309+(w<\244\243NF\234<\0379]\341M=\244\243NF\000\000\000\000\000\000\000\000\244\243NF\000\000\000\000\nw<\244\243NF\315\002L5*:R?\244\243NF\000\000\000\000#}\200<\244\243NF\000\000\000\000\000\000\000\000\244\243NF\000\000\000\000\221i=@\242\243NF\260\017!\264\303\257\241@\363\243NFh\377\3116\000\000\000\000\363\243NF\000\000\000\000\267j\360;\366\243NF\006FA4\256G\341=\000\244NF\315\002L5\n\327\243<\000\244NF\000\000\000\000\n\327#<\000\244NF\000\000\000\000\264\360\314:\000\244NF\000\000\000\000\000\000\000\000\000\244NF\000\000\000\000@\325\322?\000\244NF\000\000\000\000\000\000\000\000\000\244NF\000\000\000\000\000\000\000\000\000\244NF\000\000\000\000\000\000\000\000\000\244NF\000\000\000\000\n\327#<\000\244NF\000\000\000\200\000\000\000\000\000\244NF\000\000\000\000\000\000\000\000\000\244NF\000\000\000\000\333\207\264=\376\243NFw\314+\264]\005C?\000\244NFw\314+4z\323\000<\366\243NF\315\002L\265sZ\r@\000\244NF\377\261N5\000\000\000\000\000\244NF\000\000\000\000ct\032=\366\251NF\340C\3548\003\353\376? \270NF$b\2149\000\000\000\000 \270NF\000\000\000\000A\217\305:\366\317NF\373 \3549\2502\246=\266\324NF\210=\2748\230\312\257?\004\341NF\372\242s9\000\000\000\000\004\341NF\000\000\000\000)\\\217=\000\360NF\220W\2249\000\000\000\000\000\360NF\000\000\000\000)t`g>\000\360NF\000\000\000\200\375\272\256=\000\360NF\000\000\000\000\301A\'@H\360NF\215,\2626\217\026\003?\000\372NF\332a@9w\037\226<\000\000OF\345u\3558\000\000\000\000\000\000OF\000\000\000\000\000\000\000\000\000\000OF\000\000\000\000\217\302\365<\000\000OF\000\000\000\000\000\000\000\000\000\000OF\000\000\000\000\000\000\000\000\000\000OF\000\000\000\000\246\254lAG\006OF\\h\3708\230\004\032?\367?OFV\254\216:\000\000\000\000\367?OF\000\000\000\000B\377\035=\354JOF\336\177X9\000\000\000\000\354JOF\000\000\000\0003\345/=\354JOF\000\000\000\000\240\326\226@\210SOF\005\'*9\000\000\000\000\210SOF\000\000\000\000\000\000\000\000\210SOF\000\000\000\000\000\000\000\000\210SOF\000\000\000\000\000\000\000\000\210SOF\000\000\000\000\357D\275:\000XOF\210\224\2608\000\000\000\000\000XOF\000\000\000\000\'\240\t?\000XOF\000\000\000\000K\350\323>\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000Q\002\241>\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000\3117\246=\377WOFY\331\200\263\000\000\000\000\377WOF\000\000\000\000\n\327\243<\000XOFY\331\2003pp\223<\000XOF\000\000\000\000+Q\366;\000XOF\000\000\000\000+Qv<\000XOF\000\000\000\000\315\314L=\000XOF\000\000\000\000\365;y?\373WOF1a\321\264\000\000\000\000\373WOF\000\000\000\000\354\345\360<\000XOF1a\3214\013B\025?\000XOF\000\000\000\000\022\024/?\000XOF\000\000\000\000+Qv<\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000\266\245+=\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000\n\327#<\000XOF\000\000\000\200\000\000\000\000\000XOF\000\000\000\000\216\016\231=\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000{\024.>\000XOF\000\000\000\000\013\264=<\000XOF\000\000\000\200\256Ga>\000XOF\000\000\000\000\353lw\314+2\273e%=\000XOF\234SI5)\\\217=\000XOF\000\000\000\200\000\000\000\000\000XOF\000\000\000\000u*z?\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000\210\2003>\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000T\302\036@\000XOF\000\000\000\200\227\377(@\341gOF\223\330\2349\000\000\000\000\341gOF\000\000\000\000\315\314L=\364kOF\000\332\2408\000\000\000\000\364kOF\000\000\000\000\000\000\000\000\364kOF\000\000\000\000)\\\217=\000lOF\207\227q5\000\000\000\000\000lOF\000\000\000\000\000\000\000\000\000lOF\000\000\000\000\000\000\000\000\000lOF\000\000\000\000\315\314L=\000lOF\000\000\000\000\000\000\000\000\000lOF\000\000\000\000a\001\337=\000lOF\000\000\000\000\223pW?\237mOF@\332\3777\n\327\243<\000oOF\032\005\3327\2071\177?\374\216OF\377\342\035:\000\000\000\000\374\216OF\000\000\000\000\000\000\000\000\374\216OF\000\000\000\000\372\355k:\232\231OFg\201Q9\207@b=\232\231OF\000\000\000\000\n\327#<\232\231OF\000\000\000\200\000\000\000\000\232\231OF\000\000\000\000\000\000\000\000\232\231OF\000\000\000\000\272ID@\007\276OFq\2603:\000\000\000\000\007\276OF\000\000\000\000\000\000\000\000\007\276OF\000\000\000\000\000\000\000\000\007\276OF\000\000\000\000.v\320>\327\313OF\000\'\2109\232\231\231>\315\313OF\234SI\265\000\000\000\000\315\313OF\000\000\000\000\000\000\000\000\315\313OF\000\000\000\000\000\000\000\000\315\313OF\000\000\000\000\000\000\000\000\315\313OF\000\000\000\000\000\000\000\000\315\313OF\000\000\000\000\000\000\000\000\315\313OF\000\000\000\000\000\000\000\000\315\313OF\000\000\000\000\000\000\000\000\315\313OF\000\000\000\000ak\346=\327\313OF\234SI5\212\331\255>\315\313OF\234SI\265\000\000\000\000\315\313OF\000\000\000\000#\010\341>\327\313OF\234SI5\000\000\000\000\327\313OF\000\000\000\000\000\000\000\000\327\313OF\000\000\000\000\000\000\000\000\327\313OF\000\000\000\000\000\000\000\000\327\313OF\000\000\000\000\000\000\000\000\327\313OF\000\000\000\000\336\307u=\327\313OF\000\000\000\000\000\000\000\000\327\313OF\000\000\000\000\000n\234<\327\313OF\000\000\000\000\000\000\000\000\327\313OF\000\000\000\000\000\000\200?\315\313OF\234SI\265\000\000\000\000\315\313OF\000\000\000\000\n\327#<\327\313OF\234SI5y\222\225>\315\313OF\234SI\265\000\000\000\000\315\313OF\000\000\000\000\000\000\000\000\315\313OF\000\000\000\000\000\000\000\000\315\313OF\000\000\000\000\335bb;>\327\313OF\000\000\000\000\n\327#<\327\313OF\000\000\000\000\000\000\000\000\327\313OF\000\000\000\000\20434<\326\313OF\350R\226\263\n\327#=\327\313OF\350R\2263\n\327\243<\327\313OF\000\000\000\000\000\000\000\000\327\313OF\000\000\000\000\274\2268@\327\313OF\000\000\000\000\000\000\000\000\327\313OF\000\000\000\000\n\327#<\327\313OF\000\000\000\200\n\327#=\327\313OF\000\000\000\000\000\000\000\000\327\313OF\000\000\000\000\000\000\000\000\327\313OF\000\000\000\000\000\000\000\000\327\313OF\000\000\000\000\000\000\000\000\327\313OF\000\000\000\000\367%6A\022\314OF7\366\2216\n\327#<\n\315OF\255\301\2307\320T8<\n\315OF\000\000\000\000\n\327#<\n\315OF\000\000\000\000.\344/=\n\315OF\000\000\000\000\n\327#<\n\315OF\000\000\000\000\000\000\000\000\n\315OF\000\000\000\000\000\000\000\000\n\315OF\000\000\000\000\000\000\000\000\n\315OF\000\000\000\000\n\327#=\n\315OF\000\000\000\000a\026\366>\n\315OF\000\000\000\000\260\003\327?\n\315OF\000\000\000\000\000\000\300?\000\315OF\234SI\2652\231\346@F\317OF\375838\207\024\256=\000\320OF4Xe7a\024\357>\000\320OF\000\000\000\000*\013bA\325\353OF\001$\t:\010<\376=7\023PF1\367A:\000\000\000\0007\023PF\000\000\000\000\000\000\000\0007\023PF\000\000\000\000\000\000\000\0007\023PF\000\000\000\000\244p\375=\327\037PF4\203x9\000\000\000\000\327\037PF\000\000\000\000\177\013\270<\327\037PF\000\000\000\000\315\314L=\327\037PF\000\000\000\200b\016f>\327\037PF\000\000\000\000v@\273?ZHPF\216QG:l\265\003?\372gPF\231y\033:\000\000\000\000\372gPF\000\000\000\000\000\000\000\000\372gPF\000\000\000\000\242\036\240Ac\204PF$\230\013:s\332\323=_\223PF\3702\2239\000\000\000\000_\223PF\000\000\000\000\256o\214=\354\223PF]\",7\000\000\000\000\354\223PF\000\000\000\000\201\214\240=\354\223PF\000\000\000\000\000\000\000\000\354\223PF\000\000\000\000\000\000\000\000\354\223PF\000\000\000\000\n\327#<\354\223PF\000\000\000\200\000\000\000\000\354\223PF\000\000\000\000\000\000\000\000\354\223PF\000\000\000\000\003\335\332>\354\223PF\000\000\000\000\000\000\000\000\354\223PF\000\000\000\000\000\000\000\000\354\223PF\000\000\000\000\000\000\000\000\354\223PF\000\000\000\000\000\000\000\000\354\223PF\000\000\000\000z7Q?\354\223PF\000\000\000\200\000\000\000\000\354\223PF\000\000\000\000\000\000\000\000\354\223PF\000\000\000\000\0007\336=\354\223PF\000\000\000\000\000\000\000\000\354\223PF\000\000\000\000\000\000\000\000\354\223PF\000\000\000\000\376\017n>\365\223PF\333*15\000\000\000\000\365\223PF\000\000\000\000\352>\250?x\227PF\000\356\2118\000\030\203A\343\220PF\2364\001\271\000\000\000\000\343\220PF\000\000\000\000\000\000\000\000\343\220PF\000\000\000\000\222\006\031=\000\230PFI\256\0139\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\n\327#=\000\224PF\000\031\235\270\210\366\257?\366\223PF\234SI\26593#=\315vPF{\'\017\272hr\243=\315vPFw\314\253\262d\227\203;\315vPF\000\000\000\000\000\000\000\000\315vPF\000\000\000\000\000\000\000\000\315vPF\000\000\000\000;\001\253?\327vPF\234SI5\346f\346=\315vPF\234SI\265$9\3543\000|PF\264X\3148__k?\000|PF\000\000\000\000\263\005>?\325vPF\327\013\313\270\000\000\000\000\325vPF\000\000\000\000\315\314L=\327vPF\350R\0264\000\000\000\000\327vPF\000\000\000\000\000\000\000\000\327vPF\000\000\000\000\363\216\203?\327vPF\000\000\000\000 \3014=\315vPF\234SI\265\000\000\000\000\315vPF\000\000\000\000\000\000\000\000\315vPF\000\000\000\000\000\000\200?\315vPF\000\000\000\200\000\000\000\000\315vPF\000\000\000\000\352\036\031>\327vPF\234SI5:\376t<\327vPF\000\000\000\200G\376\303:\327vPF\000\000\000\200\000\000\000\000\327vPF\000\000\000\000\n\327#=\327vPF\000\000\000\000\000\000\000\000\327vPF\000\000\000\000\000\000\000\000\327vPF\000\000\000\000x\310\2348\327vPF\000\000\000\200\000\000\000\000\327vPF\000\000\000\000G\024s@\327vPF\000\000\000\200\264\302D>\327vPF\000\000\000\000\n\327#<\315vPF\234SI\265\031\376t;\327vPF\234SI5\000\000\000\000\327vPF\000\000\000\000\000\000\200>\315vPF\234SI\265t,\000?\347\221PF\345\037\005:Z5Q=\366\227PF\276\366\3558\343\245\363?\306\247PF\216@\2339\000\000\000\000\306\247PF\000\000\000\000\000\000\000\000\306\247PF\000\000\000\000\000\000\000\000\306\247PF\000\000\000\000\000\000\000\000\306\247PF\000\000\000\000\000\000\000\000\306\247PF\000\000\000\0001\353\305:\024\231PFE7\220\271\000\000\000\000\024\231PF\000\000\000\000\000\000\000\000\024\231PF\000\000\000\000\000\326t`\267\000\000\000\000;\302PF\000\000\000\000\000\000\000\000;\302PF\000\000\000\000P\215\027=\000\300PF\202\374.\270\365<\341=\000\300PF\000\000\000\000\000\000\000\000\000\300PF\000\000\000\000l\037S>\024\231PF\267\352>\2726!#>\024\231PF\000\000\000\000\324+\335?\024\231PF\000\000\000\000\246\343\245@I\226PFb\222[\270\230#\026;\000\226PFZ\330\262\266\000\000\000\000\000\226PF\000\000\000\000\001y?>\000\226PF\000\000\000\000(\342\230>\000\226PF\000\000\000\000\000\000\000\000\000\226PF\000\000\000\000\000\000\000\000\000\226PF\000\000\000\000\246\t\253=\234\217PF\024\002\373\270\000\000\000\000\234\217PF\000\000\000\000(~\014?\305mPFE&&\272\360\376?>\225BPF\347+T\272\336!E:\0004PF<g\217\271\000\000\000\000\0004PF\000\000\000\000\364\375\324=\313APF\326\250\2079\000\000\000\000\313APF\000\000\000\000\037-V?\0014PF\273\230\207\271\000\000\000\000\0014PF\000\000\000\000\000\000\000\000\0014PF\000\000\000\000\000\000\000\000\0014PF\000\000\000\000\000\000\000\000\0014PF\000\000\000\000\000\000\000\000\0014PF\000\000\000\000\000\000\000\000\0014PF\000\000\000\000\263L\177?\0004PF\225\277V\263\r\244??\n4PF\234SI5\000\000\000\000\n4PF\000\000\000\000\000\000\000\000\n4PF\000\000\000\000\n\327\243<\n4PF\000\000\000\200\000\000\000\000\n4PF\000\000\000\000\000\000\000\000\n4PF\000\000\000\000\n\327\243<\n4PF\000\000\000\000\000\000\000\000\n4PF\000\000\000\000\333-l?\n4PF\000\000\000\200\000\000\000\000\n4PF\000\000\000\000*\000\037>\0004PF\234SI\265TV\202?\0004PF\000\000\000\000\000\000\000\000\0004PF\000\000\000\000\245\250t>\n4PF\234SI5\033*v?\0004PF\234SI\265\250T*9\n4PF\234SI5\000\000\000\000\n4PF\000\000\000\000\000\000\000\000\n4PF\000\000\000\000\000\000\000\000\n4PF\000\000\000\000\000\000\000\000\n4PF\000\000\000\000\222\020>=\n4PF\000\000\000\200\000\000\000\000\n4PF\000\000\000\000\000\000\000\000\n4PF\000\000\000\000\000\000\000\000\n4PF\000\000\000\000\000\000\000\000\n4PF\000\000\000\000\000\000\000\000\n4PF\000\000\000\000\020z\206?\n4PF\000\000\000\000\000\000\000\000\n4PF\000\000\000\000\007o]?\0004PF\234SI\265f\361\014A\2572PF\3312\317\267)\\\217=\n/PF\177\\\217\270\000\000\000\000\n/PF\000\000\000\000\000\000\000\000\n/PF\000\000\000\000\n\327#=\n/PF\000\000\000\000\000\000\000\000\n/PF\000\000\000\000\000\000\000\000\n/PF\000\000\000\000\000\000\000\000\n/PF\000\000\000\000\000\000\000\000\n/PF\000\000\000\000\000\000\000\000\n/PF\000\000\000\000\000\000\000\000\n/PF\000\000\000\000\000\000\000\000\n/PF\000\000\000\000\217\302\365<\000/PF\234SI\265\000\000\000\000\000/PF\000\000\000\000\000\000\000\000\000/PF\000\000\000\000\000\000\000\000\000/PF\000\000\000\000\000\000\000\000\000/PF\000\000\000\000\000\000\000\000\000/PF\000\000\000\000\000\000\000\000\000/PF\000\000\000\000\000\000\000\000\000/PF\000\000\000\000aT\222>\000/PF\000\000\000\000\000\000\000\000\000/PF\000\000\000\000\033\306\277>\000/PF\000\000\000\000\000\000\000\000\000/PF\000\000\000\000\271S\231<\n/PF\234SI5\000\000\000\000\n/PF\000\000\000\000\000\000\000\000\n/PF\000\000\000\000X94<\000/PF\234SI\265\000\000\000\000\000/PF\000\000\000\000\000\000\000\000\000/PF\000\000\000\000\000\000\000\000\000/PF\000\000\000\000\000\000\000\000\000/PF\000\000\000\000}R\365:\n/PF\234SI5\272\036<?\361.PF\035\245\371\265\000\000\000\000\361.PF\000\000\000\000\n\327\243=\315.PF\247\3261\266\000\000\000\000\315.PF\000\000\000\000\000\000\000\000\315.PF\000\000\000\000\000\000\000\000\315.PF\000\000\000\000\000\000\000\000\315.PF\000\000\000\000\000\000\000?\341\017PF\350\031\030\272a\026\366>\005\370OF\316\326\352\271\216\260\255Ac\304OF*8~\272\326\237\315=\341\270OFa\341b\271\340u{?]kOF\367\020\277\272\000\000\000\000]kOF\000\000\000\000\252\267<@\014\257OF(\022\247:\222$\032@PrOF\216\270\225\272m\250\331>\202\256OFE\220\224:\t\356S@4fOF\257@\262\272\333\210B>\234kOF\357\222\3258\000\000\000\000\234kOF\000\000\000\000\000\000\000\000\234kOF\000\000\000\000\010\020S;\217dOF-8\013\271\000\000\000\000\217dOF\000\000\000\000\036+/@\211dOF$9\354\264\000\000\000\000\211dOF\000\000\000\000\000\000\000\000\211dOF\000\000\000\000\000\000\000\000\211dOF\000\000\000\000\000\000\000\000\211dOF\000\000\000\000\000\000\000\000\211dOF\000\000\000\000\235\230N>\232dOF\260\017\2415\000\000\000\000\232dOF\000\000\000\000\000\000\000\000\232dOF\000\000\000\000\000\000\000\000\232dOF\000\000\000\000\000\000\000\000\232dOF\000\000\000\000\000\000\000\000\232dOF\000\000\000\000[\323<=\232dOF\000\000\000\200\000\000\000\000\232dOF\000\000\000\000\000\000\000\000\232dOF\000\000\000\000A\202\302>\232dOF\000\000\000\000\000\000\000\000\232dOF\000\000\000\000\212\321\347>\244dOF\234SI5\000\000\000\000\244dOF\000\000\000\000\000\000\000\000\244dOF\000\000\000\000\000\000\000\000\244dOF\000\000\000\000\n\327#<\232dOF\234SI\265\000\000\000\000\232dOF\000\000\000\000\000\000\000\000\232dOF\000\000\000\000\206\267\244@\n\352NF\007I\027\273(\316\271<W\023OFteL:\305\346\240@\315\235NFsO\021\273\n\327#<{\006OF\363\262\001;.\315g?J\274NF\204|\267\272\000\000\000\000J\274NF\000\000\000\000\000\000\000\000J\274NF\000\000\000\000\315\314L>\354\237NF\006\203\014\272\357\r:>\354\237NF\000\000\000\000p\377P?\271\211NFq\000\334\271\366\362\263@\376YNF\333\245l\272\000\000\000\000\376YNF\000\000\000\000\322\000\246?)\245NF\362\201\272:\000\000\000\000)\245NF\000\000\000\000\332\003\323>\226UNF?)\305\272\230w\025>\341\202NF.\311`:\000\000\000\000\341\202NF\000\000\000\000\256G\341=\232,NF)\350\325\272%\207\021>\315\202NF\300\016\326:\n\327\243<\315\202NF\000\000\000\000\000\000\000\000\315\202NF\000\000\000\000B\375z>j[NF\033LC\272\000\000\000\000j[NF\000\000\000\000\000\000\000\000j[NF\000\000\000\000\000\000\000\000j[NF\000\000\000\000\240\321\330=qUNF\343\017\355\270\000\000\000\000qUNF\000\000\000\000\000\000\000\000qUNF\000\000\000\000\235\362\354;k^NF/\'29\320fp?\027TNFe\364L\271\000\000\000\000\027TNF\000\000\000\000\000\000\000\000\027TNF\000\000\000\000\004j\r>tZNF\274\224\3748\000\000\200?\nTNFd\215\376\27026\327>\nTNF\000\000\000\000\203\300\212>\354wNFa\0222:\000\000\000\000\354wNF\000\000\000\000V}\326?\315wNFNV\030\266\000\000\000\000\315wNF\000\000\000\000\032\371e?\nTNF,[1\272/x\347=\256wNF\t\3410:\000\000\000\000\256wNF\000\000\000\000\000\000\000\000\256wNF\000\000\000\000\2148\262<\037TNF\200]0\272\000\000\000\000\037TNF\000\000\000\000\000\000\000\000\037TNF\000\000\000\000\000\000\000\000\037TNF\000\000\000\000\342(\002=\013TNF\003\374\307\265\000\000\000\000\013TNF\000\000\000\000)\\\217=\024TNF8\365C5\000\000\000\000\024TNF\000\000\000\000\000\000\000\000\024TNF\000\000\000\000\000\000\000\000\024TNF\000\000\000\000\204\007G=\024TNF\000\000\000\000\270{\322=\nTNF\315\002L\265\000\000\000\000\nv\264\000\000\000\000\021TNF\000\000\000\000\000\000\000\000\021TNF\000\000\000\000\000\000\000\000\021TNF\000\000\000\000\000\000\000\000\021TNF\000\000\000\000\000\000\000\000\021TNF\000\000\000\000\000\000\000\000\021TNF\000\000\000\000\212\216\030@\024TNF\353\365v4\000\000\000\000\024TNF\000\000\000\000\000\000\000\000\024TNF\000\000\000\000\000\000\000\000\024TNF\000\000\000\000\000\000\000\000\024TNF\000\000\000\000\000\000\000\000\024TNF\000\000\000\000\000\000\000\000\024TNF\000\000\000\000\000\000\000\000\024TNF\000\000\000\000\000\000\000\000\024TNF\000\000\000\000\000\000\000\000\024TNF\000\000\000\000\000\000\200?\nTNF\315\002L\265\000\000\000\000\nTNF\000\000\000\000\000\000\000\000\nTNF\000\000\000\000=\212\224?\014TNF\225\277\3263\000\000\000\000\014TNF\000\000\000\000\000\000\000\000\014TNF\000\000\000\000\000\000\000\000\014TNF\000\000\000\000\255i.@\024TNF\251{.5\000\000\000\000\024TNF\000\000\000\000\000\000\000\000\024TNF\000\000\000\000\000\000\000\000\024TNF\000\000\000\000\"\330\253?\024TNF\000\000\000\200\000\000\000\000\024TNF\000\000\000\000\000\000\000\000\024TNF\000\000\000\000v\207w<\024TNF\000\000\000\000w3|?\021TNF\2757\206\264\000\000\000\000\021TNF\000\000\000\000\277l\020>\024TNF\2757\2064\2458\360?InNF\265\014\002:o\227a>\257\217NFv\253%:\000\000\000\000\257\217NF\000\000\000\000\000\000\000\000\257\217NF\000\000\000\000\000\000\000\000\257\217NF\000\000\000\000\025\237U>\257\217NF\000\000\000\200\375\206\366>\364\217NF\020$\2556\000\000\000\000\364\217NF\000\000\000\000\223\030\204>\000\220NF\300\332f5\000\000\000\000\000\220NF\000\000\000\000\000\000\000\000\000\220NF\000\000\000\000H\272\277?\216\331NF\337P\266:\315\314L>\303\342NF\201K69\000\000\000\000\303\342NF\000\000\000\000\000\000\000\000\303\342NF\000\000\000\000)\\\217>\305\342NF$9l4\340\217\260<\315\342NF\204\364\0205\000\000\000\000\315\342NF\000\000\000\000\000\000\000\000\315\342NF\000\000\000\000\332\035\024:\315\342NF\000\000\000\000\000\000\000\000\315\342NF\000\000\000\000\000\000\000\000\315\342NF\000\000\000\000\000\000\000\000\315\342NF\000\000\000\000\000\000\000\000\315\342NF\000\000\000\000\000\000\000\000\315\342NF\000\000\000\000\000\000\000\000\315\342NF\000\000\000\000\000\000\000\000\315\342NF\000\000\000\000\000\000\000\000\315\342NF\000\000\000\000\000\000\000\000\315\342NF\000\000\000\000\000\000\000\000\315\342NF\000\000\000\000\224ni?\315\342NF\000\000\000\000^g\205:\315\342NF\000\000\000\000\000\000\000\000\315\342NF\000\000\000\000\267b\237?\376\017OF\252\260_:\000\000\000\000\376\017OF\000\000\000\000\020\232v<\270\032OF\352-T9Er\244<\270\032OF\000\000\000\000\000\000\000\000\270\032OF\000\000\000\000\000\000\000\000\270\032OF\000\000\000\000\000\000\000\000\270\032OF\000\000\000\000\000\000\000\000\270\032OF\000\000\000\000\000\000\000\000\270\032OF\000\000\000\000\264f\027=\270\032OF\000\000\000\000\000\000\000\000\270\032OF\000\000\000\000\000\000\000\000\270\032OF\000\000\000\000\000\000\000\000\270\032OF\000\000\000\000\000\000\000\000\270\032OF\000\000\000\000%y:=\270\032OF\000\000\000\000\000\000\000\000\270\032OF\000\000\000\000\210\205\232>\270\032OF\000\000\000\000\000\000\000\000\270\032OF\000\000\000\000\214\265C>\270\032OFw\314+\262\000\000\000\000\270\032OF\000\000\000\000\000\000\000\000\270\032OF\000\000\000\000\315\314L>\256\032OF\234SI\265\000\000\000\000\256\032OF\000\000\000\000\000\000\000\000\256\032OF\000\000\000\000\000\000\000\000\256\032OF\000\000\000\000=w\206<\270\032OF\234SI5\000\000\000\000\270\032OF\000\000\000\000\000\000\000\000\270\032OF\000\000\000\000}n\327\243<\354\244OF\234SI\265\312\3032?\366\244OF\234SI5k:\240?\366\244OF\000\000\000\000\333\365u<\366\244OF\000\000\000\000\000\000\000\000\366\244OF\000\000\000\000\315\314L>\354\244OF\234SI\265\000\000\000\000\354\244OF\000\000\000\000\210i\2358\366\244OF\234SI5\000\000\000\000\366\244OF\000\000\000\000\000\000\000\000\366\244OF\000\000\000\000\352\315\210<\354\244OF\234SI\265\353\317t<\354\244OF\000\000\000\000\217\302u=\366\244OF\234SI5\315\314L>\354\244OF\234SI\265\000\000\000\000\354\244OF\000\000\000\000\000\000\000\000\354\244OF\000\000\000\000\210i\2358\000\245OF\234S\3115\022f\033=\303\246OF\213\n\0138\000\000\000\000\303\246OF\000\000\000\000!\251\244>\375\261OF\342r]9w\033M=\000\274OF\266oE9E\222(<\000\274OF\000\000\000\200\000\000\000\000\000\274OF\000\000\000\000\'1\006?\254\304OF\026\373*9\000\000\000\000\254\304OF\000\000\000\000\277}\235=\000\320OF\021V_9\n\327#<\000\320OF\000\000\000\000C)\274>\000\320OF\000\000\000\000\315\314L>\366\317OF\234SI\265\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\n\327#<\000\320OF\234SI5\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000p\264\210?\000\320OFw\314+\262\000\000\000\000\000\320OF\000\000\000\000K\232X<\000\320OFw\314+2\251-7=\241\336OF\331)\2209\000\000\000\000\241\336OF\000\000\000\000\326`\371>\243\377OF\235\231\":\315\314L>u\324OF\350\221T\272\000\000\000\000u\324OF\000\000\000\000\000\000\000\000u\324OF\000\000\000\000\000\000\000\000u\324OF\000\000\000\000\000\000\000\000u\324OF\000\000\000\000\000\000\000\000u\324OF\000\000\000\000\307\272X?H\347OF\335x\2719\000\000\000\000H\347OF\000\000\000\000\000\000\000\000H\347OF\000\000\000\000\000\000\000\000H\347OF\000\000\000\000\223\203\251>B\020PF\035\323I:\232\350\030;\227\030PF\\\007$9\315\314L>\232\030PF\\|a4\000\000\000\000\232\030PF\000\000\000\000\000\000\000\000\232\030PF\000\000\000\000\000\000\000\000\232\030PF\000\000\000\000\000\000\000\000\232\030PF\000\000\000\000G#\236?2\326OF\357a\243\272\007\000\000>\234\305OFSj\243\271\000\000\000\000\234\305OF\000\000\000\000\000\000\000\000\234\305OF\000\000\000\000\375\206\366>\227\306OF\246\204\2327\336!E:\366\277OF*\267\002\271\204\342\037=\205\317OF\025d\2319\324\232&>\270\317OF\202\250{6\000\000\000\000\270\317OF\000\000\000\000\245\245\231=\n\300OF\376\205\232\271:\235\371;2\247OF\311\347\364\271\013\3245A\202AOF\360\271\372\272\315\314\314=U\022OF\204\026i\272(\2219?&\010OF\025iI\271.]\\>\366@OFS~\214:\000\000\000\000\366@OF\000\000\000\000\000\000\000\000\366@OF\000\000\000\000\000\000\000\000\366@OF\000\000\000\000\000\000\000\000\366@OF\000\000\000\000\261\264\2358\366@OF\000\000\000\000\315\314\314=\366@OF\000\000\000\000J\353r=\366@OF\000\000\000\000\000\000\000\000\366@OF\000\000\000\000\000\000\000\000\366@OF\000\000\000\000\000\000\000\000\366@OF\000\000\000\000\003x\363?\277\213OFR\301\270:\000\000\000\000\277\213OF\000\000\000\000\000\000\000\000\277\213OF\000\000\000\000i\212\237>\277ROF4\236\214\272\006\241\231>\355@OFI\n\260\271\025\212\330<\366@OF\251{q\272k=&@5\357NF3p\033\272\201$\r<\326\355NF\007\230\330\267\315\314\314=\000\"OFa\020\201:\273\200v<\0000OF*l\2129\211\317\2358\366\034OF#4\274\271\000\000\000\000\366\034OF\000\000\000\000\350{\327=\373\351NF\200\014|\272\000\000\000\000\373\351NF\000\000\000\000\000\000\000\000\373\351NF\000\000\000\000\000\000\200>\005\340NF<\'E\271\000\000\000\000\005\340NF\000\000\000\000\000\000\000\000\005\340NF\000\000\000\000\000\000\000\000\005\340NF\000\000\000\000\000\000\000\000\005\340NF\000\000\000\000\000\000\000\000\005\340NF\000\000\000\000\000\000\000\000\005\340NF\000\000\000\000\363m\346;\013\340NF\225\277\3264\000\000\000\000\013\340NF\000\000\000\000\n\327#<{\364NF\367S\3129\000\000\000\000{\364NF\000\000\000\000m\347[?{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\235\307v;{\364NF\000\000\000\000[lE;{\364NF\000\000\000\000\364\375T<q\364NF\234SI\265\372\355\3539{\364NF\234SI5\000\000\000\000{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\270\0259={\364NF\000\000\000\000g\325\347={\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\013j\221<q\364NF\234SI\265U0\362?{\364NF\234SI5\000\000\000\000{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\0007\267\266:{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\n\327\243={\364NF\000\000\000\200O\032\363<{\364NF\000\000\000\000\235\307\366;{\364NF\000\000\000\000\000\000\000\000{\364NF\000\000\000\000\217\302u=\321\366NF\315\32788k\303v<\000\370NF6\247\2737\000\000\000\000\000\370NF\000\000\000\000\000\000\000\000\000\370NF\000\000\000\000\000\000\000\000\000\370NF\000\000\000\000S#tk\303\366;\000\370NF\000\000\000\000\000\000\000\000\000\370NF\000\000\000\000\000\000\000\000\000\370NF\000\000\000\000kg\024;\000\370NF\000\000\000\000\000\000\000\000\000\370NF\000\000\000\000\000\000\000\000\000\370NF\000\000\000\000\317\365\234@\320\365NF\003O-\270\217\302\365<\027\342NF\335\'\303\271\n\327#<\341\362NF\0147\2469\000\000\000\000\341\362NF\000\000\000\000\316\252\277?H\351NF\201\000>\271\"\251\304<\000\340NF(\2537\271\000\000\000\000\000\340NF\000\000\000\000\000\000\000\000\000\340NF\000\000\000\000\n\327\243<H\347NF\026\033\0209\315\314L=>\347NF\242\347;\265\000\000\000\000>\347NF\000\000\000\000\000\000\000\000>\347NF\000\000\000\000\000\000\000\000>\347NF\000\000\000\000\000\000\000\000>\347NF\000\000\000\000\000\000\000\000>\347NF\000\000\000\000\000\000\000\000>\347NF\000\000\000\000\n\327\243<\037\340NF\204\000\r\271\000\000\000\000\037\340NF\000\000\000\000\000\000\000\000\037\340NF\000\000\000\000\n\327#<\037\340NF\000\000\000\000\321\177E:\037\340NF\000\000\000\000\340\217\260<\014\340NFp8\271\265\000\000\000\000\014\340NF\000\000\000\000\000\000\000\000\014\340NF\000\000\000\000\n\327\243<\n\340NF!\226\013\264-C\244?\n\340NF\000\000\000\000\276\371f>\006\340NF\242\347\273\264\n\327#<\037\340NF\035\245\3715\n\327#<\037\340NF\000\000\000\000\000\000\000\000\037\340NF\000\000\000\000\022\224\222?\026\340NF\333*1\265\nu\223\210?\037\340NF\000\000\000\000\357\0306?\243\347NF\013\323\0249\000\000\000\000\243\347NF\000\000\000\000\000\000\000\000\243\347NF\000\000\000\000\203/\335?\377\367NFv\352\2419\n\327#<o\372NF\231\005A8\000\000\000\000o\372NF\000\000\000\000\000\000\000\000o\372NF\000\000\000\000\000\000\000\000o\372NF\000\000\000\000\000\000\000\000o\372NF\000\000\000\000\000\000\000\000o\372NF\000\000\000\000PS\246?\360\007OF\302\242\2059\000\000\000\000\360\007OF\000\000\000\000\000\000\000\000\360\007OF\000\000\000\000Y\022\026>\000\010OF\345\010\2355\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\026j\r>\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000<&\034;\000\010OF\000\000\000\000\312\377a=\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\352\214\2658\000\010OF\000\000\000\000S\026.:\366\007OF\234SI\265\000\000\000\000\366\007OF\000\000\000\000\000\000\000\000\366\007OF\000\000\000\000\000\000\000\000\366\007OF\000\000\000\000#\372o9\000\010OF\234SI5\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\332\377#>\377\007OF\225\277V\263\000\000\000\000\377\007OF\000\000\000\000n\017\211<\000\010OF\225\277V3\000\000\000\000\000\010OF\000\000\000\000\220\303\032;\000\010OF\000\000\000\000\352\037\345;\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\337\357\264=\366\007OF\234SI\265\000\000\000\000\366\007OF\000\000\000\000\002Gh@dEOF\361\354\227:\000\000\000\000dEOF\000\000\000\000\013G\217>\356WOFU.\2679\000\000\000\000\356WOF\000\000\000\000\000\000\000\000\356WOF\000\000\000\000\000\000\000\000\356WOF\000\000\000\000\000\000\000\000\356WOF\000\000\000\000\315\314L>\354WOF\\|a\264\000\000\000\000\354WOF\000\000\000\000\000\000\000\000\354WOF\000\000\000\000\000\000\000\000\354WOF\000\000\000\000\000\000\000\000\354WOF\000\000\000\000\000\000\000\000\354WOF\000\000\000\000)\\\217=\366WOF\234SI5wx\355\025=fWOF\325\351#\267\000\000\000\000fWOF\000\000\000\000\000\000\000\000fWOF\000\000\000\000\000\000\000\000fWOF\000\000\000\000\000\000\000\000fWOF\000\000\000\000\000\000\000\000fWOF\000\000\000\000\000\000\000\000fWOF\000\000\000\000\000\000\000\000fWOF\000\000\000\000\305\320\244;qWOF\234SI5\000\000\000\000qWOF\000\000\000\000\000\000\000\000qWOF\000\000\000\000\000\000\000\000qWOF\000\000\000\000\000\000\000\000qWOF\000\000\000\000\000\000\000\000qWOF\000\000\000\000\000\000\000\000qWOF\000\000\000\000\000\000\000\000qWOF\000\000\000\000\000\000\000\000qWOF\000\000\000\000si\024?\343WOF\272\355\0147\000\000\000\000\343WOF\000\000\000\000\000\000\000\000\343WOF\000\000\000\000\000\000\000\000\343WOF\000\000\000\000\000\000\000\000\343WOF\000\000\000\000\000\000\000\000\343WOF\000\000\000\000\000\000\000\000\343WOF\000\000\000\000\000\000\000\000\343WOF\000\000\000\000\000\000\000\000\343WOF\000\000\000\000\000\000\000\000\343WOF\000\000\000\000\315\314\314=\354WOFw\314+5\000\000\000\000\354WOF\000\000\000\000\272\025\200:\366WOF\234SI5\000\000\000\000\366WOF\000\000\000\0005Qv<\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\000\274\rn\327\243<\366WOF\234SI5\000\000\000\000\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\000\303dZ?\366WOF\000\000\000\200\000\000\000\000\366WOF\000\000\000\000\244\337\266?\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\00033\363@\366WOF\000\000\000\000\000\000\000\000\366WOF\000\000\000\000\301\374;AT[OF\271\005\2058\226\2405<\000lOF\312\255\2449\000\000\000\000\000lOF\000\000\000\000\232ZL>\000lOF\000\000\000\000\000\000\000\000\000lOF\000\000\000\000\000\000\000\000\000lOF\000\000\000\000\000\000\000\000\000lOF\000\000\000\000\000\000\000\000\000lOF\000\000\000\000F\214\227>\343wOF\004\304j9\000\000\000\000\343wOF\000\000\000\000\000\000\000\000\343wOF\000\000\000\000\017\013\325?\362\312OF\030\371\314:\000\000\000\000\362\312OF\000\000\000\000\000\000\000\000\362\312OF\000\000\000\000\026R\000@\313\317OF4\002\2778\373\302u<\366\317OF/\274T6\001\201~?\366\317OF\000\000\000\0004\242eyi<\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\361\304P@\354\317OF\234SI\265\000\000\000\000\354\317OF\000\000\000\000\000\000\000\000\354\317OF\000\000\000\000\000\000\000\000\354\317OF\000\000\000\000\000\000\000\000\354\317OF\000\000\000\000\000\000\000\000\354\317OF\000\000\000\000\373\302\365;\366\317OF\234SI5\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000jn\000\360@\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\0007u\032;\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\345U\360?\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000ff\206@\213\305OF\372LM\271\361\202 @)\270OF\335\353\203\271/}Z=\\\225OF\272\216+\272\340-\220:\n\250OF7L\2709\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000P\2157@\303\247OF\365\324\260\266\000\000\000\000\303\247OF\000\000\000\000\000\000\000\000\303\247OF\000\000\000\000\000\000\000\000\303\247OF\000\000\000\000\000\000\000\000\303\247OF\000\000\000\000\000\000\000\000\303\247OF\000\000\000\000\000\000\000\000\303\247OF\000\000\000\000\230L\205?\365vOFH\247p\272\202\202\373<HsOF\256?\221\2701r\337>\350gOF\202\225`\271\225\277\3263\n0OF\242\350\211\272bv\375>\307mOF\004\220\230:{\224\2358\341kOFR\307\025\270\313\233\004?\321^OF?\374\200\271\000\000\000\000\321^OF\000\000\000\000\254\334\270?\315^OF\023n\246\264\000\000\000\000\315^OF\000\000\000\000Ot\360@\320kOF\313\204\20096)\205=\354rOFgW\0149\000\000\000\000\354rOF\000\000\000\000\000\000\000\000\354rOF\000\000\000\000\000\000\000\000\354rOF\000\000\000\000\000\000\000\000\354rOF\000\000\000\000\000\000\000\000\354rOF\000\000\000\000\000\000\000\000\354rOF\000\000\000\000\000\000\000\000\354rOF\000\000\000\000\000\000\000\000\354rOF\000\000\000\000za\337;\315^OF\272\241\306\271\000\000\000\000\315^OF\000\000\000\000\000\000\000\000\315^OF\000\000\000\0001\010\254=\315^OF\000\000\000\000\000\000\000\000\315^OF\000\000\000\000\026Gb>\315^OF\000\000\000\000\223\030\324?\210\260OFg\314\311:\000\000\000\000\210\260OF\000\000\000\000\330L<<\270\302OF\334W\2639\000\000\000\000\270\302OF\000\000\000\000\000\000\000\000\270\302OF\000\000\000\000\264\036><\205\222OF\275\220m\272\000\000\000\000\205\222OF\000\000\000\000\000\000\000\000\205\222OF\000\000\000\000\000\000\000\000\205\222OF\000\000\000\000\000\000\000\000\205\222OF\000\000\000\000\000\000\000\000\205\222OF\000\000\000\000\000\000\000\000\205\222OF\000\000\000\000\000\000\000\000\205\222OF\000\000\000\000\000\000\000\000\205\222OF\000\000\000\000\013\331u;H\275OF-\363R:\000\000\000\000H\275OF\000\000\000\000\000\000\000\000H\275OF\000\000\000\000ko\026\272c\356\032>(\234OF\010\251\000\271\233\244\346=H\230OFx\007\231\270\264\036><3\201OFk\261\343\271\233\303\031=\216\227OF\201\241\3349\000\000\000\000\216\227OF\000\000\000\000\000\000\000\000\216\227OF\000\000\000\000\363M\360?\354\214OF\203\304Q\271\223S\034<\\\201OF\2343d\271\000\000\000\000\\\201OF\000\000\000\000\000\000\000\000\\\201OF\000\000\000\000\000\000\000\000\\\201OF\000\000\000\000\000\000\000\000\\\201OF\000\000\000\000C\245\360@\274\253OF\022\034Q:\000\000\000\000\274\253OF\000\000\000\000\000\000\000\000\274\253OF\000\000\000\000i|\001:? zOF\300\\\254\272\000\000\000\000 zOF\000\000\000\000\000\000\000\000 zOF\000\000\000\000\333s\001>j\177OF\321\365\3208\000\000\000\000j\177OF\000\000\000\000\000\000\000\000j\177OF\000\000\000\0004/\300>\354\247OF.\343G:\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\202sv?\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\220\360\242<\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\000\000\000\000\354\247OF\000\000\000\000\315\314L>\341\247OF\234SI\265j\361\226=\341\247OF\000\000\000\000\000\000\000\000\341\247OF\000\000\000\000\000\000\300?\233uOF5\354w\272W\346\200?\270\247OF\234^w:\000\000\000\000\270\247OF\000\000\000\000\000\000\000\000\270\247OF\000\000\000\000onlOF\244\360\311\271\222\277\022AU\254OF_\263\236:\035\321u<\000\304OF\265e\3519\342\224\245=7\233OF\277\003I\272\352\000\257<\000\\OF\374\346\233\272\000\000\000\000\000\\OF\000\000\000\000\367\370\253<\neOF\217\22229\000\000\000\000\neOF\000\000\000\000\000\000\000\000\neOF\000\000\000\000\000\000\000\000\neOF\000\000\000\000\000\000\000\000\neOF\000\000\000\000\000\000\000\000\neOF\000\000\000\000\000\000\000\000\neOF\000\000\000\000\331\231\2358\327dOF\033\000}\266\035\265\233<\340dOFw\314+5\000\000\000\000\340dOF\000\000\000\000\n\327#<\351dOFp895\000\000\000\000\351dOF\000\000\000\000\000\000\000\000\351dOF\000\000\000\000r_\220@\210LOFi\273\360\271\000\000\000\000\210LOF\000\000\000\000\016|\200@?dOF\202D\3529\000\000\000\000?dOF\000\000\000\000\000\000\000\000?dOF\000\000\000\000\000\000\000\000?dOF\000\000\000\000\000\000\000\000?dOF\000\000\000\000\236\n\366;t\223OF\334\027i:\000\000\000\000t\223OF\000\000\000\000\000\000\000\000t\223OF\000\000\000\000\000\000\000\000t\223OF\000\000\000\000\000\000\000\000t\223OF\000\000\000\000\\\205=;\000\200OF\305\357\277\271\350\n\223B\224\313OF=|\272:\000\252k>\026\257OF*f\014\272\217\302u<\354\303OF\340o\3159\000\000\000\000\354\303OF\000\000\000\000\315\314L>\341\317OFf\310k9\000\000\000\000\341\317OF\000\000\000\000vO\316?\365\317OF;?\2755\315\314L>\341\317OF;?\275\265\000\000\000\000\341\317OF\000\000\000\000\000\000\000\000\341\317OF\000\000\000\000\315\314L>\341\317OF\000\000\000\000\000\000\000\000\341\317OF\000\000\000\000\317\270\254?l\315OFY\334A\270\324\314L>\232\302OFuJU\271\000\000\000\000\232\302OF\000\000\000\000\000\000\000\000\232\302OF\000\000\000\000\000\000\000\000\232\302OF\000\000\000\000%\367\210=\232\302OF\000\000\000\200\000\000\000\000\232\302OF\000\000\000\000*\222k=S\276OFl\234\250\270\000\000\000\000S\276OF\000\000\000\000\000\000\000\000S\276OF\000\000\000\000\000\000\000\000S\276OF\000\000\000\000\000\000\000\000S\276OF\000\000\000\000\276\301\227>\256\307OF\211|89|\324\240@U\314OF\273j\2678]\344\227>\000\314OF\260\016\323\266\300k\362>\000\314OFw\314+2\000\000\000\000\000\314OF\000\000\000\000W\255\217<\000\314OFw\314\2532\000\000\000\000\000\314OF\000\000\000\000\374iI?\263\202OF\252\234\264\272\000\000\000\000\263\202OF\000\000\000\000L\274\3119\000\314OFk\334\264:\001\004@>\000\314OF\000\000\000\000\255\307u<\000\314OF\000\000\000\200\243\366\010?\033\200OF\306\377\272\272\000\000\000\000\033\200OF\000\000\000\000\000\000\000\000\033\200OF\000\000\000\000\000\000\000\000\033\200OF\000\000\000\000\000\000\000\000\033\200OF\000\000\000\000\000\000\000\000\033\200OF\000\000\000\000\000\000\000\000\033\200OF\000\000\000\000\n\327#<\366\247OF\304\255D:\n\327\243<\377\247OF\333*15\000\000\000\000\377\247OF\000\000\000\000\000\000\000\000\377\247OF\000\000\000\000.\220\310?\000\250OF\225\277\3263\000\000\000\000\000\250OF\000\000\000\0004)C@j\\OF\266^\272\272\000\000\000\000j\\OF\000\000\000\000x\025q@\n\200OF\035\360/:\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\0000\332\240?\n\200OF\000\000\000\200\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\205\353\221?\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000\000\000\n\200OF\000\000\000\000\000\000 @\244!OF\225\355\350\272\000\000\000\000\244!OF\000\000\000\000\177]p@\177\177OF\260\000\350:)tC<\2540OFn\200\302\272\000\000\000\000\2540OF\000\000\000\000\000\000\000\000\2540OF\000\000\000\000\000\000\000\000\2540OF\000\000\000\000\000\000\000\000\2540OF\000\000\000\000\000\000\000\000\2540OF\000\000\000\000\000\000\000\000\2540OF\000\000\000\000\000\000\000\000\2540OF\000\000\000\000\000\000\000\000\2540OF\000\000\000\000\316\373\002@F\206OF~\210\323:\000\000\000\000F\206OF\000\000\000\000\000\000\000\000F\206OF\000\000\000\000\000\000\000\000F\206OF\000\000\000\000\315\314\314=ZsOFM\270\272\271\000\000\000\000ZsOF\000\000\000\000\245]u<\000XOFl\004\007\272\000\000\000\000\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000\000\000\000\000\000XOF\000\000\000\000\201\273\336=\035~OF\205;<:4\310\260<\366\177OF\207\300\0218\316\207\201@\352\250OFC\034J:\000\000\000\000\352\250OF\000\000\000\000\000\000\000\000\352\250OF\000\000\000\000\306\361\215:f\204OF\021\0174\272\000\000\000\000f\204OF\000\000\000\000\000\000\000\000f\204OF\000\000\000\000\240\032\337?\220\277OF;\370\221:\225\277\3263\000\314OFQ8u9\000\000\000\000\000\314OF\000\000\000\000\000\000\000\000\000\314OF\000\000\000\000\000\000\000\000\000\314OF\000\000\000\000\000\000\000\000\000\314OF\000\000\000\000\000\000\000\000\000\314OF\000\000\000\000\000\000\000\000\000\314OF\000\000\000\000\000\000\000\000\000\314OF\000\000\000\000\033h\233<\366\313OF\234SI\265\000\000\000\000\366\313OF\000\000\000\000\000\000\000\000\366\313OF\000\000\000\000\000\000\000\000\366\313OF\000\000\000\000\033K!>\353\313OF\225\277V\265\000\000\000\000\353\313OF\000\000\000\000\000\000\000\000\353\313OF\000\000\000\000\000\000\000\000\353\313OF\000\000\000\000\000\000\000\000\353\313OF\000\000\000\000\000\000\000\000\353\313OF\000\000\000\000\'1\360?~\314OF\246157)\\\217=)\200OF?\022\274\272\000\000\000\000)\200OF\000\000\000\000\n\327#<\000\250OF\242\231D:t\265\302=\327\234OF\250 \\\271\213\305\357>\327\234OF\000\000\000\200\000\000\000\000\327\234OF\000\000\000\000$\035E?\327\234OF\000\000\000\200\n\327\243<\325\234OFY\331\000\264\001\300\302>q\025OF\035\362&\273\000\000\000\000q\025OF\000\000\000\000\335tv@\016\234OF\340h&;\000\000\000\000\016\234OF\000\000\000\000\000\000\000\000\016\234OF\000\000\000\000\000\000\000\000\016\234OF\000\000\000\000\201\377u<\327\234OF\253\314w7\'1\000@\001\266OF\301>\3709\255h6A\231\316OF\004y\3629\000\000\000\000\231\316OF\000\000\000\000\315\314L>\000\320OF%5\3357\000\000\000\000\000\320OF\000\000\000\000\n\327\243<\n\320OF\234SI5\000\000\000\000\n\320OF\000\000\000\000\000\000\200?\000\320OF\234SI\265\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\n\327\243<\n\320OF\234SI5\000\000\000\000\n\320OF\000\000\000\000t\265\225=\000\320OF\234SI\265\001\201~?\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000%\272\002?\006\320OF\353\365\3664q=\212>\003\320OF!\226\213\264\000\000\000\000\003\320OF\000\000\000\000\000\000\000\000\003\320OF\000\000\000\000\024\256\307>\005\320OF?\21164\000\000\000\000\005\320OF\000\000\000\000\\I\035<\000\320OFj\244\306\264\000\000\000\000\000\320OF\000\000\000\000UY\205>\n\320OF\234SI5\344zT>\000\320OF\006FA\265\315\314\314=\n\320OF\006FA5\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\374\030C?\n\320OFw\314+\262\n\327#<\n\320OFw\314+2\n\327#=\n\320OF\000\000\000\000l&\217>\000\320OF\234SI\265\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\315\314L>\000\320OF\000\000\000\000J\202\252;\n\320OF\234SI5\000\000\000\000\n\320OF\000\000\000\000\315\314L>\000\320OF\234SI\265)\\\217=\n\320OF\234SI5\000\000\000\000\n\320OF\000\000\000\000=\nW>\000\320OF\006FA\265\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\315\314L>\000\320OFw\314+\263\000\000\000\000\000\320OF\000\000\000\000B\317\346>\n\320OF\234SI5\341z\224>\003\320OF!\226\013\265\000\000\000\000\003\320OF\000\000\000\000\356|??\000\320OF\353\365v\264\037\205k>\001\320OF\225\277\3263\000\000\000\000\001\320OF\000\000\000\000\000\000\000\000\001\320OF\000\000\000\000\n\327\243<\n\320OF\251{.5\n\327#<\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000x\220G;\t\320OF!\226\013\264o\022\003:\000\320OFE\035)\265\000\000\000\000\000\320OF\000\000\000\000\"l\230>\n\320OF\234SI5\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\022\216\223;\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\000\000\000\000\n\320OF\000\000\000\000\nh\242?\t\320OFY\331\000\264\000\000\000\000\t\320OF\000\000\000\000\000\000\000\000\t\320OF\000\000\000\000\315\314L>\000\320OFE\035)\265s\334\307>\002\320OF?\21164\000\000\000\000\002\320OF\000\000\000\000\315\314L>\000\320OF?\2116\264\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\315\314L>\000\320OF\000\000\000\200\000\000\000\000\000\320OF\000\000\000\000\246\233\304:\n\320OF\234SI5\344zT>\000\320OF\234SI\265\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\315\314L>\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000=\nW>\000\320OFw\314+3\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\315\314L>\000\320OFw\314+\263\326\305\325?\n\320OF\234SI5\000\000\000\000\n\320OF\000\000\000\000\315\314L>\000\320OF\234SI\265\000\000\000\000\000\320OF\000\000\000\000\000\000\000\000\000\320OF\000\000\000\000\211/\021>\377\317OF\006F\301\263\000\000\000\000\377\317OF\000\000\000\000\000\000\000\000\377\317OF\000\000\000\000\000\000\000\000\377\317OF\000\000\000\000\000\000\000\000\377\317OF\000\000\000\000\000\000\000\000\377\317OF\000\000\000\0008\331\247;\270\272OF\003\253\321\271\274:\r;\n\250OF\251*\270\271\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\374\351\034@\032\207OFVo\"\272u\377o@q\333OF\255\025\320:]\355\265?\356\344OF\013\366:9\000\000\000\000\356\344OF\000\000\000\000\000\000\000\000\356\344OF\000\000\000\000\000\000\000\000\356\344OF\000\000\000\000\217\302\365<R\272OF_\341Q\272\000\000\000\000R\272OF\000\000\000\000\315\314L>\226eOFL\331\320\272\000\000\000\000\226eOF\000\000\000\000\315\314\014?\037XOF\244\371\204\271\000\000\000\000\037XOF\000\000\000\0000\0161=H\272OF\212c\362:\000\000\000\000H\272OF\000\000\000\000\000\000\000\000H\272OF\000\000\000\000\000\000\000\000H\272OF\000\000\000\000\212ab<H\272OF\000\000\000\000\000\000\000\000H\272OF\000\000\000\000\000\000\000\000H\272OF\000\000\000\000\000\000\000\000H\272OF\000\000\000\000\000\000\000\000H\272OF\000\000\000\000\232\231\221?P\272OF~`\0365\000\000\000\000P\272OF\000\000\000\000\315\314L>\346\250OF:\250\253\271\000\000\000\000\346\250OF\000\000\000\000\000\000\000\000\346\250OF\000\000\000\000\000\000\000\000\346\250OF\000\000\000\000\000\000\000\000\346\250OF\000\000\000\000\000\000\000\000\346\250OF\000\000\000\000ua\234?\305ZOF\363\242\300\272\027\325\231=\366\177OF$\2517:\000\000\000\000\366\177OF\000\000\000\000\207\225i@\003XOF\220&E\272\246\233D;\nXOF\350R\0265*tp@R\226OFn\313\231:\325\304\202>\250\\OF\354:\216\272\274t\223;\003XOF\\e\267\270\246\233D;\005XOF!\226\0134~]x>\272mOF\006k\3269#J\373?\000nOFw\314\2536\246\233D;\366mOF\234SI\265\246\233D;\366mOF\000\000\000\000\016\211\276?\213XOF\tv\323\271S\235D;\256HOFI\254\234\271\000\000\000\000\256HOF\000\000\000\000sH\315>\207kOFg(,:\253T\374?\260>OF\030`]\272\364\375T<\010EOFI\274\3728\246\233D;f;OF\tQ>\271\000\223\262<2EOFK\241A9\246\233D;{;OFE\t@\271\246\233D;\251;OF[\327d6\270\342p@+LOF\337%\2439\037\305\223<*EOF\035d\n\271\036)\253=\313GOF\350\323O8\246\233D;\0000OF\222\030\353\271\246\233D;\0000OF\000\000\000\000\274t\223;\0000OF\000\000\000\200\261.\206?\0010OF$9\3543\246\233\304:f@OF\\\r\2429\000\000\000\000f@OF\000\000\000\000\000\000\000\000f@OF\000\000\000\000\250W*?=MOF\021\304}9\000\000\000\000=MOF\000\000\000\000\000\000\000\000=MOF\000\000\000\000c\225p@\251yOFvk[:\246\233D;\n{OF\240\357\3317\246\233D;\n{OF\000\000\000\000_?e;\014{OF$9\3543\246\233D;\n{OF$9\354\263\033\2353<\022{OF\266\243\0235\234:\254;\022{OFw\314+\262\000\000\000\000\022{OF\000\000\000\000\246\233\304:\n{OF\204\364\020\265\246\233D;\n{OF\000\000\000\000\246\233D;\n{OF\000\000\000\000\024\264\007<\n{OF\000\000\000\000\274t\223;\n{OF\000\000\000\200\246\233D;\n{OF\000\000\000\000b\222\337;\020{OF\\|\3414\246\233D;\n{OF\\|\341\264\246\233D;\n{OF\000\000\000\000\274t\223;\n{OF\000\000\000\200\246\233\304:\n{OF\000\000\000\000\023R\210@\024{OF\234SI5\246\233D;\n{OF\234SI\265\246\233\304:\n{OF\000\000\000\000\246\233D;\n{OF\000\000\000\000\274t\223;\345[OF\243\270\031\272\246\233D;\000XOF\035\316\231\270\246\233D;\000XOF\000\000\000\000\340\347\323>LEOFM\276\270\271\246\233D;\2371OF\236j\302\271\246\233D;W>OF\202u{9\246\233D;.KOF\300\306}9\246\233D;\217KOF\357?\3606\246\233\304:\270JOF\253\312\204\267\274t\223;\325JOF\206\231\r6\246\233\304:\327JOF\260\017!4\246\233D;\327JOF\000\000\000\000\350M\007<\372QOF\204\000\r9\246\233\304:\303=OF\210\263\307\271\000\000\000\000\303=OF\000\000\000\000\000\000\000\000\303=OF\000\000\000\000\246\233D;\303=OF\000\000\000\000\246\233D;\303=OF\000\000\000\000\210\220\272?\252QOF\037\261\3049\246\267\240<{0OF%\347#\272\246\233D;{0OF\000\000\000\000;\337O>{0OF\000\000\000\200\246\233D;{0OF\000\000\000\000\246\233\304:{0OF\000\000\000\000\252\361\322={0OF\000\000\000\000\000\000\000\000{0OF\000\000\000\000\000\000\000\000{0OF\000\000\000\000\237\372\261>\267+OF|h\274\270\000\000\000\000\267+OF\000\000\000\000\000\000\000\000\267+OF\000\000\000\000\275g\216<\005(OF*!\222\270\000\000\000\000\005(OF\000\000\000\000\000\000\000\000\005(OF\000\000\000\000\000\000\000\000\005(OF\000\000\000\000\000\000\000\000\005(OF\000\000\000\000\000\000\000\000\005(OF\000\000\000\000\315\314L>\217\017OF\217\316\361\271\000\000\000\000\217\017OF\000\000\000\000\000\000\000\000\217\017OF\000\000\000\000\333=\252?\232>OF\024\241h:\357X\310?K\016OFG\255n\272\000\000\000\000K\016OF\000\000\000\000\030 f>\000\014OFI\2225\270\000\000\000\000\000\014OF\000\000\000\000\000\000\000\000\000\014OF\000\000\000\000\330\346\223<\376/OF\362\0022:333?\210\013OFN34\272Er\244<\217\010OFdbk\270\260\206\366;\000+OF\262Z*:\314\221Z>\000\010OF\323\377,\272\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\n\327\243<\000\030OF\375F\2369\027\267\3218\\\020OF<\034\027\271\000\000\000\000\\\020OF\000\000\000\000X9T?^\030OF~`\0369\000\000\000\000^\030OF\000\000\000\000\000\000\000\000^\030OF\000\000\000\000\000\000\000\000^\030OF\000\000\000\000\000\000\000\000^\030OF\000\000\000\000\000\000\000\000^\030OF\000\000\000\000\000\000\000\000^\030OF\000\000\000\000\000\000\000\000^\030OF\000\000\000\000\000\000\000\000^\030OF\000\000\000\000\000\000\000\000^\030OF\000\000\000\000\000\000\000\000^\030OF\000\000\000\000\0336C=\000\010OF\003\331\241\271-\035\367:f\026OF\365r\2169\000\000\000\000f\026OF\000\000\000\000\000\000\000\000f\026OF\000\000\000\000\000\000\000\000f\026OF\000\000\000\0001\257\365>\211\027OF\032\257\2637\315\314L>\000\010OF*\243\231\271\000\000\000\000\000\010OF\000\000\000\000\007\260\354<\027\nOF\244a%8e\246\366;\\\020OF3\035\3708\000\000\000\000\\\020OF\000\000\000\000\000\000\000\000\\\020OF\000\000\000\000\000\000\000\000\\\020OF\000\000\000\000\000\000\000\000\\\020OF\000\000\000\0001\266@?\350\022OFX^I8\000\000\000\000\350\022OF\000\000\000\000\000\000\000\000\350\022OF\000\000\000\000\315\314L>O\tOF\216\325=\271\000\000\000\000O\tOF\000\000\000\000\031\205\003?\000\010OF\345\007\317\267\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\315\314L>\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\234\353=?\t\010OFE\035)5\000\000\000\000\t\010OF\000\000\000\000\000\000\000\000\t\010OF\000\000\000\000\000\000\000\000\t\010OF\000\000\000\000\000\000\000\000\t\010OF\000\000\000\000\000\000\000\000\t\010OF\000\000\000\000\027\267\3218\n\010OF!\226\0134\315\314L>\000\010OF\234SI\265\000\000\000\000\000\010OF\000\000\000\000\233C\035=\n\010OF\234SI5\000\000\000\000\n\010OF\000\000\000\000\000\000\000\000\n\010OF\000\000\000\000\000\000\000\000\n\010OF\000\000\000\000\0029f>\001\010OFp89\265\000\000\000\000\001\010OF\000\000\000\000!\341\003;\n\010OFp895\000\000\000\000\n\010OF\000\000\000\000\000\000\000\000\n\010OF\000\000\000\000\000\000\000\000\n\010OF\000\000\000\000\036X\200>\001\010OF\333*1\265\000\000\000\000\001\010OF\000\000\000\000\000\000\000\000\001\010OF\000\000\000\000\031\004\326>\n\010OF\333*15\000\000\000\000\n\010OF\000\000\000\000\000\000\000\000\n\010OF\000\000\000\000\000\000\000\000\n\010OF\000\000\000\000\320\037\255?\000\010OF\234SI\265\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\247\225\202@\310\266NF\321\333\310\272\000\000\000\000\310\266NF\000\000\000\000\000\000\000\000\310\266NF\000\000\000\000:.\232=\000\010OF\254*\311:\317\241\006?E\234NF`6\005\273\000\000\000\000E\234NF\000\000\000\000\000\000\000\000E\234NF\000\000\000\000\000\000\000\000E\234NF\000\000\000\000:.\032=\000\010OF\325{\005;\214J\242?\000\010OF\000\000\000\000\004>};\000\010OF\000\000\000\200\256G\341=\366\007OF\234SI\265\000\000\000\000\366\007OF\000\000\000\000\000\000\000\000\366\007OF\000\000\000\000\000\000\000\000\366\007OF\000\000\000\000\000\000\000\000\366\007OF\000\000\000\000\356|?>\036\363NF&1\316\271\351\230\230;3\241NF\335\251\312\272\000\000\000\0003\241NF\000\000\000\000\000\000\000\0003\241NF\000\000\000\000\n\327\243<\315\305NF\246d5:\241\314\264<\016\351NF\325\225.:333?\177\341NF\275\241\025\271)\\\217=\000\010OF%\224>:\000\000\000\000\000\010OF\000\000\000\000\n\327#=\000\340NFg\330E\272\315\314L>3\241NF\330l\233\272\000\000\000\0003\241NF\000\000\000\000\000\000\000\0003\241NF\000\000\000\000\315\314L>\270\276NF\306J\022:\r\003\000=\366\337NF\r\243$:\305 \230?\374\337NF$9\3544\000\000\000\000\374\337NF\000\000\000\0006enL\310=\366\337NF\320\372\2558\256\256Z>\366\337NF\000\000\000\200\315\314L>@\307NFO\237\364\271\315\314\314=\364\337NF\014\252\3649\000\000\000\000\364\337NF\000\000\000\000\000\000\000\000\364\337NF\000\000\000\000\232\231\031>\366\337NF!\226\0134\'\n\275<\366\337NF\000\000\000\000\000\000\000\000\366\337NF\000\000\000\000\000\000\000\000\366\337NF\000\000\000\000\n\327\243=\366\337NF\000\000\000\000\000\000\000\000\366\337NF\000\000\000\000Yuut>\366\337NF\350R\2264l\0229Af\335NF\241\353J\270\000\000\000\000f\335NF\000\000\000\000\020in\327#<\366\337NF\000\000\000\000\000\000\000\000\366\337NF\000\000\000\000Q\247\020@\366\337NF\000\000\000\000\000\000\000\000\366\337NF\000\000\000\000\000\000\000\000\366\337NF\000\000\000\000\000\000\000\000\366\337NF\000\000\000\000\000\000\000\000\366\337NF\000\000\000\000\304\313\016@\356\337NF\350R\026\265\000\000\000\000\356\337NF\000\000\000\000\315\314L>s\270NFQlC\272\n\310\337=\000\324NF4x\010:\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\277\344o<\000\324NFw\314+2\376T\232=\000\324NF\000\000\000\000\357\366\331>\255\233NF3n\213\272\371&B?\373\332NF\365\337\234:\n\327\243<\303\323NF}\366\016\271\315\314L>\023\262NF\375\305&\272\000\000\000\000\023\262NF\000\000\000\000\363\260\253;\022\320NFX\233\024:\373\375\257?\327\275NF\340\211\264\271E\330p=\373\323NF\245T\3339\022c\236<\201\323NF\233T\027\267\373T\232<\000\324NF\313^\0357\270\376\213?\336\323NF\023n&\266\000\000\000\000\336\323NF\000\000\000\000\000\000\000\000\336\323NF\000\000\000\000\000\000\000\000\336\323NF\000\000\000\000\000\000\000\000\336\323NF\000\000\000\000\000\000\000\000\336\323NF\000\000\000\000\000\000\000\000\336\323NF\000\000\000\000\000\000\000\000\336\323NF\000\000\000\000\000\000\000\000\336\323NF\000\000\000\000\315\314L>\370\252NF>~w?w\321NF\033\245\2469^\356v<\000\324NF\371\362H8\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\0008\362\231>\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000$\260B@\366\323NF\315\002L\265\315\314L>\217\300NFg\035\300\271\000\000\000\000\217\300NF\000\000\000\000\000\000\000\000\217\300NF\000\000\000\000\000\000\000\000\217\300NF\000\000\000\000\000\000\000\000\217\300NF\000\000\000\000\315\314L>\256\252NF=\270\330\271\000\000\000\000\256\252NF\000\000\000\000\017\345vj\306\2329\021\363v;\000\320NF\315\002L5\000\000\000\000\000\320NF\000\000\000\000\337O\215=\000\320NF\000\000\000\200\000\000\000\000\000\320NF\000\000\000\000\000\000\000\000\000\320NF\000\000\000\000\000\000\000\000\000\320NF\000\000\000\000\000\000\000\000\000\320NF\000\000\000\000\315\314L=\000\320NF\000\000\000\000\000\000\000\000\000\320NF\000\000\000\000\300[\240=\366\317NF\315\002L\265\000\000\000\000\366\317NF\000\000\000\000\000\000\000\000\366\317NF\000\000\000\000l\253<<\000\320NF\315\002L5\000\000\000\000\000\320NF\000\000\000\000\000\000\000\000\000\320NF\000\000\000\000\000\000\000\000\000\320NF\000\000\000\000\000\000\000\000\000\320NF\000\000\000\000\000\000\000\000\000\320NF\000\000\000\000\000\000\000\000\000\320NF\000\000\000\000\000\000\000\000\000\320NF\000\000\000\000\000\000\000\000\000\320NF\000\000\000\000\000\000\000\000\000\320NF\000\000\000\000\000\000\000\000\000\320NF\000\000\000\000\232\231\031>\366\317NF\315\002L\265\217\302u=\000\320NF\315\002L5\257\232\243<\000\320NF\000\000\000\200\3570t?\366\320NFZ+\2307\000\000\000\000\366\320NF\000\000\000\000\000\000\000\000\366\320NF\000\000\000\000\000\000\000\000\366\320NF\000\000\000\000\000\000\000\000\366\320NF\000\000\000\000\000\000\000\000\366\320NF\000\000\000\000\000\000\000\000\366\320NF\000\000\000\000\315\314L>\366\323NF6\246m8\000\000\000\000\366\323NF\000\000\000\000\000\000\000\000\366\323NF\000\000\000\000\tn\327#<\000\324NF\000\000\000\000\256Ga>\367\323NFp89\265\215\227#>\000\324NFp895\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000)\\\217>\371\323NF\204\364\020\265\000\000\000\000\371\323NF\000\000\000\0005\t\036<\000\324NF\204\364\0205\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000d2\213?\376\323NF\350R\026\264\025\035\255@\000\324NF\350R\0264\n\327#<\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\263\323*<\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\271\'\253?\000\324NF\000\000\000\000\306\\\211<\370\323NF~`\036\265\n\327\243<\000\324NF~`\0365\000\000\000\000\000\324NF\000\000\000\000\370\013\t<\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000@\014\235:\000\324NF\000\000\000\000\n\327\243<\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000g4\362=\366\323NF\315\002L\265\000\000\000\000\366\323NF\000\000\000\000\000\000\000\000\366\323NF\000\000\000\000\315f\332>\000\324NF\315\002L5\364lV>\000\324NF\000\000\000\200\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\217\302u=\000\324NF\000\000\000\000\000\000\000\000\000\324NF\000\000\000\000\263\010Y=\000\324NF\000\000\000\200\000\000\000\000\000\324NF\000\000\000\000\177\014w=\366\323NF\315\002L\265\000\000\000\000\366\323NF\000\000\000\000\000\000\000\000\366\323NF\000\000\000\0002\032\361@\031\335NFF\37149D\276\205=\366\337NF\002\251b8\000\000\000\000\366\337NF\000\000\000\000\n\327#<\366\337NF\000\000\000\000\000\000\000\000\366\337NF\000\000\000\000\000\000\000\000\366\337NF\000\000\000\000\3541\313?\266&OF\264\031\257:\000\000\000\000\266&OF\000\000\000\000\000\000\000\000\266&OF\000\000\000\000\000\000\000\000\266&OF\000\000\000\000\000\000\000\000\266&OF\000\000\000\000\000\000\000\000\266&OF\000\000\000\000\031\207\017>\376kOF0=\253:\000\000\000\000\376kOF\000\000\000\000/\342c>\367kOF\357\346\010\265\315\314\314=\000lOF?\21165\000\000\000\000\000lOF\000\000\000\000\000\000\000\000\000lOF\000\000\000\000\n\327\243<\000lOF\000\000\000\000\004\301d>\000lOF\000\000\000\000\315\314L>\366kOF\234SI\265\n\327#<\000lOF\234SI5\000\000\000\000\000lOF\000\000\000\000\000\000\000\000\000lOF\000\000\000\000\311\203\200<\366kOF\234SI\265\000\000\000\000\366kOF\000\000\000\000\rvR@\241tOF\270(+9\000\000\000\000\241tOF\000\000\000\000\007\006\030?\250\240OFCSY:\000\000\000\000\250\240OF\000\000\000\0009\224\236>\\\212OFO\354\333\271A\202*@\022\274OF\016Cu:\000\000\000\000\022\274OF\000\000\000\000\315\314L>\270\276OF\010\026Q8h\355\t?\325\317OF=\263\2509\000\000\000\000\325\317OF\000\000\000\000\247\360\364=\220\322OF+KW8\315\314L>+\277OF\014\035\277\271\004w\200?\336\317OFP\230\2449\000\000\000\000\336\317OF\000\000\000\000\315\314L>{\277OFg|\241\271v\366\r@\001\315OF\351T\2059\000\000\000\000\001\315OF\000\000\000\000\316L\225=\037\300OF\300\371}\271\337\231\231?\367\317OF\036.\2349\315\314L>\270\302OF\322\202\202\271\000\000\000\000\270\302OF\000\000\000\000\000\000\000\000\270\302OF\000\000\000\000\000\000\000\000\270\302OF\000\000\000\000\000\000\000\000\270\302OF\000\000\000\000\315\314L>\032\314OF\245\36289\366\264\205;\\\314OF\025\023\2436\000\000\000\000\\\314OF\000\000\000\000\334F\223?\326\376OFB\276x:\000\000\000\000\326\376OF\000\000\000\000\000\000\000\000\326\376OF\000\000\000\000\000\000\000\000\326\376OF\000\000\000\000\000\000\000\000\326\376OF\000\000\000\000\000\000\000\000\326\376OF\000\000\000\000\000\000\000\000\326\376OF\000\000\000\000\220\031f>\272\025PF~]\3419\315\314L>R\337OF\320\335\205\272\216a\010;\256\010PFZ\276K:\2043\206?!\037PF|\003\3359\256\252B>\262\010PFm\310\334\271\221+39\024\370OF\220\216\243\271\000\000\000\000\024\370OF\000\000\000\000\000\000\000\000\024\370OF\000\000\000\000\000\000\000\000\024\370OF\000\000\000\000\000\000\000\000\024\370OF\000\000\000\000@.39\037\365OF\0144i\270\000\000\000\000\037\365OF\000\000\000\000\n\327#<\024\365OF\234SI\265\000\000\000\000\024\365OF\000\000\000\000\010\210\234?\177\tPFy\014\3119+\030\025>\235\365OF*\272\303\271\000\000\000\000\235\365OF\000\000\000\000\247\033\213:\\\365OF\027\270\237\266\000\000\000\000\\\365OF\000\000\000\000\315\314L>\205\365OFh\377I6\000\000\000\000\205\365OF\000\000\000\000\225\277\3263\205\365OF\000\000\000\000\315\314L>\205\365OF\000\000\000\000p\226u;\217\365OF\234SI5\000\000\000\000\217\365OF\000\000\000\000\315\314L>\205\365OF\234SI\265\346\211.=\217\365OF\234SI5\000\000\000\000\217\365OF\000\000\000\000\000\000\000\000\217\365OF\000\000\000\000\000\000\000\000\217\365OF\000\000\000\000\000\000\000\000\217\365OF\000\000\000\000>\230\"=\217\365OF\000\000\000\000\nu<\217\365OF\234SI5\000\000\000\000\217\365OF\000\000\000\000P\305\036=\217\365OF\000\000\000\000\000\000\000\000\217\365OF\000\000\000\000\000\000\000\000\217\365OF\000\000\000\000\000\000\000\000\217\365OF\000\000\000\000\000\000\000\000\217\365OF\000\000\000\000\n\327#<\217\365OF\000\000\000\200\000\000\000\000\217\365OF\000\000\000\000\000\000\000\000\217\365OF\000\000\000\000\301\250\024@\217\365OF\000\000\000\000\000\000\000\000\217\365OF\000\000\000\000\345\205\013<\205\365OF\234SI\265\000\000\000\000\205\365OF\000\000\000\000\000\000\000\000\205\365OF\000\000\000\000\260b\2069\217\365OF\234SI5\000\000\000\000\217\365OF\000\000\000\000\n\327#<\217\365OF\000\000\000\000jx\304:\217\365OF\000\000\000\000\031~\031=\217\365OF\000\000\000\000c/\253<\217\365OF\000\000\000\000\000\000\000\000\217\365OF\000\000\000\000\000\000\000\000\217\365OF\000\000\000\000\315\314L=\221\365OF\350R\0264\000\000\000\000\221\365OF\000\000\000\000\000\000\000\000\221\365OF\000\000\000\000\000\000\000\000\221\365OF\000\000\000\000\000\000\000\000\221\365OF\000\000\000\000\000\000\000\000\221\365OF\000\000\000\000!\247\026=\232\365OF\341\276#5\033Q:?a\373OF\232\232\3438\000\000\000\000a\373OF\000\000\000\000\000\000\000\000a\373OF\000\000\000\000\314x\332?\366\377OF\034{\2648\000\000\000\000\366\377OF\000\000\000\000\212\354Z>\013\366OF\033LC\271\000\000\000\000\013\366OF\000\000\000\000\000\000\000\000\013\366OF\000\000\000\000\000\000\000\000\013\366OF\000\000\000\000\000\000\000\000\013\366OF\000\000\000\000\000\000\000\000\013\366OF\000\000\000\000\000\000\000\000\013\366OF\000\000\000\000\000\000\000\000\013\366OF\000\000\000\000tK\204<\000\000PF+ D9\000\000\000\000\000\000PF\000\000\000\000\000\000\000\000\000\000PF\000\000\000\000u\002\022@\242\007PF\333J\0269.iu<\000\034PF\352\204\3109\000\000\000\000\000\034PF\000\000\000\000\000\000\000\000\000\034PF\000\000\000\000\000\000\000\000\000\034PF\000\000\000\000#\225k>\366\033PF\234SI\265\000\000\000\000\366\033PF\000\000\000\000\002\324\177>\201\033PF\322\362\017\267f#\\>\356\001PF2\253\373\271\000\000\000\000\356\001PF\000\000\000\000\000\000\000\000\356\001PF\000\000\000\000\000\000\000\000\356\001PF\000\000\000\000\225\277\3263\366\017PF\007%\2129\000\000\000\000\366\017PF\000\000\000\000@_\304:\000\020PF\234SI5\000\000\000\000\000\020PF\000\000\000\000*\251\273?\000\020PF\000\000\000\000\000\000\000\000\000\020PF\000\000\000\000?\305??\000\020PF\000\000\000\000\225j\231<\000\020PF\000\000\000\000\231jn\327\243<\000\020PF\234SI5>\206\205@\345\027PF\201k\0339\315\314L>\366\017PFv/\034\271\353s\225?\212\035PF\'\254\2059\000\000\000\000\212\035PF\000\000\000\000\315\314L>\366\037PF[\201>8\000\000\000\000\366\037PF\000\000\000\000=\007u?\000 PF\234SI5\231oE?\000 PF\000\000\000\200=\nW>\366\037PF\006FA\265\315\314L=\000 PF\006FA5\256\036\254>\000 PF\000\000\000\200\315\314L>\366\037PF\234SI\265\335\010M=\000 PF\234SI5un\024PF\351N\207\267\000\000\000\000\n\024PF\000\000\000\000o\022\003<)\024PF\201\252\0276\315\314L>{\024PF\202\251\3116\000\000\000\000{\024PF\000\000\000\000\000\000\000\000{\024PF\000\000\000\000\000\000\000\000{\024PF\000\000\000\000\376l;=H\033PFx\334\0059\000\000\000\000H\033PF\000\000\000\000\302\323w?\312\034PF\275\220\3557\352fu<\354\035PF\215,\2627\315\314L>\341\035PF\234SI\265\000\000\000\000\341\035PF\000\000\000\000\016\014f=S\037PF\265\252\3437M\037\256<q\037PF\354\234\0176H=\236<q\037PF\000\000\000\000\323\016f=q\037PF\000\000\000\000\000\000\000\000q\037PF\000\000\000\000\000\000\000\000q\037PF\000\000\000\000\000\000\000\000q\037PF\000\000\000\000`\n!>q\037PF\000\000\000\000\000\000\000\000q\037PF\000\000\000\000\373l\216<q\037PF\000\000\000\000\034e\365;q\037PF\000\000\000\000\000\000\000\000q\037PF\000\000\000\000\025\214\312?]!PF\216\177\0278\315\314L>\337\'PFV\r\0009\000\000\000\000\337\'PF\000\000\000\000\000\000\000\000\337\'PF\000\000\000\000\000\000\000\000\337\'PF\000\000\000\000\n\327\243<{.PF^\013\0029\315\314L>H,PF\020$-\270\000\000\000\000H,PF\000\000\000\000\000\000\000\000H,PF\000\000\000\000\n\327#<\354-PF\t\017\0018\000\000\000\000\354-PF\000\000\000\000\000\000\000\000\354-PF\000\000\000\000\315\314L=\341-PF\234SI\2659\027\230:\341-PF\000\000\000\000(\376\2348\354-PF\234SI5\000\000\000\000\354-PF\000\000\000\000\000\000\000\000\354-PF\000\000\000\000:\037\365?C4PFE\212\3718\000\000\000\000C4PF\000\000\000\000\000\000\000\000C4PF\000\000\000\000\327\231\231=\366CPF&k\2329\000\000\000\000\366CPF\000\000\000\000\000\000\000\000\366CPF\000\000\000\000C.D:\000DPF\234SI5\331_\"@\325FPF\364\254^8\225\277\3263\000HPFQ\366\2677\033M\351?\373HPFF\031\2327bk?:YPF\235z\3158\\\326\267=\000\\PF\r0Z8\000\000\000\000\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\000\332\324\226>\371[PF\357\346\010\265\315\314L=\000\\PF\357\346\0105\000\000\000\000\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\000\021\r\324>\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\000 \037\241>\366[PF\234SI\265\250\200\005<\000\\PF\234SI5\000\000\000\000\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\000Tt(@\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\000\000\000\000\000\000\\PF\000\000\000\00033\263>\366[PF\234SI\265\n\327#<\000\\PF\234SI5\212\035\217?\000\\PF\000\000\000\000\206#a<{\\PF\265\376\0267Q7\311<\221aPFa\001\3108\000\000\000\000\221aPF\000\000\000\000\000\000\000\000\221aPF\000\000\000\000\000\000\000\000\221aPF\000\000\000\000\000\000\000\000\221aPF\000\000\000\000\000\000\000\000\221aPF\000\000\000\000\000\000\000\000\221aPF\000\000\000\000\000\000\000\000\221aPF\000\000\000\000\000\000\000\000\221aPF\000\000\000\000\000\000\000\000\221aPF\000\000\000\000\000\000\000\000\221aPF\000\000\000\000\000\000\000\000\221aPF\000\000\000\000\315\314L>RbPF\375\271l7\000\000\000\000RbPF\000\000\000\000\000\000\000\000RbPF\000\000\000\000\000\000\000\000RbPF\000\000\000\000\343\323-=\\bPF\234SI5\000\000\000\000\\bPF\000\000\000\000\2505\265?\\bPF\000\000\000\200C\355x?\235cPF\353\366\3047}\226#?\000dPF\355\232\3636\000\000\000\000\000dPF\000\000\000\000\000\000\000\000\000dPF\000\000\000\000\000\000\000\000\000dPF\000\000\000\000\225\341\217>\000dPF\000\000\000\200\000\000\000\000\000dPF\000\000\000\000\000\000\000\000\000dPF\000\000\000\000\000\000\000\000\000dPF\000\000\000\000\000\000\000\000\000dPF\000\000\000\000\000\000\000\000\000dPF\000\000\000\000\000\000\000\000\000dPF\000\000\000\000\n\327#<\366cPF\234SI\265\000\000\000\000\366cPF\000\000\000\000\361\021\261<\000dPF\234SI5\t[A<\000dPF\000\000\000\000\271\376\222=\000dPF\000\000\000\000\231B\027>\000dPF\000\000\000\000\322?d>\367cPF\r\3323\265\000\000\000\000\367cPF\000\000\000\000\013\265\356?\006ePFs\331\2467D\272\205?qfPF\261\267\3367\000\000\000\000qfPF\000\000\000\000\000\000\000\000qfPF\000\000\000\000\000\000\000\000qfPF\000\000\000\000\000\000\000\000qfPF\000\000\000\000\000\000\000\000qfPF\000\000\000\000\000\000\000\000qfPF\000\000\000\000\000\000\000\000qfPF\000\000\000\000\315\314L>\\fPF\315\002\314\265\000\000\000\000\\fPF\000\000\000\000\000\000\000\000\\fPF\000\000\000\000\315\314L>qfPFj\244\3065\000\000\000\000qfPF\000\000\000\000\000\000\000\000qfPF\000\000\000\000\2107\002<{fPF\234SI5\000\000\000\000{fPF\000\000\000\000\000\000\000\000{fPF\000\000\000\000e\021u;{fPF\000\000\000\200\000\000\000\000{fPF\000\000\000\000\000\000\000\000{fPF\000\000\000\000\000\000\000\000{fPF\000\000\000\000\256G\341={fPF\000\000\000\000\315\314\314<qfPF\234SI\265\000\000\000\000qfPF\000\000\000\000_\230L?{fPF\234SI5\000\000\000\000{fPF\000\000\000\000\000\000\000\000{fPF\000\000\000\000\000\000\000\000{fPF\000\000\000\000\000\000\000\000{fPF\000\000\000\000\000\000\000\000{fPF\000\000\000\000\000\000\000\000{fPF\000\000\000\000\033\365I@zfPF\225\277V\263\000\000\000\000zfPF\000\000\000\000\000\000\000\000zfPF\000\000\000\000\000\000\000\000zfPF\000\000\000\000\000\000\000\000zfPF\000\000\000\000\000\000\000\000zfPF\000\000\000\000\000\000\000\000zfPF\000\000\000\000\000\000\000\000zfPF\000\000\000\000\000\000\000\000zfPF\000\000\000\000\000\000\000\000zfPF\000\000\000\000e\021u;{fPF\225\277V3\000\000\000\000{fPF\000\000\000\000\3064z?\206fPF\371\035\\5rv\253?\362}PF>(\3469\000\000\000\000\362}PF\000\000\000\000\000\000\000\000\362}PF\000\000\000\000\000\000\000\000\362}PF\000\000\000\000\000\000\000\000\362}PF\000\000\000\000\342\010\314=\207\212PFJ.w9\243\350\370?a\220PFD\371\3458\000\000\000\000a\220PF\000\000\000\000\000\000\000\000a\220PF\000\000\000\000\'o\223?\205\217PF\366#\207\267\000\000\000\000\205\217PF\000\000\000\000\000\000\000\000\205\217PF\000\000\000\000X\032\370;\354oPFb&\033\272\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000`@\362nPF\224\027\231\267\000\000\000\000\362nPF\000\000\000\000\277\016\024@\256lPF\321!2\270\000\000\000\000\256lPF\000\000\000\000\252\252D=\256lPF\000\000\000\200\315\314L>\244lPF\234SI\265\215\227.>\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\315\314L>\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\242\3077<\256lPF\234SI5\232\231\331@\244lPF\234SI\265\000\000\000\000\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\341z\224>\256lPF\234SI5CX\211<\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\241\326\224>\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\n\327#<\256lPF\000\000\000\000\007\034\024=\244lPF\234SI\265\000\000\000\000\244lPF\000\000\000\000\022YL=\256lPF\234SI5\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000$\227\377;\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\217\302\365<\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\n\327#<\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\0007\336B=\244lPF\234SI\2654\021\226>\256lPF\234SI5\000\000\000\000\256lPF\000\000\000\000\253Q\204>\244lPF\234SI\265\372\355\353:\256lPF\234SI5@\014\235:\244lPF\234SI\265\000\000\000\000\244lPF\000\000\000\000\232\231\231>\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\342\nC=\256lPF\234SI5\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\n\327\243<\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\n\327\243<\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\nhr?\256lPF\000\000\000\200\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\0005\323\234:\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\177\377\004@\244lPF\234SI\265\000\000\000\000\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\032A\255=\244lPF\000\000\000\200\000\000\000\000\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\000\000\000\000\244lPF\000\000\000\000\nh\312?\256lPF\234SI5\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000_&\031=\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\336\016C<\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\000\000\000\000\256lPF\000\000\000\000\014\223\231?\256lPF\000\000\000\200\036x\302=\250mPF`\303\2317\n\327#<\000nPF{\025\3276\000\000\000\000\000nPF\000\000\000\000\000\000\000\000\000nPF\000\000\000\000\226\010\365;\000nPF\000\000\000\000\000\000\000\000\000nPF\000\000\000\000\n\327#<\366mPF\234SI\265\000\000\000\000\366mPF\000\000\000\000\000\000\000\000\366mPF\000\000\000\000o\022\203:\366mPF\000\000\000\000@\377g=\000nPF\234SI5\265T\234:\000nPF\000\000\000\000\000\000\000\000\000nPF\000\000\000\000\000\000\000\000\000nPF\000\000\000\000\364\375T<\000nPF\000\000\000\000\000\000\000\000\000nPF\000\000\000\000\000\000\000\000\000nPF\000\000\000\000\254P\310=\000nPF\000\000\000\000\000\000\000\000\000nPF\000\000\000\000\000\000\000\000\000nPF\000\000\000\000\315\314L=\000nPF\000\000\000\000\000\000\000\000\000nPF\000\000\000\000h%\031=\000nPF\000\000\000\000\n\327#<\000nPF\000\000\000\000\334\274\007@VoPF\n\342\3217\000\000\000\000VoPF\000\000\000\000\000\000\000\000VoPF\000\000\000\000\000\000\000\000VoPF\000\000\000\0001P\204:\354oPF\327\34077\346=%>\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\n\327#<\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\217\302\365<\354oPF\000\000\000\000\231\323\t>\354oPF\000\000\000\000R\006u;\354oPF\000\000\000\000\256G\201?\341oPFj\244F\265\000\000\000\000\341oPF\000\000\000\000\000\000\000\000\341oPF\000\000\000\000\263\344\261@\341oPF\000\000\000\000o\022\203:\341oPFw\314+\262\n\327#<\354oPF\234SI5\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\000\000\000\000\354oPF\000\000\000\000\355\r\206?\362oPFY\331\0005\220\277\202?\366oPF\204\364\2204\367#\231=\366oPF\000\000\000\000\000\000\000\000\366oPF\000\000\000\000\000\000\000\000\366oPF\000\000\000\000,\220\025@\366oPF\000\000\000\200\000\000\000\000\366oPF\000\000\000\000E\014D?\366oPFw\314\253\262\016\331\032@\366oPFw\314+3$Y\007@$\216PF\306D\024:\264K\277>3\224PF\243\346\3558;\366\020?\242\227PF\245\363\2068\000\000\000\000\242\227PF\000\000\000\000\000\000\000\000\242\227PF\000\000\000\000\000\000\000\000\242\227PF\000\000\000\000\000\000\000\000\242\227PF\000\000\000\000\273\316\354?r\230PFgY\1777\000\000\000\000r\230PF\000\000\000\000\000\000\000\000r\230PF\000\000\000\000\206Z\323?\036\301PFt\247G:\000\000\000\000\036\301PF\000\000\000\000\000\000\000\000\036\301PF\000\000\000\0000\205\200?:\306PFbg\3108\000\000\000\000:\306PF\000\000\000\000\000\000\000\000:\306PF\000\000\000\000\225Z\020@|\347PF\334##:\000\000\000\000|\347PF\000\000\000\000\000\000\000\000|\347PF\000\000\000\000\340u\312=\265\356PF\206\231\r9\000\000\000\000\265\356PF\000\000\000\000\000\000\000\000\265\356PF\000\000\000\000\000\000\000\000\265\356PF\000\000\000\000\000\000\000\000\265\356PF\000\000\000\000\000\000\000\000\265\356PF\000\000\000\000\000\000\000\000\265\356PF\000\000\000\000\006\237\000?\202\003QF\350\337\3139\000\000\000\000\202\003QF\000\000\000\000\225\027\211>\205\007QFRI\2358\000\000\000\000\205\007QF\000\000\000\000\377\346t?\205\007QF\000\000\000\000\230\235\032?\205\007QF\000\000\000\200\324+\345?\025\010QFO\250/7\032\277\222?\006\020QF\356\253\0339/\252~?\253\031QF\301\366<9\000\000\000\000\253\031QF\000\000\000\000\000\000\000\000\253\031QF\000\000\000\000\000\000\000\000\253\031QF\000\000\000\000\000\000\000\000\253\031QF\000\000\000\000\000\000\000\000\253\031QF\000\000\000\000\000\000\000\000\253\031QF\000\000\000\000\000\000\000\000\253\031QF\000\000\000\000\n\327#<\244)QF\204j\2349\000\000\000\000\244)QF\000\000\000\000\000\000\000\000\244)QF\000\000\000\000\000\000\000\000\244)QF\000\000\000\000\250\230\030==.QF\224*\2648a%t<\0000QF\345\335\t8\000\000\000\000\0000QF\000\000\000\000\032v\304>\0000QF\000\000\000\000C\025\033A\235;QF;bc9\000\000\000\000\235;QF\000\000\000\000\000\000\000\000\235;QF\000\000\000\000\000\000\000\000\235;QF\000\000\000\000\000\000\000\000\235;QF\000\000\000\000\000\000\000\000\235;QF\000\000\000\000\000\000\000\000\235;QF\000\000\000\000P\014w?\000TQF\375\263\3569\000\000\000\000\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000e\373\363;\000TQF\000\000\000\200\000\000\000\000\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000\366 \300?\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000\273<#<\366SQF\234SI\265\247y\307>\000TQF\234SI5\000\000\000\000\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000\n\327#<\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000\202\353~?\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000\241\'\n<\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000\2505\335?\366SQF\234SI\265\000\000\000\000\366SQF\000\000\000\000\217\302\365<\000TQF\234SI5\000\000\000\000\000TQF\000\000\000\000\315\314L=\000TQF\000\000\000\200\000\000\000\000\000TQF\000\000\000\000\302\253\214>\000TQF\000\000\000\000\000\000\000\000\000TQF\000\000\000\000X\250\255?4VQF\207m,8\n\327#<\000XQFM\255\0148\000\000\000\000\000XQF\000\000\000\000\000\000\000\000\000XQF\000\000\000\000\000\000\000\000\000XQF\000\000\000\000\000\000\000\000\000XQF\000\000\000\000\000\000\000\000\000XQF\000\000\000\000\000\000\000\000\000XQF\000\000\000\000\020\3716<\000XQF\000\000\000\000\000\000\000\000\000XQF\000\000\000\000\000\000\000\000\000XQF\000\000\000\000\3755t=\000XQF\000\000\000\000\000\000\000\000\000XQF\000\000\000\000\000\000\000\000\000XQF\000\000\000\000\362\\\030B\255_QF\0208\0269=u\036>\366_QF\301\200\2616\250&\243>\000`QF\006FA5S\004\246>-`QF,r[6E\361\216@u\243QF3\207\244:\000\000\000\000u\243QF\000\000\000\000\000\000\000\000u\243QF\000\000\000\000\000\000\000\000u\243QF\000\000\000\000\251\244.@^\372QF\016C\324:4Z\331@\'$RF\270\303K:oK\016@\353MRFO\205K:r\306\027?\370ORF\n\343\0378\237\315\204?\000PRF\350R\0265\243\230\010=\205PRFb\021\"7\000\000\000\000\205PRF\000\000\000\000h\023J@0qRF\371\016\037:\000\000\000\0000qRF\000\000\000\000>\216\275=\\~RF\206)\2009\027\013G:=\204RF\324\354\3448\000\000\000\000=\204RF\000\000\000\000\315\314L>=\204RF\000\000\000\000\000\000\000\000=\204RF\000\000\000\000\350\237\006@\"\213RF\345\034\0069\315\314L>=\204RF6\032\006\271x\246\257@\311\231RF\211\225\3219\315\314L=\000\260RF\031\013\3309\315\314L>\000\252RF\205I\351\270\000\000\000\000\000\252RF\000\000\000\000\251\315\320>\000\260RFBT\35188@O>\366\257RFj\244F\265\000\000\000\000\366\257RF\000\000\000\000\300y\321>\000\260RFj\244F5\000\000\000\000\000\260RF\000\000\000\000\266\003\237>\366\257RF\006FA\265\000\000\000\000\366\257RF\000\000\000\000\033\360\200?\000\260RF\006FA5\315\314L>\366\257RFj\244F\265U9\030?\366\257RF\000\000\000\000\000\000\000\000\366\257RF\000\000\000\000\234\034Z@\377\257RF\r\33235\233e\201>\000\260RF\350R\2263\000\000\000\000\000\260RF\000\000\000\000\315\314L>\366\257RF8\365C\265\026\373\333?c\300RFS\251\2379\000\000\000\000c\300RF\000\000\000\000\206\036\026?\302\307RF\023O\0179X\273\270<\217\307RF\270\241w\266\000\000\000\000\217\307RF\000\000\000\000\217\234]@\327\305RFj\241\005\270\222\373\022>\000\260RFO7\324\271\000\000\000\000\000\260RF\000\000\000\000Yu%@\366\257RFj\244F\265\000\000\000\000\366\257RF\000\000\000\000s\006\306?\367\257RF$9\3543\000\000\000\000\367\257RF\000\000\000\000\315\314L>\366\257RF$9\354\263PU\231@\025\253RF\336\237\275\270\030I\221?i\206RFX?2\272y\263\252?\217\200RFr\265\343\270\002+\207<\n\200RF|\273!\267\240ex?\000\200RFj\244F\265\272\312\017?\n\200RFj\244F5el\214=\000\200RF8\365C\265\000\000\000\000\000\200RF\000\000\000\000\000\000\000\000\000\200RF\000\000\000\000\000\000\000\000\000\200RF\000\000\000\000\000\000\000\000\000\200RF\000\000\000\000\310\243\227=\n\200RF8\365C5\000\000\000\000\n\200RF\000\000\000\000\000\000\000\000\n\200RF\000\000\000\000\232\231\031>\n\200RF\000\000\000\000\000\000\000\000\n\200RF\000\000\000\000\000\000\000\000\n\200RF\000\000\000\000\000\000\000\000\n\200RF\000\000\000\000E:\021A\204oRF\336\305\240\271\337k\220>\000XRFa\333\344\271\000\000\000\000\000XRF\000\000\000\000o\360\025@ViRF\275\314\2509#\273\362<\363gRF.\027\330\267\254N\305=\024PRF>U\350\2718\355\220;\024PRF\000\000\000\200\000\000\000\000\024PRF\000\000\000\000\000\000\000\000\024PRF\000\000\000\000}\013i>\024PRF\000\000\000\000|<\333:\nPRFj\244F\265\300\341\264@iJRF\263\\\333\270\r\350\224=\366\'RF\366\276\'\272\250\200\005<\354\'RFj\244F\265\n\327#<\354\'RF\000\000\000\000-\334\275>\366\'RFj\244F5\000\000\000\000\366\'RF\000\000\000\000\000\000\000\000\366\'RF\000\000\000\000\202_\355@\366\'RF\000\000\000\200\250\2610>\366\'RF\000\000\000\000\304%\376?\375\'RF!\226\0135\000\000\000\000\375\'RF\000\000\000\000\314\310\027=\266LRF\324\3552:\000\000\000\000\266LRF\000\000\000\000\000\000\000\000\266LRF\000\000\000\000\000\000\000\000\266LRF\000\000\000\000\000\000\000\000\266LRF\000\000\000\000\206~\362=\200RRF\361\241\3418M\334\251?\037}RF\261\200O:\000\000\000\000\037}RF\000\000\000\000\000\000\000\000\037}RF\000\000\000\000\000\000\000\000\037}RF\000\000\000\000\000\000\000\000\037}RF\000\000\000\000\000\000\000\000\037}RF\000\000\000\000h\221m=\366\177RF\270\364\\8\334\027\276>\r\201RF\005\364\2517\226\000_A(pRF\370c\244\271\000\000\000\000(pRF\000\000\000\000\000\000\000\000(pRF\000\000\000\000\000\000\000\000(pRF\000\000\000\000U\301h?\000PRF\360w\034\272\000\000\000\000\000PRF\000\000\000\000\232\231\231>\366ORFj\244F\265\000\000\000\000\366ORF\000\000\000\000\000\000\000\000\366ORF\000\000\000\000\226!\016>\000PRFj\244F5\000\000\000\000\000PRF\000\000\000\000\000\000\000\000\000PRF\000\000\000\000\000\000\000\000\000PRF\000\000\000\000\177\244\310?\366ORFj\244F\265\000\000\000\000\366ORF\000\000\000\000\304\320\354@\273\233RF\323u\270:\365\250r<\366wRF\264\352-\272\000\000\000\000\366wRF\000\000\000\000\000\000\000\000\366wRF\000\000\000\000\000\000\000\000\366wRF\000\000\000\000\000\000\000\000\366wj\244F5\000\000\000\000\354\246RF\000\000\000\000&\326\265<\354\246RF\000\000\000\200&\3265<\354\246RF\000\000\000\000\277u\200>\354\246RF\000\000\000\000\000\000\000\000\354\246RF\000\000\000\0003cl=\354\246RF\000\000\000\000\000\000\000\000\354\246RF\000\000\000\000\000\000\000\000\354\246RF\000\000\000\000\000\000\000\000\354\246RF\000\000\000\000\266%\2338\354\246RF\000\000\000\000\251\264\254@(\246RF\343\017m\267\001Md?f\236RF\317\333\026\271\315\314L=\324lRF\211\000q\272\2707\250?\315bRF\377;C\271o\022\003<H\236RF\202\300\220:\000\000\000\000H\236RF\000\000\000\000\000\000\000\000H\236RF\000\000\000\000\000\000\000\000H\236RF\000\000\000\000W\236\027=\232\207RFX\211\334\271\000\000\000\000\232\207RF\000\000\000\000\000\000\000\000\232\207RF\000\000\000\000\000\000\000\000\232\207RF\000\000\000\000H\006a>\366zRF+\354u\271ZJR<\354zRFj\244F\265\000\000\000\000\354zRF\000\000\000\000\371\316\021ANqRF\237\033;\271\000\000\000\000NqRF\000\000\000\000\312\316S>\000dRF\301{\201\271\000\000\000\000\000dRF\000\000\000\000\n\327\243=\000dRF\000\000\000\000\000\000\000\000\000dRF\000\000\000\000\000\000\000\000\000dRF\000\000\000\000\000\000\000\000\000dRF\000\000\000\000\000\000\000\000\000dRF\000\000\000\000\026\261\343>\000dRF\000\000\000\200\215\227b@\ndRFj\244F5\000\000\200?\000dRFj\244F\265d\276\204=\ndRFj\244F5\233t\022@\374cRF\357\346\210\265\000\000\000\000\374cRF\000\000\000\000b\3466A\315bRF\227\267\270\267\315\314L=\315bRFw\314\2532\000\000\000\000\315bRF\000\000\000\000\204pHA\327IRF\335\371\362\271\000\000\000\000\327IRF\000\000\000\000\202*\360@laRFr\257\3459\n\327\243<\315FRF\231\226\001\272\031:\266=%NRF\246\016\0179\"f\2338=TRF\345u\3558\000\000\000\000=TRF\000\000\000\000\000\000\000\000=TRF\000\000\000\000w\\\265>4(RFTfV\272\n\327#=\244)RF\303$\3407\250\216[?Q\001RF\300xD\272T\354l@\260(RF-\373?:\214\310C=\306(RF\230\t\3205\252}V>\313(RF\225\277\3264\006\016\216>\232(RF\207\227q\266\227KS>\232(RF\000\000\000\000\000\000\000\000\232(RF\000\000\000\000\027\001\355@\311pRF\251\335\257:s\364G=K(RF\205`\260\272\024\221,>\232(RF\241B\2776\225\277\3263\232(RF\000\000\000\000\017V\256<\217(RFj\244F\265\000\000\000\000\217(RF\000\000\000\000B\n\360?\232(RFj\244F5\000\000\000\000\232(RF\000\000\000\000\000\000\000\000\232(RF\000\000\000\000\000\000\000\000\232(RF\000\000\000\000\000\000\000\000\232(RF\000\000\000\000\000\000\000\000\232(RF\000\000\000\000=`\257?\010\031RF\217\262\227\271\000\000\000\000\010\031RF\000\000\000\000\000\000\000\000\010\031RF\000\000\000\000\000\000\000\000\010\031RF\000\000\000\000y*\355@\021LRF;\272x:5e\247@*\017RF\310E\224\272\202\230Z=\366\377QF\270<\224\271\n\327#<\354\377QFj\244F\265\n\327\243<\354\377QF\000\000\000\000\014m#?\354\377QF\000\000\000\200\000\000\000\000\354\377QF\000\000\000\000-\201\032?\341\377QFj\244F\265\000\000\000\000\341\377QF\000\000\000\000\000\000\000\000\341\377QF\000\000\000\000B\n\360?\341\377QF\000\000\000\2007\315T=\354\377QFj\244F5\000\000\000\000\354\377QF\000\000\000\000\333\253\207@\352\377QF\006F\301\263K\370,Aw\314QF2\341z\272\000\000\000\000w\314QF\000\000\000\000\350\314L=\n\246QF\t\215;\272\217\302u=\n\246QF\000\000\000\000\000\000\000\000\n\246QF\000\000\000\0009\224\236>\300\225QF\025\037\237\271\022\355\033?\250~QF\014\262\341\271\315\314\314=\244~QF\204\364\220\264\260\n\256>\256~QF\234SI5\000\000\000\000\256~QF\000\000\000\000\027\305\024>\244~QF\234SI\265-\305\377<\256~QF\234SI5\261\311s<\256~QF\000\000\000\000\000\000\000\000\256~QF\000\000\000\000\335\327$@\251~QF?\211\266\264\000\000\000\000\251~QF\000\000\000\000oC\274>\244~QF\225\277\326\264\n\327#<\256~QF\234SI5\000\000\000\000\256~QF\000\000\000\000\000\000\000\000\256~QF\000\000\000\000xL\271?\256~QF\000\000\000\200\000\000\000\000\256~QF\000\000\000\000\3064z?\244~QFj\244F\265\375\022n@\256~QF\234SI5\000\000\000\000\256~QF\000\000\000\000\n\327\243<\256~QF\000\000\000\000\000\000\000\000\256~QF\000\000\000\000\000\000\000\000\256~QF\000\000\000\000\000\000\000\000\256~QF\000\000\000\000\000\000\000\000\256~QF\000\000\000\000\375\022\356?\256~QF\000\000\000\200\000\000\000\000\256~QF\000\000\000\000\237\221\251>\256~QF\000\000\000\200\304B\335?\256~QF\000\000\000\000\000\000\000\000\256~QF\000\000\000\000\000\000\000\000\256~QF\000\000\000\000\000\000\000\000\256~QF\000\000\000\000\000\000\000\000\256~QF\000\000\000\000\000\000\000\000\256~QF\000\000\000\000\000\000\000\000\256~QF\000\000\000\000\000\000\000\000\256~QF\000\000\000\000\000\000\000\000\256~QF\000\000\000\000\217\324\305>\256~QF\000\000\000\000\217\324\305>r\177QF\025\277o75\204\274<\000\200QF\020$-7;\337G@\000\200QF\000\000\000\000\301\312\201?\000\210QF\325g\0349Z\215\257>\326\257QF\272\255B:\030u\241?\000\260QF\377\261N6\312E\211<\000\260QF\000\000\000\000\000\000\000\000\000\260QF\000\000\000\000?o\243>\000\260QF\000\000\000\200\000\000\000\000\000\260QF\000\000\000\000\000\000\000\000\000\260QF\000\000\000\000\302\215\211=\000\260QF\000\000\000\000?:\325?\003\375QF\206\t\274:\n\327#=\256\377QF\302TP8\203?\206?\256\377QF\000\000\000\200\315\314L>\244\377QFj\244F\265\n\327#<\256\377QFj\244F5\000\000\000\000\256\377QF\000\000\000\000\000\000\000\000\256\377QF\000\000\000\000\000\000\000\000\256\377QF\000\000\000\000\000\000\000\000\256\377QF\000\000\000\000\000\000\000\000\256\377QF\000\000\000\000\000\000\000\000\256\377QF\000\000\000\000\n\327#<\270\377QFj\244F5W!\345=\337\377QF\326;;6\022\252\343?\366\377QF\\|\34151\241\2338\366\377QF\000\000\000\000\000\000\000\000\366\377QF\000\000\000\000\206\324\305>\366\377QF\000\000\000\000\314\330\210?\364\377QF\350R\026\264\000\000\000\000\364\377QF\000\000\000\000\000\000\000\000\364\377QF\000\000\000\000\355\204r>\366\377QF\350R\0264\335{\227<\366\377QF\000\000\000\000\n\327#<\366\377QF\000\000\000\000M\241\363;\366\377QF\000\000\000\000\355\306\335?\234\037RFUT\032:\000\000\000\000\234\037RF\000\000\000\000\000\000\000\000\234\037RF\000\000\000\000\000\000\000\000\234\037RF\000\000\000\000\000\000\000\000\234\037RF\000\000\000\000\177\370\227<\257\nRFh\371\313\271\000\000\000\000\257\nRF\000\000\000\000\000\000\000\000\257\nRF\000\000\000\000\001\030\3179H&RF\240\213\006:\373lk=H&RF\000\000\000\000\000\000\000\000H&RF\000\000\000\000\256\021d?H&RF\000\000\000\000\000\000\000\000H&RF\000\000\000\000\000\000\000\000H&RF\000\000\000\000\007\013}>?&RF\260\017!\265\000\000\000\000?&RF\000\000\000\000`7\216<=&RF\350R\026\264\000\000\000\000=&RF\000\000\000\000$\227\377<=&RF\000\000\000\000\000\000\000\000=&RF\000\000\000\000\000\000\000\000=&RF\000\000\000\000aTF@H&RFj\244F5NFs=H&RF\000\000\000\000\214\344E?H&RF\000\000\000\000\000\000\000\000H&RF\000\000\000\000\000\000\000\000H&RF\000\000\000\000\000\000\000\000H&RF\000\000\000\000\000\000\000\000H&RF\000\000\000\000\000\000\000\000H&RF\000\000\000\000\254\213\333<=&RFj\244F\265\206\324\305>H&RFj\244F5\315\314L>=&RFj\244F\265CT!==&RF\000\000\000\200\315\314L=H&RFj\244F5\000\000\000\000H&RF\000\000\000\000\000\000\200>?&RF~`\036\265\000\000\000\000?&RF\000\000\000\000\000\000\000\000?&RF\000\000\000\000A\310c?>&RF!\226\013\264\315\314L>=&RFw\314+\262\n\327\243<H&RFj\244F5\000\000\000\000H&RF\000\000\000\000$\310s<=&RFj\244F\265\000\000\000\000=&RF\000\000\000\000\000\000\000\000=&RF\000\000\000\000\217\302\365<H&RFj\244F5\375n\300?@&RF\204\364\020\265\224\002\202>H&RF\204\364\0205\246\233D:=&RFj\244F\265\002+\007=/\"RF\263\032\236\270\367(\377>\037\000RF\004\000&\272\343\245\233<6\374QFA\201\230\270\000\000\000\0006\374QF\000\000\000\000aJ\327>\224\277QF\013\326\223\272\235\225\022>\210\361QF\261\334s:B`\255?\n\276QF\242#{\272\000\000\000\000\n\276QF\000\000\000\000\315\314L=\n\276QF\000\000\000\000\000\000\000\000\n\276QF\000\000\000\000\000\000\000\000\n\276QF\000\000\000\000\000\000\000\000\n\276QF\000\000\000\000\367\363R?\000\276QFj\244F\265\000\000\000\000\000\276QF\000\000\000\000\n\327\243<\n\276QFj\244F5-\"1>\n\276QF\000\000\000\000\n0\230=\n\276QF\000\000\000\200\000\000\000\000\n\276QF\000\000\000\000\342\nC=\000\276QFj\244F\265\341\326\2338\n\276QFj\244F5\000\000pA9\274QF\243\017\016\270\026\027\\>\n\260QF\364\343m\271\352\222\024=\n\260QF\000\000\000\200\036\3367?\n\260QFw\314+\262\000\000\000\000\n\260QF\000\000\000\000\000\000\000\000\n\260QF\000\000\000\000\314x\332?\213\217QF\006\261\036\272}\307\257?\265tQF\212\"\003\272\000\000\000\000\265tQF\000\000\000\000\005\321\237>\ndQF=\370\242\271\000\000\000\000\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\022\213s<\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\'\320\213>\003dQF\266\243\023\265\000\000\000\000\003dQF\000\000\000\000+\'\240>\ndQF\266\243\0235\375\005\221?\000dQF\234SI\265\217\302u<\000dQF\000\000\000\000\000\000\000\000\000dQF\000\000\000\000\000\000\000\000\000dQF\000\000\000\000\330$S>\000dQF\000\000\000\000\325\367\255<\ndQF\234SI5\331\255\320=\ndQFw\314\253\262\340\372\373>\ndQFw\314\2532\000\000\000\000\ndQF\000\000\000\000\225\325\221<\000dQF\234SI\265\000\000\000\000\000dQF\000\000\000\000\000\000\000\000\000dQF\000\000\000\000\000\000\000\000\000dQF\000\000\000\000\000\000\000\000\000dQF\000\000\000\000\315\314L>\000dQF\000\000\000\200\000\000\000\000\000dQF\000\000\000\000\000\000\000\000\000dQF\000\000\000\000\000\000\000\000\000dQF\000\000\000\0000\240y?\ndQF\234SI5j\360\304<\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\263\214j?\ndQF\000\000\000\000\322\215\276>\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\202\274*<\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000E\244\201<\000dQF\234SI\265\000\000\000\000\000dQF\000\000\000\000\000\000\000\000\000dQF\000\000\000\000\000\000\000\000\000dQF\000\000\000\000\n\327\243<\ndQF\234SI5\000\000\000\000\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\260\344\211;\000dQF\234SI\265\000\000\000\000\000dQF\000\000\000\000)\313\220>\000dQF\000\000\000\200o\022\003<\000dQF\000\000\000\000\207\0269?\000dQF\000\000\000\000\177\264\032=\ndQF\234SI5/\341\253=\ndQF\000\000\000\000\000\000\000\000\ndQF\000\000\000\000\002\024\007@3`QF\0208\226\270\000\000\000\0003`QF\000\000\000\000\n\327#<\n`QF\317\247H\266\322\210\333;\n`QF\000\000\000\000\000\000\000\000\n`QF\000\000\000\000\000\000\000\000\n`QF\000\000\000\000\370Sc>5SQFs\007{\271b\033\323=\3429QFS\313\367\271\014\336\340<\3240QF\263E1\271\207\034\344=8\013QF0\0258\272\232\231\231>\024\030QF\n\371{9\316\2102?\024\030QF\000\000\000\000CF\273?\365\341PF\343\206\204\272\000\000\000\000\365\341PF\000\000\000\000\000\000\000\000\365\341PF\000\000\000\000\na?\354\323PF\000\000\000\000\315\314\314=\354\323PF\000\000\000\000\000\000\000\000\354\323PF\000\000\000\000\335\025\\>\354\323PF\225\277V3\000\000\000\000\354\323PF\000\000\000\000\000\000\000\000\354\323PF\000\000\000\000\000\000\000\000\354\323PF\000\000\000\000\000\000\000\000\354\323PF\000\000\000\000*\0274@\324\323PF$9\354\265\000\000\000\000\324\323PF\000\000\000\000\210u\311?4\267PF\311^\014\272\340-\220:\341\306PF\323\324\2319\000\000\000\000\341\306PF\000\000\000\000\000\000\000\000\341\306PF\000\000\000\000\232\2319?\003\230PF\303\337e\272\000\000\000\000\003\230PF\000\000\000\000\000\000\000\000\003\230PF\000\000\000\000\000\000\000\000\003\230PF\000\000\000\000\n\327\243<\n\230PF!\226\0135\353{\204?\001\230PF\242\347;\265\000\000\000\000\001\230PF\000\000\000\000\n\327#<\n\230PF\242\347;5\000\000\000\000\n\230PF\000\000\000\000\000\000\000\000\n\230PF\000\000\000\000\000\000\000\000\n\230PF\000\000\000\000\240\255\2348\n\230PF\000\000\000\000\000\000\000\000\n\230PF\000\000\000\000\000\000\000\000\n\230PF\000\000\000\000\266\355\241<\000\230PF\234SI\265\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\323\322=?\n\230PF\234SI5\000\000\000\000\n\230PF\000\000\000\000\312\247x=\000\230PF\234SI\265\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\030[\214?\215\227PF\240C\r\267\000\000\000\000\215\227PF\000\000\000\000\000\000\000\000\215\227PF\000\000\000\000\000\000\000\000\215\227PF\000\000\000\000\000\000\000\000\215\227PF\000\000\000\000\000\000\000\000\215\227PF\000\000\000\000\000\000\000\000\215\227PF\000\000\000\000\000\000\000\000\215\227PF\000\000\000\000\000\000\000\000\215\227PF\000\000\000\000\000\000\000\000\215\227PF\000\000\000\000\024\343\204?*oPF\033CF\272\030\316\230:\244lPF@YF\270\000\000\000\000\244lPF\000\000\000\000\344\307\213>\240iPF\343\017m\270\000\000\000\000\240iPF\000\000\000\000\000\000\000\000\240iPF\000\000\000\000\274\347\266?\274VPF\320\243\271\271\000\000\000\000\274VPF\000\000\000\000\000\000\000\000\274VPF\000\000\000\000\000\000\000\000\274VPF\000\000\000\000\006\022\264>\nHPF\244o\220\271\000\000\000\000\nHPF\000\000\000\000\000\000\000\000\nHPF\000\000\000\000\000\000\000\000\nHPF\000\000\000\000\000\000\000\000\nHPF\000\000\000\000\000\000\000\000\nHPF\000\000\000\000\000\000\000\000\nHPF\000\000\000\000\000\000\000\000\nHPF\000\000\000\0005\354BAG\264OF2\2365\273\252\232\204<\356\372OFt)\256:\000\000\000\000\356\372OF\000\000\000\000\000\000\000\000\356\372OF\000\000\000\000\n\327#<\366\367OF\330\337i\270\\\231\231=\021\001PF\204V39\'\240\211<\3321PF\320-p:U\177\317?/FPFa\001\3109\3664\365:\024HPF\311\020\0258\000\000\000\000\024HPF\000\000\000\000\000\000\000\000\024HPF\000\000\000\000\000\000\000\000\024HPF\000\000\000\000\000\000\000\000\024HPF\000\000\000\000\000\000\000\000\024HPF\000\000\000\000\345\257x?\240\223PF\231\265\271:\000\000\000\000\240\223PF\000\000\000\000\204\262W:{pPF\021\215,\272\271VE?{pPF\000\000\000\000\000\000\000\000{pPF\000\000\000\000\n\327\243={pPF\000\000\000\200o\022\203:qpPF\234SI\265\000\000\000\000qpPF\000\000\000\000&\374T>{pPF\234SI5\000\000\000\000{pPF\000\000\000\000\000\000\000\000{pPF\000\000\000\000D\372\365?{pPF\000\000\000\000g\305\t>U\224PF\027\0370:\000\000\000\000U\224PF\000\000\000\000\000\000\000\000U\224PF\000\000\000\000\1779\031=\000\230PF##\2208\031\242\r>\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\026`:\366\227PF\234SI\265\000\000\000\000\366\227PF\000\000\000\000\000\000\000\000\366\227PF\000\000\000\000\000\000\000\000\366\227PF\000\000\000\000\000\000\000\000\366\227PF\000\000\000\000\257Z\031:\366\227PF\000\000\000\000\000\000\000\000\366\227PF\000\000\000\000\267\304[:\000\230PF\234SI5\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\375\013kh\325_<\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\373\3610>\000\230PF\000\000\000\000$\354\235<\000\230PF\000\000\000\200\237\315\262?\000\230PF\000\000\000\000\254\003I?\000\230PF\000\000\000\000\n\327#<\000\230PF\000\000\000\000\225\"\202<\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000M\327t<\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000}gr@\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000\000\000\000\000\000\230PF\000\000\000\000H\227\255?\035\212PF\252X\210\271\357\205\350=\nHPFO8\242\272\315\314L>\032%PFm\306+\272\000\000\000\000\032%PF\000\000\000\000L5u;\nHPFH\343+:\000\000\000\000\nHPF\000\000\000\000\000\000\000\000\nHPF\000\000\000\000\244\032\227<\000HPF\234SI\265\232\266;>\000HPF\000\000\000\000\220\362\305>\nHPF\234SI5\'\204\217?\nHPF\000\000\000\200\000\000\000\000\nHPF\000\000\000\000\000\000\000\000\nHPF\000\000\000\000\000\000\000\000\nHPF\000\000\000\000\000\000\000\000\nHPF\000\000\000\000\000\000\000\000\nHPF\000\000\000\000\000\000\000\000\nna\333\t\273\000\000\000\000\'\333OF\000\000\000\000\034e\200@\354+PF\356\362\306:nVuj?\354+PF\000\000\000\000\000\000\000\000\354+PF\000\000\000\000\000\000\000\000\354+PF\000\000\000\000\000\000\000\000\354+PF\000\000\000\000\000\000\000\000\354+PF\000\000\000\000\000\000\000\000\354+PF\000\000\000\000\000\000\000\000\354+PF\000\000\000\000R\006\022;\354+PF\000\000\000\000\315\314\314<\345+PF\207\227\361\264\000\000\000\000\345+PF\000\000\000\000\347h\356?\223?PF6\225\3019\255\207\022;HKPF\276Af9\000\000\000\000HKPF\000\000\000\000\325\367\255<HKPF\000\000\000\000\037\210\017>RKPF\234SI5\000\000\000\000RKPF\000\000\000\000\000\000\000\000RKPF\000\000\000\000\n\327#=\313KPF\203O\0247\n\327\243=\000LPF\2452\2036V\016\235?\000LPF\000\000\000\000\n\327\243<\353[PFV\201\2349\000\000\000\000\353[PF\000\000\000\000\010\254\234=\ngPF)\246Z9\201\254\355;\000pPF\r\03109\000\000\000\000\000pPF\000\000\000\000\000\000\000\000\000pPF\000\000\000\000\n\327#<\000pPF\000\000\000\200\000\000\000\000\000pPF\000\000\000\000\000\000\000\000\000pPF\000\000\000\000Jx\306;\000pPF\000\000\000\000o\311;:\000pPF\000\000\000\000\000\000\000\000\000pPF\000\000\000\000\000\000\000\000\000pPF\000\000\000\000\231p)@\000pPF\000\000\000\200\000\000\000\000\000pPF\000\000\000\000\000\000\000\000\000pPF\000\000\000\000\000\000\000\000\000pPF\000\000\000\000\245e\271>\366oPF\234SI\265\034)\'@\377\261PF\2364\242:\225\277\3263\217\274PF\314]O9\000\000\000\000\217\274PF\000\000\000\000s\250\364;\365\277PF%F\2058_\340L>\366\277PFw\314\2533\241t\316>\347\344PF\00475:\000\000\000\000\347\344PF\000\000\000\000\000\000\000\000\347\344PF\000\000\000\000\315\314L>\341\300PF\210\2240\272\000\000\000\000\341\300PF\000\000\000\000\000\000\000\000\341\300PF\000\000\000\000\315\314L>^\307PF\177\235\3768\000\000\000\000^\307PF\000\000\000\000\000\000\000\000^\307PF\000\000\000\000\315\314L>\205\316PFYO\0149\000\000\000\000\205\316PF\000\000\000\000\223\030\004>\210\316PF?\21164\000\000\000\000\210\316PF\000\000\000\000\275\227\324@\262pPF\311\025\346\272\000\000\000\000\262pPF\000\000\000\000\000\000\000\000\262pPF\000\000\000\000\000\000\000\000\262pPF\000\000\000\000\000\000\000\000\262pPF\000\000\000\000\315\314\314=\217tPF\356\352\2278\000\000\000\000\217tPF\000\000\000\000\353\362\331<\232tPF\234SI5\032\333f?\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\0000L&<\231tPFw\314+\262\250\005\313<\232tPFw\314+2\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000t\324\305>\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\241D,?\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000(\017k?\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\205\314U>\232tPF\000\000\000\200\3230><\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000.n\030=\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000z|\315>\232tPFY\331\2003\366)\374>\244tPFp895\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\315\314L>\232tPF\234SI\265\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\315\314L>\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\315\314L>\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\315\314L>\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000V\237+?\016uPFFp\0167\310\000\365;\244tPF\014\333\001\267\362\250R=\244tPF\000\000\000\000\315\314L>\232tPF\234SI\265\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\315\314L>\232tPF\000\000\000\200\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\257\224\':\244tPF\234SI5\2110\234=\244tPF\000\000\000\200\310\000\365;\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\303\323\373?\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000R\327i@\233tPF\r\3323\265\000\000\000\000\233tPF\000\000\000\000\000\000\000\000\233tPF\000\000\000\000\")\232>\244tPF\r\33235\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\225\277\3263\232tPF\234SI\265\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000j3\3539\244tPF\234SI5\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\254\034z?\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\207 \031>\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\264\200\334;\244tPF\000\000\000\000\315\314L>\232tPF\234SI\265\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000n\355\333>\244tPF\234SI5\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\205 \031=\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000;\001\315=\232tPF\234SI\265>y\200?\244tPF\234SI5\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000f\367D?\244tPF\000\000\000\000\0055\274?\232tPF\234SI\265\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\263lL=\244tPF\234SI5\033LC:\232tPF\234SI\265dQ=<\244tPF\234SI5\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000H\026B=\244tPF\000\000\000\200\315\314\314=\244tPF\000\000\000\200\000\000\000\000\244tPF\000\000\000\000p\210\247;\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\202\371e?\244tPF\000\000\000\200\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000E\321\007<\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\315\314L>\232tPF\234SI\265\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\n\327\243<\232tPF\000\000\000\200\236\000\365:\244tPF\234SI5\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\026\373\243?\244tPF\000\000\000\200\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\246\233D:\232tPF\234SI\265\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\n\327#<\244tPF\234SI5\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\0008\370\022?\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\315\314L>\232tPF\234SI\265\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000x\310\2348\244tPF\234SI5\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000xzE?\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\251h\277=\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\n\327\243<\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\n\327#<\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\n\327\243<\244tPF\000\000\000\000\201!\253<\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\315\314L>\232tPF\234SI\265\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\253>\357?\244tPF\234SI5\000\000\000\000\244tPF\000\000\000\000\217\302\365<\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\n\327#=\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\n\327#=\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\n\327#<\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\033b\321=\244tPF\000\000\000\000\355\276\232>\235tPF\2757\006\265\033b\321=\244tPF\2757\0065\033bQ>\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\n\327\243<\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\236M\306>\244tPF\000\000\000\000\n\327#<\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\n\327\243<\244tPF\000\000\000\000\000\000\000\000\244tPF\000\000\000\000\315\314L>\232tPF\234SI\265\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\205\353\021?\244tPF\234SI5\024\256\307>\232tPF\234SI\265\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\315\314L>\232tPF\000\000\000\200\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\217\302\365<\244tPF\234SI5w\276\037=\232tPF\234SI\265\000\000\000\000\232tPF\000\000\000\000\315\314L>\232tPF\000\000\000\000\000\000\000\000\232tPF\000\000\000\000\000\000\200?\231tPFw\314\253\262\000\000\000\000\231tPF\000\000\000\000\315\314L>FtPFfZ\315\266\000\000\000\000FtPF\000\000\000\000\000\000\000\000FtPF\000\000\000\000\323\274\313?\037tPFm\356?\266\217\302\365<\037tPF\000\000\000\200\000\000\000\000\037tPF\000\000\000\000\000\000\000\000\037tPF\000\000\000\000\000\000\000\000\037tPF\000\000\000\000\315\314L>\001tPF\203O\024\266\000\000\000\000\001tPF\000\000\000\000\000\000\000\000\001tPF\000\000\000\000\000\000\000\000\001tPF\000\000\000\000\000\000\000\000\001tPF\000\000\000\000\315\314L>\000tPFw\314+\263\000\000\000\000\000tPF\000\000\000\000\000\000\000\000\000tPF\000\000\000\000\315\314L>\000tPF\000\000\000\000\000\000\000\000\000tPF\000\000\000\000.\016Z>\ntPF\234SI5\000\000\000\000\ntPF\000\000\000\000\000\000\000\000\ntPF\000\000\000\000\315\314L>\000tPF\234SI\265\000\000\000\000\000tPF\000\000\000\000``\014?\373sPF1a\321\264\000\000\000\000\373sPF\000\000\000\000\355\r\376?\315sPF\\|a\266\n\327\243<\303sPF\234SI\265\315\314L>ysPF\214\207\265\266\000\000\000\000ysPF\000\000\000\000\000\000\000\000ysPF\000\000\000\000\000\000\000\000ysPF\000\000\000\000\000\000\000\000ysPF\000\000\000\000\315\314L>]sPF\273\222\t\266\000\000\000\000]sPF\000\000\000\000\000\000\000\000]sPF\000\000\000\000\315\314L>\\sPFw\314+\263\252\361\022?\\sPF\000\000\000\000\000\000\000\000\\sPF\000\000\000\000\000\000\000\000\\sPF\000\000\000\000\217\302\365<fsPF\234SI5)\\\217>\\sPF\234SI\265i\347Z?fsPFp895`\345\320=\000sPF7O\371\26633\263?\3745PFy\336\225\272%\006A?\206UPFM\032\033:\000\000\000\000\206UPF\000\000\000\000\000\000\000\000\206UPF\000\000\000\000k\232\207?\270lPF\257\014\3449\000\000\000\000\270lPF\000\000\000\000\000\000\000\000\270lPF\000\000\000\000\331\213\276>\270lPF\000\000\000\200\351-\217@\206\334OF\356\0341\273\347\215\263<\345\361OF\345\225\3229L\032\235A<hPF\353\257\021;\004V\036@\341wPF\002\276\2319\366\324\347<\354wPF\234SI5\000\000\000\000\354wPF\000\000\000\000\000\000\000\000\354wPF\000\000\000\000\315\314L>\341wPF\234SI\265\000\000\000\000\341wPF\000\000\000\000\000\000\000\000\341wPF\000\000\000\000\315\314L>\341wPF\000\000\000\000\000\000\000\000\341wPF\000\000\000\000\257%\344=\341wPF\000\000\000\200\000\000\000\000\341wPF\000\000\000\000\000\000\000\000\341wPF\000\000\000\000=\nW>\341wPF\000\000\000\000\000\000\000\000\341wPF\000\000\000\000\000\000\000\000\341wPF\000\000\000\000\315\314L>\341wPF\000\000\000\000\000\000\000\000\341wPF\000\000\000\000\000\000\000\000\341wPF\000\000\000\000Q\2038?\341wPF\000\000\000\200\000\000\000\000\341wPF\000\000\000\000\000\000\000\000\341wPF\000\000\000\000\000\000\000\000\341wPF\000\000\000\000\037\036\231=\354wPF\234SI5\000\000\000\000\354wPF\000\000\000\000\315\314L>\341wPF\234SI\265\000\000\000\000\341wPF\000\000\000\000|s\205?\353wPFj\244F5\000\000\000\000\353wPF\000\000\000\000\000\000\000\000\353wPF\000\000\000\000\243\350\370?\341wPFj\244F\265\000\000\000\000\341wPF\000\000\000\000\000\000\000\000\341wPF\000\000\000\000\000\000\000\000\341wPF\000\000\000\000G\302\347:\354wPF\234SI5\000\000\000\000\354wPF\000\000\000\000\000\000\000\000\354wPF\000\000\000\000\n\327#<\354wPF\000\000\000\000\244p\375@\341wPF\234SI\2652\271\207?\341wPF\000\000\000\000FC\252@\337wPF\006FA\264\201M\353?a\305OFh0[\273\000\000\000\000a\305OF\000\000\000\000\000\000\000\000a\305OF\000\000\000\000_\230l?\346\271OFzXb\271 \370\370=\366\317OF@\204\3319\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\000\000\000\000\366\317OF\000\000\000\000\363\347\027<\354\303OFPPmwl\346?\n\250OF\234SI5\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\0005\362u;\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\246\317\361<\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000b\246\211?\000\250OF\234SI\265\000\000\000\000\000\250OF\000\000\000\000\000\000\000\000\000\250OF\000\000\000\000\360\316\0209\n\250OF\234SI5\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\n\327#<\n\250OF\000\000\000\000\nh\">\n\250OF\000\000\000\000\"V\331<\000\250OF\234SI\265\315\314L>\000\250OF\000\000\000\000\000\000\000\000\000\250OF\000\000\000\000\261\250\002?\n\250OF\234SI5\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\230\001\343=\000\250OF\234SI\265\n\327\243<\n\250OF\234SI5\000\000\000\000\n\250OF\000\000\000\0005\362u;\n\250OF\000\000\000\000;\301D:\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\212\341\033>\n\250OF\000\000\000\000\"\253\304>\001\250OF\324\226>\265\000\000\000\000\001\250OF\000\000\000\000\000\000\000\000\001\250OF\000\000\000\000\000\000\000\000\001\250OF\000\000\000\000\000\000\000\000\001\250OF\000\000\000\000z\307\241?\n\250OF\324\226>5\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\n\327\243<\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\0009E\247?\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\n\327#<\n\250OF\000\000\000\000\315\314L=\n\250OF\000\000\000\000_#\3159\n\250OF\000\000\000\200\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\272\322\213>\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\000\000\n\250OF\000\000\000\000\000\000\200@\000\250OF\234SI\265\000\000\000\000\000\250OF\000\000\000\000\000\000\000\000\000\250OF\000\000\000\000\000\000\000\000\000\250OF\000\000\000\000\233\231\262=\n\250OF\234SI5\232\231\231>\000\250OF\234SI\265\000\000\000\000\000\250OF\000\000\000\000\000\000\000\000\000\250OF\000\000\000\000\000\000\000\000\000\250OF\000\000\000\000q\001#@\036\231OF\222\303\222\271\000\000\000\000\036\231OF\000\000\000\000\000\000\000\000\036\231OF\000\000\000\000\000\000\000\000\036\231OF\000\000\000\000\000\000\000\000\036\231OF\000\000\000\000\223\030\200?\010rOF\346\315@\272r\306\027?\002XOF\007v\000\272\000\000\000\000\002XOF\000\000\000\000\n\327#<\nXOF\023n&5\000\000\000\000\nXOF\000\000\000\000\332A!;\nXOF\000\000\000\000{9\241<\000XOF\234SI\265\000\000\000\000\000XOF\000\000\000\000\377;B?~LOF\317Tc\271\226L\272?\357\032OF\364\316t\272\377\033/=\366\027OFq7k\270\n\327#<\n\010OF>p\235\271\000\000\000\000\n\010OF\000\000\000\000\000\000\000\000\n\010OF\000\000\000\000\000\000\000\000\n\010OF\000\000\000\000\000\000\000\000\n\010OF\000\000\000\000?\341\303@\000\010OF\234SI\265\215D\211>\n\010OF\234SI5\000\000\000\000\n\010OF\000\000\000\000\000\000@@\000\010OF\234SI\265\000\000\000\000\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\000\000\200?\000\010OF\000\000\000\000\000\000\000\000\000\010OF\000\000\000\000\233\3144<\n\010OF\234SI5\000\000\000\000\n\010OF\000\000\000\000\n\327#<\n\010OF\000\000\000\200\245\242\017=\254\007OF\330\337\351\266J*.<\244\006OF\025\023\243\267\000\000\000\000\244\006OF\000\000\000\000\000\000\000\000\244\006OF\000\000\000\000\000\000\000\000\244\006OF\000\000\000\000>/\232=\244\006OF\000\000\000\200\266\363m?\244\006OF\000\000\000\000\\\336p@}\020OF\014\336B9\000\000\000\000}\020OF\000\000\000\000L\350\2529\244\006OF\376\325B\271\000\000\000\000\244\006OF\000\000\000\000\000\000\000\000\244\006OF\000\000\000\000\000\000\000\000\244\006OF\000\000\000\000\334I\006<\244\006OF\000\000\000\000\304l\223;\244\006OF\000\000\000\000\000\000\000\000\244\006OF\000\000\000\000\371\261v<\244\006OF\000\000\000\000\000\000\000\000\244\006OF\000\000\000\000\000\000\000\000\244\006OF\000\000\000\000\035\311\344@\232\006OF\234SI\265\000\000\000\000\232\006OF\000\000\000\000\000\000\000\000\232\006OF\000\000\000\000\000\000\000\000\232\006OF\000\000\000\000\000\000\000\000\232\006OF\000\000\000\000\205\353\321=\244\006OF\234SI5\000\000\000\000\244\006OF\000\000\000\000\013vv;\244\006OF\234SI5\000\000\000\000\244\006OF\000\000\000\000\277\020\"?\270\356NF3\247\354\271\000\000\000\000\270\356NF\000\000\000\000\000\000\000\000\270\356NF\000\000\000\000\000\000\000\000\270\356NF\000\000\000\000\207\247\267?3\351NF\033k\332\270\351f\202?\330\344NF\207m\254\270\000\000\000\000\330\344NF\000\000\000\000\315\314L=\n\340NF\356@\276\270j\354\025A\000\340NF\315\002L\265\000\000\000\000\000\340NF\000\000\000\000\000\000\000\000\000\340NF\000\000\000\000\000\000\000\000\000\340NF\000\000\000\000q\2248<\000\340NF\000\000\000\000\226C\213</\335NFa\355^\270\000\000\000\000/\335NF\000\000\000\000\000\000\000\000/\335NF\000\000\000\000\000\000\000\000/\335NF\000\000\000\000\333\377\2358\n\334NF\022r\265\267\000\000\000\000\n\334NF\000\000\000\000\220+9<\n\334NF\000\000\000\000\000\000\000\000\n\334NF\000\000\000\000\000\000\000\000\n\334NF\000\000\000\000\000\000\000\000\n\334NF\000\000\000\000\000\000\000\000\n\334NF\000\000\000\000\000\000\000\000\n\334NF\000\000\000\000\000\000\000\000\n\334NF\000\000\000\000\000\000\000\000\n\334NF\000\000\000\000\000\000\000\000\n\334NF\000\000\000\000V\343N?\n\334NFw\314+\262\000\000\000\000\n\334NF\000\000\000\000{\271\324<\000\334NF\234SI\265\000\000\000\000\000\334NF\000\000\000\000\000\000\000\000\000\334NF\000\000\000\000\305\306d@\000\334NF\000\000\000\000\000\000\000\000\000\334NF\000\000\000\000\000\000\000\000\000\334NF\000\000\000\000\000\000\000\000\000\334NF\000\000\000\000\000\000\000\000\000\334NF\000\000\000\000\000\000\000\000\000\334NF\000\000\000\000\000\000\000\000\000\334NF\000\000\000\000\000\000\000\000\000\334NF\000\000\000\000\000\000\000\000\000\334NF\000\000\000\000\000\000\000\000\000\334NF\000\000\000\000\247yw?\244\332NFak\327\267\000\000\000\000\244\332NF\000\000\000\000\000\000\000\000\244\332NF\000\000\000\000\315\204\037?\366\333NF>6\3217\000\000\000\000\366\333NF\000\000\000\000\000\000\000\000\366\333NF\000\000\000\000\000\000\000\000\366\333NF\000\000\000\000\000\000\000\000\366\333NF\000\000\000\000\000\000\000\000\366\333NF\000\000\000\000\000\000\000\000\366\333NF\000\000\000\000\n\327\243=\000\334NFj\244F5\331U\001=\000\334NF\000\000\000\200;\353\210<\366\333NF\315\002L\265_\351\014?\000\334NF\315\002L5\232\347k<\366\333NF\315\002L\265\000\000\000\000\366\333NF\000\000\000\000\000\000\000\000\366\333NF\000\000\000\000\000\000\000\000\366\333NF\000\000\000\000\276\326\010<\367\333NFY\331\2003\000\000\000\000\367\333NF\000\000\000\000\236\023/?\000\334NFp`\215?\374\333NF\023n\246\264\000\000\000\000\374\333NF\000\000\000\000\376ew=\000\334NF\023nn\327#<\000\334NF\000\000\000\000\006O\232=\000\334NF\000\000\000\200\000\000\000\000\000\334NF\000\000\000\000\325\036\201?f\332NF\365\200\375\267\000\000\000\000f\332NF\000\000\000\000\000\000\000\000f\332NF\000\000\000\000\000\000\000\000f\332NF\000\000\000\000\000\000\000\000f\332NF\000\000\000\000\000\000\000\000f\332NF\000\000\000\000\000\000\000\000f\332NF\000\000\000\000\000\000\000\000f\332NF\000\000\000\000\000\000\000\000f\332NF\000\000\000\000\000\000\000\000f\332NF\000\000\000\000\000\000\000\000f\332NF\000\000\000\000\000\000\000\000f\332NF\000\000\000\000\235$\002<\315\331NF\373\025>\267?W\273?\315\331NF\000\000\000\000\000\000\000\000\315\331NF\000\000\000\000\000\000\000\000\315\331NF\000\000\000\000\000\000\000\000\315\331NF\000\000\000\000\000\000\000\000\315\331NF\000\000\000\000\000\000\000\000\315\331NF\000\000\000\000\321_\251=J\331NF|\273!\267$\277\330<\037\331NF\225\277V\266\177\350v;\354\330NF\350\253}\266\000\000\000\000\354\330NF\000\000\000\000\000\000\000\000\354\330NF\000\000\000\000\241\200\3559\354\330NF\000\000\000\000\000\000\000\000\354\330NF\000\000\000\000\000\000\000\000\354\330NF\000\000\000\000?\n{\330NF\364{\3159\237Q\232=\205\330NF\315\002L5D\351\377;\204\330NF\225\277V\263\000\000\000\000\204\330NF\000\000\000\000\000\000\000\000\204\330NF\000\000\000\000\000\000\000\000\204\330NF\000\000\000\000\003\222]?\231\330NFfZ\3155\000\000\000\000\231\330NF\000\000\000\000\226\2405<\303\330NF\232\256L6\000\000\000\000\303\330NF\000\000\000\000\017\257\265>\371\331NF\315Y\3007\315\314L>\366\331NF!\226\213\264\000\000\000\000\366\331NF\000\000\000\000\000\000\000\000\366\331NF\000\000\000\0002\347v<\000\332NF\315\002L5\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\0001\201\267<\000\332NFY\331\000\263\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\rq\204?\000\332NFY\331\0003\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\314!}>\000\332NF\000\000\000\200\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\0002\347v<\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000h}>\000\332NFY\331\0003\320!l>\000\332NF\000\000\000\200\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\n\327#<\000\332NF\000\000\000\200\000\000\000\000\000\332NF\000\000\000\000\315\314L>\366\331NF\315\002L\265\000\000\000\000\366\331NF\000\000\000\000X\250\315?\000\332NF\315\002L5\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\203P\232<\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000=\nW>\366\331NF\315\002L\2656\275\036?\000\332NF\315\002L51\353E:\366\331NF\315\002L\265\000\000\000\000\366\331NF\000\000\000\000\000\000\000\000\366\331NF\000\000\000\000\315\314L>\366\331NF\000\000\000\000\000\000\000\000\366\331NF\000\000\000\000\000\000\000\000\366\331NF\000\000\000\000\315\314L>\366\331NF\000\000\000\000\000\000\000\000\366\331NF\000\000\000\000\000\000\000\000\366\331NF\000\000\000\000\000\000\000\000\366\331NF\000\000\000\000\nv<\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\243\001\034?\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\nn\327#<\000\332NF\000\000\000\200\373:\310?\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\255uz\024?\366\331NF\315\002L\265\000\000\000\000\366\331NF\000\000\000\000\000\000\000\000\366\331NF\000\000\000\000qY)?\000\332NF\315\002L5\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\217\302\365<\000\332NF\000\000\000\000(\347v;\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000GFC>\000\332NF\000\000\000\200\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\n\327#<\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000R\313\275;\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\274\005\322>\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\000\000\000\000\000\000\332NF\000\000\000\0006\270\365@\363\331NFOT|\265\000\000\000\000\363\331NF\000\000\000\000\000\000\000\000\363\331NF\000\000\000\0001\353E:\000\330NF\351y\032\270\000\000\000\000\000\330NF\000\000\000\000\201\351\366;\n\330NF\315\002L5\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\n\327\243<\n\330NF\000\000\000\000\311<\334?\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\255i\346?\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\371Q\032=\n\330NF\000\000\000\200\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000}\231a=\000\330NF\315\002L\265\000\000\000\000\000\330NF\000\000\000\000gf\346>\000\330NF\000\000\000\000\000\000\000\000\000\330NF\000\000\000\000\000\000\000\000\000\330NF\000\000\000\000\000\000\000\000\000\330NF\000\000\000\000\n\327\243<\n\330NF\315\002L5)\\\217=\n\330NF\000\000\000\000 p\325=\000\330NF\315\002L\265}\222\236;\000\330NF\000\000\000\000\000\000\000\000\000\330NF\000\000\000\000\323\274\355?\n\330NF\315\002L5\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\n\327#<\n\330NF\000\000\000\000\217\302u=\n\330NF\000\000\000\000\n\327#<\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\n\327#<\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000T\343\205?\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\n\327#<\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\000\000\000\000\n\330NF\000\000\000\000\035Zd?\000\330NF\315\002L\265\000\000\000\000\000\330NF\000\000\000\000\312\364\360<\n\330NF\315\002L5P\215\027=\000\330NF\315\002L\265\000\000\200>\000\330NF\000\000\000\000\000\000\000\000\000\330NF\000\000\000\000\205\334\205??\273NF\314Z\016\272c\264\020<\250\252NF\205R\244\271\356|O?R\247NF0O\204\270_\006\244?\316\242NF\357\375\262\270\000\000\000\000\316\242NF\000\000\000\000\000\000\000\000\316\242NF\000\000\000\000\000\000\000\000\316\242NF\000\000\000\000\000\000\000\000\316\242NF\000\000\000\000\274\225\325>=\236NF\227\366\264\270\240.w;=\236NF\000\000\000\200)j\'?:\236NF\353\365v\264\n\327\243<=\236NF\353\365v4\233 \374@\337\177NF6\201\026\272\315\314L>`iNF\262\035\337\271\000\000\000\000`iNF\000\000\000\000\000\000\000\000`iNF\000\000\000\000\270\222M>\325}NF\266\367\3129\000\000\000\000\325}NF\000\000\000\000\000\000\000\000\325}NF\000\000\000\000\315\314L>\024hNF\222\272\327\271\000\000\000\000\024hNF\000\000\000\000\315\314L>\nhNF\315\002L\265\000\000\000\000\nhNF\000\000\000\000`;+=\024hNF\315\002L5\315\314L>\nhNF\315\002L\265\000\000\000\000\nhNF\000\000\000\000\315\314\000@\024hNF\315\002L5\n\327#<\024hNF\000\000\000\000\256G\201?\007hNF\357\346\210\2651:\306<\024hNF\357\346\2105\n\327#<\024hNF\000\000\000\000D\020\353;\024hNF\000\000\000\000\315\314L=\024hNF\000\000\000\000\000\000\000\000\024hNF\000\000\000\000\254\034z?\nhNF\315\002L\265\n\327\243<\024hNF\315\002L5\000\000\000\000\024hNF\000\000\000\000\000\000\000\000\024hNF\000\000\000\000U\373\020@\024hNF\000\000\000\000J\270N<\024hNF\000\000\000\000\000\000\000\000\024hNF\000\000\000\000\000\000\000\000\024hNF\000\000\000\000\000\000\000\000\024hNF\000\000\000\000\000\000\000\000\024hNF\000\000\000\000\000\000\000\000\024hNF\000\000\000\000t\371\344<\nhNF1aQ\265\314]\213?\nhNFw\314\2532\364\375\324<\000hNF\315\002L\265\315\314L>\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\0001\353E:\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\032\257\253?\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\373\\-?\nhNF\315\002L5y\242\204@\000hNF\315\002L\265\000\000\000\000\000hNF\000\000\000\000\342+S;\366gNF\315\002L\265\000\000\000\000\366gNF\000\000\000\000\000\000\000\000\366gNF\000\000\000\000\000\000\000\000\366gNF\000\000\000\000\000\000\000\000\366gNF\000\000\000\000\237\310\3258\000hNF\315\002L5\315\314L>\273dNF\222\305\201\270\n\327#<\ndNFF\034[\267\\\217B>\ndNF\000\000\000\000\000\000\200?\243cNF\215-\000\267\000\000\000\000\243cNF\000\000\000\000\026L\226?\214VNFj\340\201\271\000\000\000\000\214VNF\000\000\000\000\000\000\000\000\214VNF\000\000\000\000\027\2076?\254VNF\345\010\0356\000\000\000\000\254VNF\000\000\000\000\000\000\000\000\254VNF\000\000\000\000\254\304\335<\000TNF\335%T\270\000\000\000\000\000TNF\000\000\000\000\n\327#=\nTNF\315\002L5\000\000\000\000\nTNF\000\000\000\000\000\000\000\000\nTNF\000\000\000\000\256Ga>\001TNFp89\265\000\000\000\000\001TNF\000\000\000\000\000\000\000\000\001TNF\000\000\000\000\000\000\000\000\001TNF\000\000\000\000\360i\376>\nTNFp895\000\000\000\000\nTNF\000\000\000\000\311<\334?QPNF\010\324\223\270\334\010\321;\037KNF\273V\316\270t\362\017=)KNF\315\002L5\000\000\000\000)KNF\000\000\000\000\000\000\000\000)KNF\000\000\000\000\202s\266?)KNF\000\000\000\200\315\314L>\037KNF\315\002L\265\000\000\000\000\037KNF\000\000\000\000\000\000\000\000\037KNF\000\000\000\000x\355\025=\037KNF\000\000\000\200\315\314L>\037KNF\000\000\000\200\000\000\000\000\037KNF\000\000\000\000Z\350\r?)KNF\315\002L5\000\000\000\000)KNF\000\000\000\0005\316\313;\037KNF\234SI\265\2004\252=)KNF\234SI5\000\000\000\000)KNF\000\000\000\000\000\000\000\000)KNF\000\000\000\000\014\031h>)KNF\000\000\000\200\342\220\000>)KNF\000\000\000\000}\230\367;)KNF\000\000\000\000\000\000\000\000)KNF\000\000\000\000Au\247=)KNF\000\000\000\000\237\257\266=!KNF~`\036\265\000\000\000\000!KNF\000\000\000\000\024\025P=\037KNFw\314+\264\351\267\217>)KNF\315\002L5S\"\322=)KNF\000\000\000\000\3405\232>)KNF\000\000\000\000\000\000\000\000)KNF\000\000\000\0004\215t@\037KNF\315\002L\265\000\000\000\000\037KNF\000\000\000\000\000\000\000\000\037KNF\000\000\000\000\000\000\000\000\037KNF\000\000\000\000\000\000\000\000\037KNF\000\000\000\0000\3370<\036KNFw\314+\263\000\000\200>\027KNF\032\002\031\265\231p\2368\037KNF\341\276#5\n\327#<\037KNF\000\000\000\000\231p\2368\037KNF\000\000\000\000\n\327#<\037KNF\000\000\000\000\356\246\216=\037KNF\000\000\000\000\315\314L>\024KNF\315\002L\265S\344\364<\037KNF\315\002L5\000\000\000\000\037KNF\000\000\000\000\233\340L>\024KNF\315\002L\265\344\306\343=\037KNF\315\002L5\231p\2368\037KNF\000\000\000\000o\3605?\037KNF\000\000\000\000\231p\2368\037KNF\000\000\000\200Y\315\234?\025KNFj\244F\265\000\000\000\000\025KNF\000\000\000\000\231p\2368\037KNFj\244F5\000\000\000\000\037KNF\000\000\000\000\231p\2368\037KNF\000\000\000\000\243f\325=\013KNF\321L\305\265<\253XB\232@NF\243EO\271\000\000\000\000\232@NF\000\000\000\000\341:/@\007@NF\361\2127\267B\341\2329\354@NF9\233\2167\244=\016A\000@NF\004\242\222\267\014\235\016@\000@NF\000\000\000\000\013\242\022@\000@NF\000\000\000\000\271\226B?\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000=\001@@\000@NF\000\000\000\0006\227\352@\000@NF\000\000\000\200a[|?\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000z\002\300?\000@NF\000\000\000\200\201\313\353?\000@NF\000\000\000\200\251\236\035>\000@NF\000\000\000\000\367\001\017@\007@NF\204\364\0205\000\000\000\000\007@NF\000\000\000\000\350d7A\000@NF\204\364\020\265_\244\366?\000@NF\000\000\000\200\214\362lA\242\275MFu\320!\273$3~@\203\014MFCc\\\273\367\343\344?\256\007MF;\000\301\270\000\000\000\000\256\007MF\000\000\000\000w\215\336=m\025MF\231K\2119\336\353\201>\377$MFK~\2339\211r\337=\027pMF\316i\273:\007\301x<\000PMF\315\361\037\2726\356)>\000PMF\000\000\000\200+\244g?\367OMF?\2116\265\023\357\204;\000PMF?\21165x\246\354=\000PMF\000\000\000\000\000\000\000\000\000PMF\000\000\000\000\000\000\000\000\000PMF\000\000\000\000\304~l;\366OMF\315\002L\265\000\000\000\000\366OMF\000\000\000\000)\\\017=\366OMF\000\000\000\000\036\0323:\000PMF\315\002L5\000\000\000\000\000PMF\000\000\000\000\326V\020@\375pMF\215\211$:\352\037\345;\366OMFa\242$\272\000\000\000\000\366OMF\000\000\000\000\000\000\000\000\366OMF\000\000\000\000\000\000\000\000\366OMF\000\000\000\000\000\000\000\000\366OMF\000\000\000\000\353m\350>\366OMF\000\000\000\000\000\000\000\000\366OMF\000\000\000\000\000\000\000\000\366OMF\000\000\000\000\3371\2378\000PMF\315\002L5\000\000\000\000\000PMF\000\000\000\000\000\000\000\000\000PMF\000\000\000\000\000\000\000\000\000PMF\000\000\000\000\000\000\000\000\000PMF\000\000\000\000o\022\203>\000PMF\000\000\000\000\000\000\000\000\000PMF\000\000\000\000Ow\036;\000PMF\000\000\000\000\2068V>\000PMF\000\000\000\000=-\000@\020\320LFC\206\037\273{~\336;\377\364LF\327\2528:i\031\315=\354\377LF\345JZ9J\301\267?\276\371LFV\320\366\270\230n\222>\336\336LF&C\006\272\265\213*=\304\'MF\372-\266:\314\373n:\377\'MF\266\243\2236\000\000\000\000\377\'MF\000\000\000\000\000\000\000\000\377\'MF\000\000\000\000\000\000\000\000\377\'MF\000\000\000\000\000\000\000\000\377\'MF\000\000\000\000\000\000\000\000\377\'MF\000\000\000\000\000\000\000\000\377\'MF\000\000\000\000\000\000\000\000\377\'MF\000\000\000\000\000\000\000\000\377\'MF\000\000\000\000\000\000\000\000\377\'MF\000\000\000\000\000\000\000\000\377\'MF\000\000\000\000i\000\357>e\034MF\024\244g\271X\361x<((MF\351\346j9\000\000\200?\303\000MF\010\243D\272\000\000\000\000\303\000MF\000\000\000\000\000\000\000\000\303\000MF\000\000\000\000\000\000\000\000\303\000MF\000\000\000\000\n\327#<\366\007MF\251\332\0179\000\000\000\000\366\007MF\000\000\000\000\000\000\000\000\366\007MF\000\000\000\000yE\3079\366\007MF\000\000\000\200\227\307\233?{\373LFDWy\271\000\000\000\000{\373LF\000\000\000\000\000\000\000\000{\373LF\000\000\000\000\000\000\000\000{\373LF\000\000\000\000\342\375\023?<\351LFzG\266\271\000\000\200?0\277LF\034\037R\2723NG:\354\377LF\271\337\241:4c\363=\303\377LF\232\256L\266\236\371 ?\303\377LF\000\000\000\200\000\000\000\000\303\377LF\000\000\000\000\000\000\000\000\303\377LF\000\000\000\000\242\326\025?H\361LF\003\250\220\271\000\000\000\000H\361LF\000\000\000\000\000\000\000\000H\361LF\000\000\000\000\000\000\000\000H\361LF\000\000\000\000*;\232>\315\353LF\211\021\333\270\000\000\000\000\315\353LF\000\000\000\000<e\237@P\270LF\253\244\200\272\000\000\000\000P\270LF\000\000\000\000\000\000\000\000P\270LF\000\000\000\000\000\000\000\000P\270LF\000\000\000\000\000\000\000\000P\270LF\000\000\000\000\000\000\000\000P\270LF\000\000\000\000\000\000\000\000P\270LF\000\000\000\000\216[9=\250\305LF~z\2059[\024\267?\000\330LF\326z\2679\000\000\000\000\000\330LF\000\000\000\000\000\000\000\000\000\330LF\000\000\000\000\000\000\000\000\000\330LF\000\000\000\000\000\000\000\000\000\330LF\000\000\000\000C\243??\341\264LF\322\220/\272\000\000\000\000\341\264LF\000\000\000\000\000\000\000\000\341\264LF\000\000\000\000\000\000\000\000\341\264LF\000\000\000\000\000\000\000\000\341\264LF\000\000\000\000\264K\277>\366\327LF\004|/:\000\000\000\000\366\327LF\000\000\000\000\000\000\000\000\366\327LF\000\000\000\000\000\000\000\000\366\327LF\000\000\000\000\370$\201>\000\330LF\315\002L5\000\000\000\000\000\330LF\000\000\000\000\000\000\000\000\000\330LF\000\000\000\000h\217Y>\367\327LFp89\265\000\000\000\000\367\327LF\000\000\000\000\320\263\301?\000\330LFp895\027\331N=\000\330LF\000\000\000\000\000\000\000\000\000\330LF\000\000\000\000\242\202\346=\000\330LF\000\000\000\000\000\000\000\000\000\330LF\000\000\000\000\000\000\240@:\331LF\021v\3047\000\000\000\000:\331LF\000\000\000\000\025=&?\371\353LF\320j\2739i:y<\000\354LF\213\210\0035\000\000\000\000\000\354LF\000\000\000\000 A\364>X\372LF\320Y\2179\\&\210?\010\034MF<M(:\263(9?\000,MFEn\2379\214=\347?\000,MF\000\000\000\200\000\000\000\000\000,MF\000\000\000\000\246_\005<\000,MF\000\000\000\000\217\344\362>\000,MF\000\000\000\000\000\000\000\000\000,MF\000\000\000\000\000\000\000\000\000,MF\000\000\000\000\326\305\r?\000,MF\000\000\000\000\000\000\000\000\000,MF\000\000\000\000\000\000\000\000\000,MF\000\000\000\000\000\000\000\000\000,MF\000\000\000\000\000\000\000\000\000,MF\000\000\000\000\000\000\000\000\000,MF\000\000\000\000\000\000\000\000\000,MF\000\000\000\000\000\000\000\000\000,MF\000\000\000\000\000\000\000\000\000,MF\000\000\000\000\000\000\000\000\000,MF\000\000\000\000\000\000\000\000\000,MF\000\000\000\000\000\000\000\000\000,MF\000\000\000\000\007\301\370;\000PMFj\2543:{g\232?\335\306MFW5\024;4g\001@\246\315MF\333\023\0079/\256p@L\022NF\301\310\252:\315\314L>_$NF\370\232\2639\000\000\000\000_$NF\000\000\000\000\001\031\370?\366/NF7Wf9\000\000\000\000\366/NF\000\000\000\000\315\314L>\366/NFwt=\366\357MF\000\000\000\000\000\000\000\000\366\357MF\000\000\000\000\000\000\000\000\366\357MF\000\000\000\000\315\314L>W\335MF\\,\271\271\n\327\243=\000\334MF\t=\325\267\\\217\222?\000\334MF\000\000\000\000)\\\217=I\326MF\352d\343\270\032\205e={vMFRN\356\272\n\327#<)oMF\331\360\021\271\224\202\014>3oMF\324\226>5\246\233\304<3oMF\225\277V3J\014\002?ayMF\r\371J9\000\000\000\000ayMF\000\000\000\000\370m\032=\211\330MFN\034\355:\000\000\000\000\211\330MF\000\000\000\000\000\000\000\000\211\330MF\000\000\000\000\000\000\000\000\211\330MF\000\000\000\000&\204\365?t\336MF<}\3538\000\000\000\000t\336MF\000\000\000\000\000\000\000\000t\336MF\000\000\000\000\000\000\000\000t\336MF\000\000\000\000\000\000\000\000t\336MF\000\000\000\000\000\000\000\000t\336MF\000\000\000\000\350\257\306;\000\354MF\374\301\2069\364^\211<\000\354MF\000\000\000\000\000\000\000\000\000\354MF\000\000\000\000\232\262&=\366\353MF\315\002L\265\000\000\000\000\366\353MF\000\000\000\000\301\333\r>\000\354MF\315\002L5\000\000\000\000\000\354MF\000\000\000\000\000\000\000\000\000\354MF\000\000\000\000\000\000\000\000\000\354MF\000\000\000\000\211\004\370;\000\354MF\000\000\000\000\000\000\000\000\000\354MF\000\000\000\0009\326\265?\251\355MF!\024\0048$(n?\000\360MFf/:8\000\000\000\000\000\360MF\000\000\000\000\000\000\000\000\000\360MF\000\000\000\000\000\000\000\000\000\360MF\000\000\000\000\000\000\000\000\000\360MF\000\000\000\000\000\000\000\000\000\360MF\000\000\000\000dp\026@\210\361MFfrwu\340\243<\000@NF\000\000\000\200\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000TR\367?\000@NF\000\000\000\000\n\327#<\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\nq\271?\247mNF=\017M::u\025?\341\200NF\316\305\2769\000\000\200?\327\200NF\315\002L\265\000\000\000\000\327\200NF\000\000\000\000,\030A@\341\200NF\315\002L58\025i>\031\234NF\257\371\006:\354Q\270=\r\243NF\312\315\t9\342T\240>]\226NF\356\202{\271\000\000\000\000]\226NF\000\000\000\000\000\000\000\000]\226NF\000\000\000\000\000\000\000\000]\226NF\000\000\000\000\000\000\200?I\220NF\326\373\360\270\000\000\000\000I\220NF\000\000\000\000\212S\024;\364\227NF\323\r\0309\302\022\207?(\307NFR\365i:\000\000\000\000(\307NF\000\000\000\000\000\000\000\000(\307NF\000\000\000\000I.3@\310\313NF\310?\2678\000\000\000\000\310\313NF\000\000\000\000\000\235P>\270\220NF\2519\222\272\000\000\000\000\270\220NF\000\000\000\000\000\000\000\000\270\220NF\000\000\000\000\000\000\000\000\270\220NF\000\000\000\000\000\000\000\000\270\220NF\000\000\000\000M9\002@{\321NF\304\203\240:\362\032\003Aj\336NF\023\030\2009\000\000\000\000j\336NF\000\000\000\000\235\310\240<\000\340NF0\022\3737\000\000\000\000\000\340NF\000\000\000\000\000\000\000\000\000\340NF\000\000\000\000\000\000\000\000\000\340NF\000\000\000\000\315\314L>\366\337NF\315\002L\265\000\000\000\000\366\337NF\000\000\000\000\000\000\000\000\366\337NF\000\000\000\000\0364~>\000\340NF\315\002L5\315\t\317=\000\340NF\000\000\000\200\000\000\000\000\000\340NF\000\000\000\000\000\000\000\000\000\340NF\000\000\000\000\000\000\000\000\000\340NF\000\000\000\000\000\000\000\000\000\340NF\000\000\000\000\000\000\000\000\000\340NF\000\000\000\000\341\314-@\350\371NF\371:\000:\000\000\000\000\350\371NF\000\000\000\000\370^\363<C,OF\354\"y:\245\224\300>\356/OF\204\364\2208\272\236M<\0240OFm\356?6\000\000\000\000\0240OF\000\000\000\000\000\000\000\000\0240OF\000\000\000\000\000\000\000\000\0240OF\000\000\000\000\315\314L>\n0OF\234SI\265g\020\032=\0240OF\234SI5\363\226O>\0160OFOT\374\264\315\314L>\n0OF\350R\226\264J\030\232<\0240OF\234SI5\000\000\000\000\0240OF\000\000\000\000\000\000\000\000\0240OF\000\000\000\000\000\000\000\000\0240OF\000\000\000\000\346?d?\0220OF?\2116\264\316\334\344<\0240OF?\21164\000\000\000\000\0240OF\000\000\000\000\000\000\000\000\0240OF\000\000\000\000\000\000\000\000\0240OF\000\000\000\000\315\314L>\n0OF\234SI\265\000\000\000\000\n0OF\000\000\000\000\000\000\000\000\n0OF\000\000\000\000\350Ps>\0020OFE\035)\265\000\000\000\000\0020OF\000\000\000\000\021u\322=\0060OF?\211\2664\217\302u>\0000OF\353\365\366\264\362\n\376>\266.OF\315\002\314\267\000\000\000\000\266.OF\000\000\000\000\000\000\000\000\266.OF\000\000\000\000\000\000\000\000\266.OF\000\000\000\000\000\000\000\000\266.OF\000\000\000\000\000\000\000\000\266.OF\000\000\000\000\000\000\000\000\266.OF\000\000\000\000\000\000\000\000\266.OF\000\000\000\000\000\000\000\000\266.OF\000\000\000\000\n\327\243<\n(OFq\336\003\271ff\206?\000(OF\234SI\265\000\000\000\000\000(OF\000\000\000\000\324+e>\n(OF\234SI5\000\000\000\000\n(OF\000\000\000\000(*\234=\033\351NF\r\214\233\272-#T;\366\027OF}\342g:\031\306\252>\304\341NFY\374\205\272\000\000\000\000\304\341NF\000\000\000\000\000\000\000\000\304\341NF\000\000\000\000\000\000\000\000\304\341NF\000\000\000\000\214 \204:\024\340NFwv\005\270\000\000\000\000\024\340NF\000\000\000\000\000\000\000\000\024\340NF\000\000\000\000\367\337\366=\024\340NF\000\000\000\000\000\000\000\000\024\340NF\000\000\000\000\000\000\000\000\024\340NF\000\000\000\000\000\000\000\000\024\340NF\000\000\000\000\000\000\000\000\024\340NF\000\000\000\000\363S?<\024\340NF\000\000\000\000\251`\224>\307\336NF\223q\316\267\217\302\365<\341\337NF\026\274\25673\337\300=\327\337NF\315\002L\265\000\000\000\000\327\337NF\000\000\000\000\000\000\000\000\327\337NF\000\000\000\000\000\000\000\000\327\337NF\000\000\000\000\000\000\000\000\327\337NF\000\000\000\000\000\000\000\000\327\337NF\000\000\000\000!\260r>/\245NF8,\221\272q\037w<\354\252NF\247o\3438\0364~>\341\252NF\315\002L\265\000\000\000\000\341\252NF\000\000\000\000\205\264\306:\000\220NFT/\005\272\347\340\031:\000\220NF\000\000\000\000\000\000\000\000\000\220NF\000\000\000\000\300\260B>\261aNF?\221e\272\315\314L>\244INFG\255\356\271\013$\250?\325\214NFS\306\246:\000\000\000\000\325\214NF\000\000\000\000\000\000\000\000\325\214NF\000\000\000\000 \227(>\366\215NFg\255\2627\000\000\000\000\366\215NF\000\000\000\000\315\314\314=\366\215NF\000\000\000\200\000\000\000\000\366\215NF\000\000\000\000\217\302u=\366\215NF\000\000\000\000\000\000\000\000\366\215NF\000\000\000\000\336\271\250=\356\215NF\350R\026\265\000\000\000\000\356\215NF\000\000\000\000F\366\371?\366\215NF\266\243\0235\245,\002?jmNF\322V!\272\000\000\000\000jmNF\000\000\000\000\026Bw;\354\215NF\376=!:)\\\217=\354\215NF\000\000\000\000\000\000\000\000\354\215NF\000\000\000\000\000\000\000\000\354\215NF\000\000\000\000\327\243\230?\247\231NFh\240h9\000\000\000\000\247\231NF\000\000\000\000\000\000\000\000\247\231NF\000\000\000\000\000\000\000\000\247\231NF\000\000\000\000\315\314\314=H\216NF\360nau<\345\215NF\204M\370\266\000\000\000\000\345\215NF\000\000\000\000\232\231\231>\370JNF\327\344\245\272\344\320(>\341\215NF#\022\246:\000\000\000\000\341\215NF\000\000\000\000\000\000\000\000\341\215NF\000\000\000\000\217\302\365<HJNF\250\220\247\272h\337\355=PJNFE\035)5\000\000\000\000PJNF\000\000\000\000\000\000\000\000PJNF\000\000\000\000\000\000\000\000PJNF\000\000\000\000\250\306{?\026lNFs\243\':\000\000\000\000\026lNF\000\000\000\000\000\000\000\000\026lNF\000\000\000\000\000\000\000\000\026lNF\000\000\000\000\274\221\375;\230hNF\314\231\212\270B\271\325>%INF/\005\034\272\000\000\000\000%INF\000\000\000\000\000\000\000\000%INF\000\000\000\000ln@NF\315\002L5\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\n@NF\000\000\000\000\242\037v=\n@NF\000\000\000\000\000\000\240@\000@NF\315\002L\265\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\344u\220<\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\025\035\201?\n@NF\315\002L5\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\n@NF\000\000\000\000\315\314L<\000@NF\315\002L\265\217\302\365<\n@NF\315\002L5\000\000\000\000\n@NF\000\000\000\000\025\331s?\n@NF\000\000\000\200\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\n@NF\000\000\000\000\000\000\000\000\ncx\301>\n<NF\325\276\220\270\000\000\000\000\n<NF\000\000\000\000\000\000\000\000\n<NF\000\000\000\000\000\000\000\000\n<NF\000\000\000\000\000\000\000\000\n<NF\000\000\000\000\000\000\000\000\n<NF\000\000\000\000\000\000\000\000\n<NF\000\000\000\000\214\333\010?\n<NF\000\000\000\000\000\000\000\000\n<NF\000\000\000\000\000\000\000\000\n<NF\000\000\000\000\000\000\000\000\n<NF\000\000\000\000\000\000\000\000\n<NF\000\000\000\000\000\000\000\000\n<NF\000\000\000\000\000\000\000\000\n<NF\000\000\000\000v\344\242<\t<NFY\331\200\263\000\000\000\000\t<NF\000\000\000\000\n\327#<\n<NFY\331\2003\000\000\000\000\n<NF\000\000\000\000\000\000\000\000\n<NF\000\000\000\000\000\000\000\000\n<NF\000\000\000\000\211\321\224<\n<NF\000\000\000\000J\276\026@\002<NF~`\036\265\314\241\273<\n<NF~`\0365V\217q?\000<NF\315\002L\265\n\327#<\354;NF\315\002\314\265\256Ga>\344\033NF\233\t\037\272\000\000\000\000\344\033NF\000\000\000\000\000\000\000\000\344\033NF\000\000\000\000\000\000\000\000\344\033NF\000\000\000\000-C\014?\n0NF\3009\3109\000\000\000\000\n0NF\000\000\000\000\000\000\000\000\n0NF\000\000\000\000\010v\007?\236/NF\226\270\006\267\026b\023>\207\032NF\261z\321\271\364\202<?U\026NF\372\303\246\270\227\340\236=\256\016NF\203\020\030\271\000\000\000\000\256\016NF\000\000\000\000\000\000\000\000\256\016NF\000\000\000\000\000\000\000\000\256\016NF\000\000\000\000\364X\217<\000\030NF-C99\000\000\000\000\000\030NF\000\000\000\000\000\000\000\000\000\030NF\000\000\000\000p\210\272=\373\022NF\243\220\307\270\315\314L>{\nNF\243\357(\271\000\000\000\000{\nNF\000\000\000\000\000\000\000\000{\nNF\000\000\000\000\000\000\000\000{\nNF\000\000\000\000\000\000\000\000{\nNF\000\000\000\000\000\000\000\000{\nNF\000\000\000\000\217\302\365<\220\013NF\312b\2547\000\000\000\000\220\013NF\000\000\000\000\000\000\000\000\220\013NF\000\000\000\000\000\000\000\000\220\013NF\000\000\000\000\331\3167?\000\030NFX6w9\315\314L>{\nNFKY\206\271\000\000\000\000{\nNF\000\000\000\000\000\000\000\000{\nNF\000\000\000\000\000\000\000\000{\nNF\000\000\000\000\000\000\000\000{\nNF\000\000\000\000\000\000\000\000{\nNF\000\000\000\000\000\000\000\000{\nNF\000\000\000\000\000\000\000\000{\nNF\000\000\000\000\376i~<=\021NF\260b\0069\000\000\000\000=\021NF\000\000\000\000\000\000\000\000=\021NF\000\000\000\000\000\000\000\000=\021NF\000\000\000\000\000\000\000\000=\021NF\000\000\000\000\037\347\221?\203\376MF\001&\272\271\000\000\000\000\203\376MF\000\000\000\000\000\000\000\000\203\376MF\000\000\000\000\000\000\000\000\203\376MF\000\000\000\000\233\020u=G\nNF\260\372i9\000\000\000\000G\nNF\000\000\000\000)\\\217==\nNF\242\347;\2653!\305?*\rNF\271\235h8\000\000\000\000*\rNF\000\000\000\000\n\327#<\000\030NF\245`W9\000\000\000\000\000\030NF\000\000\000\000\000\000\000\000\000\030NF\000\000\000\000\353?\212=\000\030NF\000\000\000\000\000\000\000\000\000\030NF\000\000\000\000\000\000\000\000\000\030NF\000\000\000\000\000\000\000\000\000\030NF\000\000\000\000\000\000\000\000\000\030NF\000\000\000\000\000\000\000\000\000\030NF\000\000\000\000\000\000\000\000\000\030NF\000\000\000\000\262\226\250<\000\030NFwq=j?\000\374MF\205\363B\267\000\000\000\000\000\374MF\000\000\000\000\000\000\000\000\000\374MF\000\000\000\000\000\000\000\000\000\374MF\000\000\000\000\000\000\000\000\000\374MF\000\000\000\000\000\000\000\000\000\374MF\000\000\000\000*\251C?\354\007NF\326\007m9\3107\243>\312\317MF\242}\213\272\260r\350=\247\320MF(\323\2117\000\000\000\000\247\320MF\000\000\000\000\000\000\000\000\247\320MF\000\000\000\000\000\000\000\000\247\320MF\000\000\000\000`(\004?W\243MF\243sa\272Y\234\312=\023\324MF\260\254r:<\030\'A\233\375LFe_\205\273L7i?\341zMFgr\034;\000\000\000\000\341zMF\000\000\000\000\000\000\000\000\341zMF\000\000\000\000\000\000\000\000\341zMF\000\000\000\000\000\000\000\000\341zMF\000\000\000\000\000\000\000\000\341zMF\000\000\000\000\000\000\000\000\341zMF\000\000\000\000\000\000\000\000\341zMF\000\000\000\000\n\327#<\354zMF\315\002L5\000\000\000\000\354zMF\000\000\000\000\000\000\000\000\354zMF\000\000\000\000\000\000\000\000\354zMF\000\000\000\000\000\000\000\000\354zMF\000\000\000\000\303\316T?H\265LF\257:v\273f`\251<hNMF\005~?;f\333H?\276\020MF\276\310\231\272t\351~w?>\303\020MF\000\000\000\000\276\ry<\303\020MF\000\000\000\000\000\000\000\000\303\020MF\000\000\000\000\000\000\000\000\303\020MF\000\000\000\000\000\000\000\000\303\020MF\000\000\000\000\000\000\000\000\303\020MF\000\000\000\000*:\322>\303\020MF\000\000\000\000\000\000\200>\270\020MF\315\002L\265\000\000\200?\303\020MF\315\002L5\276\ry<\303\020MF\000\000\000\000\n\327#<\303\020MF\000\000\000\000\000\000\000\000\303\020MF\000\000\000\000\000\000\000\000\303\020MF\000\000\000\000\000\000\000\000\303\020MF\000\000\000\000\315\314\314=\303\020MF\000\000\000\000@\352W>\303\020MF\000\000\000\000\247\202#;\303\020MF\000\000\000\000\000\000\000\000\303\020MF\000\000\000\000\000\000\000\000\303\020MF\000\000\000\000\000\000\000\000\303\020MF\000\000\000\000\000\000\000\000\303\020MF\000\000\000\000\n\327#<\303\020MF\000\000\000\000\376\262\327=\303\020MF\000\000\000\000\000\000\000\000\303\020MF\000\000\000\000\000\000\000\000\303\020MF\000\000\000\000!\262\004<\303\020MF\000\000\000\000\315\314L=\303\020MF\000\000\000\000\342+\262=\271\020MF8\365C\265\000\000\000\000\271\020MF\000\000\000\000\000\000\000\000\271\020MF\000\000\000\000)\\\217=\303\020MF8\365C5\261\255z;\270\020MF\315\002L\265\n\327#<\303\020MF\315\002L5\274\335P>\270\020MF\315\002L\265\000\000\000\000\270\020MF\000\000\000\0000bb\247\236@\031\313LFb\354\255\272\000\000\000\000\031\313LF\000\000\000\000\000\000\000\000\031\313LF\000\000\000\000\000\000\000\000\031\313LF\000\000\000\000\000\000\000\000\031\313LF\000\000\000\000\n\327#<\n\260LF\342J\007\272\000\000\000\000\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\010/\242=\n\260LF\000\000\000\000\010XL:\000\260LF\315\002L\265\n\327#<\000\260LF\000\000\000\000\000\000\000\000\000\260LF\000\000\000\000\000\000\000\000\000\260LF\000\000\000\000\252_/<\010\260LF\032\002\0315\000JM<\000\260LF\032\002\031\265\354Q\270=\n\260LF\315\002L5\000\000\000\000\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\000\000\000?\000\260LF\315\002L\265\363\216#@\006\260LF\353\365\3664\000\000\000\000\006\260LF\000\000\000\000\370m\032=\000\260LF\353\365\366\264\000\000\000\000\000\260LF\000\000\000\000\320DX<\n\260LF\315\002L5\362\013m=\n\260LF\000\000\000\200\211\322\336;\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\037\036\027<\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\344s\234=\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\n\327#<\n\260LF\000\000\000\000\237\315\204?\000\260LF\315\002L\265X9\004?\000\260LF\000\000\000\200\000\000\000\000\000\260LF\000\000\000\000\n\327\243<\n\260LF\315\002L5\352\304\214<\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\327\243\360>\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\0003\334\250=\n\260LF\000\000\000\200\000\000\000\000\n\260LF\000\000\000\000\315\314L>\000\260LF\315\002L\265\020\006\036=\000\260LF\000\000\000\000\205\243;;\000\260LF\000\000\000\000\346\361\033>\n\260LF\315\002L5\347\214\320?\n\260LF\000\000\000\000\362T\265>\n\260LF\000\000\000\000{\024.>\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\247\244;<\n\260LF\000\000\000\200\000\000\000\000\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000o\203y<\n\260LF\000\000\000\000\n\327\243<\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000\315\314L>\000\260LF\315\002L\265\000\000\000\000\000\260LF\000\000\000\000\000\000\000\000\000\260LF\000\000\000\000\000\000\000\000\000\260LF\000\000\000\000\000\000\000\000\000\260LF\000\000\000\000\000\000\000\000\000\260LF\000\000\000\000\000\000\000\000\000\260LF\000\000\000\000\000\000\000\000\000\260LF\000\000\000\000\000\000\000\000\000\260LF\000\000\000\000d\274\000>\000\260LF\000\000\000\000j\274\324>\n\260LF\315\002L52\332\243=\n\260LF\000\000\000\200\000\000\000\000\n\260LF\000\000\000\000\315\314L>\000\260LF\315\002L\265\000\000\000\000\000\260LF\000\000\000\000\000\000\000\000\000\260LF\000\000\000\000<\235P<\010\260LF\260\017!5\000\000\000\000\010\260LF\000\000\000\000\000\000\000\000\010\260LF\000\000\000\000s\366\232>\001\260LF\350R\026\265\000\000\000\000\001\260LF\000\000\000\000\000\000\000\000\001\260LF\000\000\000\000w\245\'>\000\260LFw\314+\263\000\000\000\000\000\260LF\000\000\000\000\020\004\310:\000\260LF\000\000\000\200\000\000\000\000\000\260LF\000\000\000\000Z\255\2378\n\260LF\315\002L5\000\000\000\000\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000Z\255\2378\n\260LF\000\000\000\000\000\000\000\000\n\260LF\000\000\000\000Z\255\2378\n\260LF\000\000\000\000\022\245\275=\n\260LF\000\000\000\000\n\327#<\n\260LF\000\000\000\000Z\255\2378\n\260LF\000\000\000\000;m\317<\n\260LF\000\000\000\200Z\255\2378\n\260LF\000\000\000\000\233#`?\n\260LF\000\000\000\000\302\340L>\000\260LF\315\002L\265\334xA;\n\260LF\315\002L5Z\255\2378\n\260LF\000\000\000\000\n\327\243<\n\260LF\000\000\000\000VJ+>\264\257LF{\025\327\266\315\314L>\366\253LFm\327\225\270R[\203=\376\253LFw\314+5\000\000\000\000\376\253LF\000\000\000\000\270\262\2378\000\254LFY\331\0004\300\026\210<\000\254LF\000\000\000\000\242E6=\366\253LF\315\002L\265\270\262\2378\000\254LF\315\002L5\256Ga>\367\253LFp89\265\000\000\000\000\367\253LF\000\000\000\000\000\000\000\000\367\253LF\000\000\000\000\270\262\2378\000\254LFp895\000\000\000\000\000\254LF\000\000\000\000\n\327\243<\000\254LF\000\000\000\000\270\262\2378\000\254LF\000\000\000\000\300\214o:\000\254LF\000\000\000\000\270\262\2378\000\254LF\000\000\000\000\000\000\000\000\000\254LF\000\000\000\000g\276\275:\000\254LF\000\000\000\200\315\314\314=\000\254LF\000\000\000\000\"?mw\314+5\000\000\000\000\000\254LF\000\000\000\000\270\262\2378\000\254LF\000\000\000\000\256Ga>\367\253LFp89\265\270\262\2378\000\254LFp8959\365\233=\000\254LF\000\000\000\000\270\262\2378\000\254LF\000\000\000\000\000\000\000\000\000\254LF\000\000\000\000\315\314L>\366\253LF\315\002L\265\270\262\2378\000\254LF\315\002L5\000\000\000\000\000\254LF\000\000\000\000\376\333\315?\273\262LF*\253\0069\263Yy<G\322LF<\324\035:\037x-?\025\254LF\313\366>\272\000\000\000\000\025\254LF\000\000\000\000T\226[<\213\275LF\276\272\2569/\026%<<\256LFW&\231\271\336\310i>\036\316LF\026\205\037:\226\017\372>@\322LF*L\2458\000\000\000\000@\322LF\000\000\000\000\202\222\2378=\322LF$9l\264\024\330\233=G\322LFj\244F5\000\000\000\000G\322LF\000\000\000\000\202\222\2378H\322LFw\314\2532\021\340\301?\177\323LF2]\3027\207#\034=\366\327LF\217\222\2628\000\000\000\000\366\327LF\000\000\000\000\000\000\000\000\366\327LF\000\000\000\000\000\000\000\000\366\327LF\000\000\000\000\241\275i>\367\327LF\006F\3013\000\000\000\000\367\327LF\000\000\000\000\n\327#<\366\327LF\006F\301\263~\213n=\353\260LF\220,C\272\274\226i>\367\327LF/XC:\254\333Y=\366\327LF\006F\301\263\251\306\213?\374\327LFY\331\0005\253\2512>\375\327LF\006F\3013\000\000\000\000\375\327LF\000\000\000\000\000\000\000\000\375\327LF\000\000\000\000dC\350?;\373LF|(0:\n\327\243<\000\374LF\022uvv=\000\374LF\315\002L5\000\000\000\000\000\374LF\000\000\000\000Lr\2378\000\374LF\000\000\000\0002&i=\000\374LF\000\000\000\000\n\327#<\000\374LF\000\000\000\000Lr\2378\000\374LF\000\000\000\000\363&y;\000\374LF\000\000\000\000HWe=\000\374LF\000\000\000\000\275\232\036>\000\374LF\000\000\000\200Lr\2378\000\374LF\000\000\000\000\000\000\000\000\000\374LF\000\000\000\000\212\224\351>\000\374LF\000\000\000\000Lr\2378\000\374LF\000\000\000\000\000\000\000\000\000\374LF\000\000\000\000!\263\205=\000\374LF\000\000\000\200\000\000\000\000\000\374LF\000\000\000\000Lr\2378\000\374LF\000\000\000\000\314\303\216@>\rMF\232F\2549\263\243\221@G/MF\010\366):\337l1>\273oMF\240\323\240:O\202\252=\222UMFGc\002\272\251\021\2378\341wMF\365\031+:\367-<>\000xMF\032\002\0316\000\000\000\000\000xMF\000\000\000\000\251\021\2378\000xMF\000\000\000\000\000\000\000\000\000xMF\000\000\000\000.\025%<\000xMF\000\000\000\200\000\000\000\000\000xMF\000\000\000\000\315\314L>\366wMF\315\002L\265\251\021\2378\000xMF\315\002L5\000\000\000\000\000xMF\000\000\000\000\257\262z@\366wMF\315\002L\265\000\000\000\000\366wMF\000\000\000\000\000\000\000\000\366wMF\000\000\000\000\251\021\2378\000xMF\315\002L5\000\000\000\000\000xMF\000\000\000\000\260y\270=\000xMF\000\000\000\000\033\r\240>\000xMF\000\000\000\000\251\021\2378\000xMF\000\000\000\000\370F3?\000xMF\000\000\000\000\027\331\016?PyMF$\214\3217\251\021\2378\354zMFV\r\0008\000\000\000\000\354zMF\000\000\000\000\004\025\037:\343zMF\r\3323\265\000\000\000\000\343zMF\000\000\000\000\251\021\2378\354zMF\r\33235\000\000\000\000\354zMF\000\000\000\000\000\000\000\000\354zMF\000\000\000\000\251\021\2378\354zMF\000\000\000\000lq\264<\321\202MF\210i\0359+\000\261>\311\213MF\220\30529\366(\234?\374\237MF)B\3119@\303\351>\366\237MFY\331\000\265\266\217X=\000\240MF\315\002L5.\377\021?\246\303MF\317\2101:\343\314x=\362\307MFt\000\2538\254\367F@\360\324MF\307L\2019\000\000\000\000\360\324MF\000\000\000\000\241x\215?X\362MFuM\022:\000\000\000\000X\362MF\000\000\000\000\000\000\000\000X\362MF\000\000\000\0000\256\231=\205\360MF4*\021\270\350\243\310<\256\374MFS\335q9\000\000\000\000\256\374MF\000\000\000\000\000\000\000\000\256\374MF\000\000\000\000\000\000\000\000\256\374MF\000\000\000\000\000\000\000\000\256\374MF\000\000\000\000\000\000\000\000\256\374MF\000\000\000\000\247\253\2368\024\375MF\316\001\3766\000\000\000\000\024\375MF\000\000\000\000\247\253\2368\024\375MF\000\000\000\000\000\000\000\000\024\375MF\000\000\000\000\n\327#<\024\375MF\000\000\000\000\247\253\2368\024\375MF\000\000\000\200\n\327#<\024\375MF\000\000\000\000\266F\'@X\004NF\253s\0209.\226\2368\000\030NFCd\3039\n\327\243<\000\030NF\000\000\000\000A\345\210@w\026NF3\\\364\267\243+&<\024\375MF\325>\374\271\000\000\000\000\024\375MF\000\000\000\000\006\360w<\024\375MF\000\000\000\200\000\000\000\000\024\375MF\000\000\000\000\n\327#<\024\375MF\000\000\000\000\002-\rB\3755MF_mw\273\177\341\200=2\251MF\305\270\017;\000\000\000\0002\251MF\000\000\000\000}\005\351=\354eMF2}\247\272\000\000\000\000\354eMF\000\000\000\000\000\000\000\000\354eMF\000\000\000\000\000\000\000\000\354eMF\000\000\000\000\000\000\000\000\354eMF\000\000\000\000\000\000\000\000\354eMF\000\000\000\000u\032Z?\353eMFw\314\253\262\000\000\000\000\353eMF\000\000\000\000\000\000\000\000\353eMF\000\000\000\000\016\365;:\341eMFj\244F\265\000\000\000\000\341eMF\000\000\000\000\\\217B?\\NMF\227\203\352\271\n\327#=\366OMFgY\3777\241x\215?/\026MF\264\023\220\272\000\000\000\000/\026MF\000\000\000\000\240\372\205>dPMFuP\221:\n\327#=fOMF~`\236\267h\221\355=hOMF!\226\0134\267p\351<\2013MF\304,\013\272\n\327\243<ZOMFo\372\n:\000\000\000\000ZOMF\000\000\000\000\n\327\243<\000(MF\300ED\272o\022\003;\366\'MF\315\002L\265\n\327#<\000(MF\315\002L5)\205\216<\000(MF\000\000\000\000\000\000\000\000\000(MF\000\000\000\000\025R\2378\000(MF\000\000\000\000\035q(?\000(MF\000\000\000\200\000\000\000\000\000(MF\000\000\000\000\331%\252< &MFR\307\025\270\254:l=\312\021MF\312\003\313\271\000\000\000\000\312\021MF\000\000\000\0008\022v=\315\'MF\'\324\3339\271\276\205=\300\016MF\316\r\372\271\023(\211>\315\'MF\254,\3729\025R\2378\315\'MF\000\000\000\000\000\000\000\000\315\'MF\000\000\000\000\000\000\000\000\315\'MF\000\000\000\000\025R\2378\315\'MF\000\000\000\000\000\000\000\000\315\'MF\000\000\000\000\312\371\005>\315\'MF\000\000\000\000\000\000\000\000\315\'MF\000\000\000\000\337\376\243=\315\'MF\000\000\000\000\000\000\000\000\315\'MF\000\000\000\000\251e\251?\315\'MF\000\000\000\000 \327\243;\303\'MF\315\002L\265\025R\2378\315\'MF\315\002L5\000\000\000\000\315\'MF\000\000\000\000\216\334\372>\303\'MF\315\002L\265\2333\000>\315\'MF\315\002L5\000\000\000\000\315\'MF\000\000\000\000ZD\002@\315\'MF\000\000\000\000\025R\2378\315\'MF\000\000\000\000\000\000\000\000\315\'MF\000\000\000\000\263&$=\315\'MF\000\000\000\000\000\000\000\000\315\'MF\000\000\000\000\000\000\000\000\315\'MF\000\000\000\000\200\212\351=\315\'MF\000\000\000\000\000\000\000\000\315\'MF\000\000\000\000\032\373L>\315\'MF\000\000\000\000\000\000\000\000\315\'MF\000\000\000\000\025R\2378\315\'MF\000\000\000\000\3647\241:\303\'MF\315\002L\265\363\216\263?mRMF:\365T:\215\001\2378\315\213MFW\022\217:\033\302\377>\036\356MF\035\347\364:\000\000\000\000\036\356MF\000\000\000\000d\266\2368\315\357MF]\314\0058\000\000\000\000\315\357MF\000\000\000\000\000\000\000\000\315\357MF\000\000\000\000\000\000\000\000\315\357MF\000\000\000\000\342\323\213=\032\355MF\242\224V\270\227w(?6\317MF\025\246\024\272\000\000\000\0006\317MF\000\000\000\000\000\000\000\0006\317MF\000\000\000\000\n\327\243=\303\210MF\371B\257\272\000\000\000\000\303\210MF\000\000\000\000\000\000\000\000\303\210MF\000\000\000\000\000\000\000\000\303\210MF\000\000\000\000\215\001\2378\n\214MF\210\274\2028\000\000\000\000\n\214MF\000\000\000\000\315\314L>\000\214MF\315\002L\265\220(\014@\\\350MF\025\020\346:\000\000\000\000\\\350MF\000\000\000\000\232\326\2368R\307MF\202P$\272\245\034\010?9\304MF;\300v\270\353\\\334?\246\273MF\200\242*\271\321\366\23683\231MF\221v+\272\000\000\000\0003\231MF\000\000\000\000\321\366\2368\205\230MF\372\302X\267\000\000\000\000\205\230MF\000\000\000\000\000\000\000\000\205\230MF\000\000\000\000\000\000\000\000\205\230MF\000\000\000\000\321\366\2368\205\230MF\000\000\000\000\000\000\000\000\205\230MF\000\000\000\000\000\000\000\000\205\230MF\000\000\000\000\321\366\2368\205\230MF\000\000\000\000\000\000\000\000\205\230MF\000\000\000\000\321\366\2368\205\230MF\000\000\000\000)\\\217>{\230MF\315\002L\265\327\251\013>\314\310MF\355\243p:\000\000\000\000\314\310MF\000\000\000\000\207\026Y>k\234MF*\323\\\272\273\036G>\205\230MF\251P\233\270\000\000\000\000\205\230MF\000\000\000\000\354Q8=\010\231MF\010>#7\000\000\000\000\010\231MF\000\000\000\000\000\000\000\000\010\231MF\000\000\000\000\323\320c>\304\233MF3\257Y8\000\000\000\000\304\233MF\000\000\000\000\321\366\2368\315\233MF?\21165\000\000\000\000\315\233MF\000\000\000\000\276\312\256<\303\233MF\315\002L\265\000\000\000\000\303\233MF\000\000\000\000\000\000\000\000\303\233MF\000\000\000\000\020\013\317<\315\233MF\315\002L5\000\000\000\000\315\233MF\000\000\000\000\321\366\2368\315\233MF\000\000\000\000\000\000\000\000\315\233MF\000\000\000\000\321\366\2368\315\233MF\000\000\000\000\000\000\000\000\315\233MF\000\000\000\000\332\251f>\315\233MF\000\000\000\000\000\000\000\000\315\233MF\000\000\000\000w\314\313<\315\233MF\000\000\000\200\000\000\000\000\315\233MF\000\000\000\000\322 <?\315\233MFw\314+2\007I:<\024\237MFm\254\2028\000\000\000\000\024\237MF\000\000\000\000\000\000\000\000\024\237MF\000\000\000\000\000\000\000\000\024\237MF\000\000\000\000\n\327#<\327\237MFTCr7\000\000\000\000\327\237MF\000\000\000\000\000\000\000\000\327\237MF\000\000\000\000%\366\036:\315\237MF\315\002L\265\000\000\000\000\315\237MF\000\000\000\000\000\000\000\000\315\237MF\000\000\000\000\000\000\000\000\315\237MF\000\000\000\000\n\327#<\327\237MF\315\002L5\222_=>\327\237MF\000\000\000\000r\361\2368\327\237MF\000\000\000\000\000\000\000\000\327\237MF\000\000\000\000\357\t\200>\327\237MF\000\000\000\200\000\000\000\000\327\237MF\000\000\000\000\n\327#<\327\237MF\000\000\000\000r\361\2368\327\237MF\000\000\000\000\000\000\000\000\327\237MF\000\000\000\000\220\2408>\327\237MF\000\000\000\000R\236y<\327\237MF\000\000\000\000\"\'\2378\327\237MF\000\000\000\000\000\000\000\000\327\237MF\000\000\000\0001\273\230=\327\237MF\000\000\000\200\000\000\000\000\327\237MF\000\000\000\000R\204\321<\327\237MF\000\000\000\000\000\000\000\000\327\237MF\000\000\000\000r\361\2368\327\237MF\000\000\000\200\n\327\243<\327\237MF\000\000\000\200\000\000\000\000\327\237MF\000\000\000\000\371\006\2628\327\237MF\000\000\000\000\000\000\000\000\327\237MF\000\000\000\000\000\000\000\000\327\237MF\000\000\000\000#T!:\315\237MF\315\002L\265\000\000\000\000\315\237MF\000\000\000\000\000\000\000\000\315\237MF\000\000\000\000R\236y<\327\237MF\315\002L5\000\000\000\000\327\237MF\000\000\000\000r\361\2368\327\237MF\000\000\000\000\000\000\000\000\327\237MF\000\000\000\000(]\036=\315\237MF\315\002L\265r\361\2368\327\237MF\315\002L5\001\237\203=\327\237MF\000\000\000\000\322\257\273>\327\237MF\000\000\000\200\000\000\000\000\327\237MF\000\000\000\000r\361\2368\327\237MF\000\000\000\000\000\000\000\000\327\237MF\000\000\000\000\000\000\000\000\327\237MF\000\000\000\000r\361\2368\327\237MF\000\000\000\000\000\000\000\000\327\237MF\000\000\000\000r\361\2368\327\237MF\000\000\000\000\000\000\000\000\327\237MF\000\000\000\000\000\000\000\000\327\237MF\000\000\000\000\024\207\217=\327\237MF\000\000\000\000\000\000\000\000\327\237MF\000\000\000\000\315\314L>\315\237MF\315\002L\265\000\000\000\000\315\237MF\000\000\000\000\314\210 :\315\237MF\000\000\000\200\000\000\000\000\315\237MF\000\000\000\000\000\000\000\000\315\237MF\000\000\000\000\351`\314?\237\240MF\277\334\2027\000\000\000\000\237\240MF\000\000\000\000W\341\2368\232\272MF\221_\001:\000\000\000\000\232\272MF\000\000\000\000\242\264\327?V\333MF/\360\":!\301\2368)\337MF\2710\2308\000\000\000\000)\337MF\000\000\000\000\000\000\000\000)\337MF\000\000\000\000\206[a> \337MFp89\265\000\000\000\000 \337MF\000\000\000\000x\274d=\234\316MFqF\244\271\000\000\000\000\234\316MF\000\000\000\000\016}\'>\\\336MF\265\271\2349\247Ry<=\336MF\032\002\031\266\000\000\000\000=\336MF\000\000\000\000\000\000\000\000=\336MF\000\000\000\000\177\306\2368\024\335MF\035\242\270\267\000\000\000\000\024\335MF\000\000\000\000\000\000\000\000\024\335MF\000\000\000\000\331\033\2458\366\334MF\032\002\031\266\000\000\000\000\366\334MF\000\000\000\000\000\000\000\000\366\334MF\000\000\000\0005\227\037:\354\334MF\315\002L\265\000\000\000\000\354\334MF\000\000\000\000\000\000\000\000\354\334MF\000\000\000\000M\'M=\366\334MF\315\002L5\221\017j?\366\334MF\000\000\000\000\263\373\237;\354\334MF\234SI\265\315\314L=\366\334MF\234SI5\373\274\350=\366\334MF\000\000\000\200\000\000\000\000\366\334MF\000\000\000\000U$\377>\354\334MFj\244F\265\177\306\2368\366\334MFj\244F5\000\000\000\000\366\334MF\000\000\000\000\000\000\200>\366\334MF\000\000\000\000\223kM=\366\334MF\000\000\000\000\000\000\000\000\366\334MF\000\000\000\000\000\000\000\000\366\334MF\000\000\000\000\177\306\2368\366\334MF\000\000\000\200\nj\244F5\315\314L>\354\334MFjn\327\243<\366\334MF\315\002L5\000\000\000\000\366\334MF\000\000\000\000\000\000\000\000\366\334MF\000\000\000\000\000\000\000\000\366\334MF\000\000\000\000\244_z>\366\334MFw\314+\262\000\000\000\000\366\334MF\000\000\000\000 cn>\366\334MFw\314+2\000\000\000\000\366\334MF\000\000\000\000\202\342W?\n\354MF\020\005\2269\301\377w<\000\360MF\276\211\2358\377\234U>\000\360MF\000\000\000\000\000\000\000\000\000\360MF\000\000\000\000\000\000\000\000\000\360MF\000\000\000\000\321\377\271<\000\360MF\000\000\000\000\000\000\000\000\000\360MF\000\000\000\000\177j\274<\000\360MF\000\000\000\000\315\314L=\000\360MF\000\000\000\000\000\000\000\000\000\360MF\000\000\000\000\000\000\000\000\000\360MF\000\000\000\0003%\010=\000\360MF\000\000\000\000\303\010\314=\000\360MF\000\000\000\000\216\371\013?\376\357MF\260\017!\264sb-?h\366MFY\036\3778\032\300\373?\370\373MF\342?\3358\254\254\313<\024\375MFn\352\2607\000\000\000\000\024\375MF\000\000\000\000\217\302\365<\024\375MF\000\000\000\000\000\000\000\000\024\375MF\000\000\000\000\000\000\000\000\024\375MF\000\000\000\000\343V\177=\024\375MF\000\000\000\000\244\276\312?\024\375MF\000\000\000\000_\271/@j\000NF\267\237\2048\000\000\000\000j\000NF\000\000\000\000\n\327#<\315\004NF/f\2568\000\000\000\000\315\004NF\000\000\000\000\000\000\000\000\315\004NF\000\000\000\000\000\000\240@\303\004NF\315\002L\265\000\000\000\000\303\004NF\000\000\000\000\000\000\000\000\303\004NF\000\000\000\000\317\324\321>\365\006NF\234\246.8\000\000\000\000\365\006NF\000\000\000\000\000\000\000\000\365\006NF\000\000\000\000\250W*?X\027NF\033\344\2429\000\000\000\000X\027NF\000\000\000\000.\226\2368f\027NF\204\364\2205\000\000\000\000f\027NF\000\000\000\000.\226\2368f\027NF\000\000\000\000$\2637?\t\031NFB\373\0018(Nh>\000\034NF\216\255k8.\226\2368\000\034NF\000\000\000\000\240\202\325>\000\034NF\000\000\000\000\237\000\240@\366\033NF\315\002L\265\000\000\000\000\366\033NF\000\000\000\000\000\000\000\000\366\033NF\000\000\000\000.\226\2368\000\034NF\315\002L5\000\000\000\000\000\034NF\000\000\000\000\202\021\343?\322%NFC1C9\222\267w<\000,NFz\203\3658\022\206\2368\000,NF\000\000\000\000\000\000\000\000\000,NF\000\000\000\000\000\000\000\000\000,NF\000\000\000\000I\342\274;\000,NF\000\000\000\200\232\231\031>\366+NF\315\002L\265/G\240>\000,NF\315\002L5\022\206\2368\000,NF\000\000\000\000O\036\216?z.NF\301\253D8\000\000\000\000z.NF\000\000\000\000\367u\2368\000@NFP\024\2569\266^\331<\000@NF\000\000\000\200\367u\2368\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\367u\2368\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\367u\2368\000@NF\000\000\000\000\303Q\253>\000@NF\000\000\000\200\367u\2368\000@NF\000\000\000\000\275\303\232=\000@NF\000\000\000\000Q\266m9\000@NF\000\000\000\000\367u\2368\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\367u\2368\000@NF\000\000\000\000b\001\344<\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\367u\2368\000@NF\000\000\000\000 \236\024?\000@NF\000\000\000\000\367u\2368\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\311\3271<\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\367u\2368\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\367u\2368\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\337O\217=\000@NF\000\000\000\000I.\177>\366?NF\315\002L\265\366\022\033=\000@NF\315\002L5\000\000\000\000\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\367u\2368\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\367u\2368\000@NF\000\000\000\000\002+\207?\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\367u\2368\000@NF\000\000\000\000\000\000\000\000\000@NF\000\000\000\000\367u\2368\000@NF\000\000\000\000|\377\014AX\206NF\216\236\256:\n\327\243<\303\356NF\253nn8\035=\232<\000\364NF\313\21108\300\357\2358\000\364NF\000\000\000\000\332X\210<\000\364NF\000\000\000\000\000\000\000\000\000\364NF\000\000\000\000\300\357\2358\000\364NF\000\000\000\000\000\000\000\000\000\364NF\000\000\000\000\000\000\000\000\000\364NF\000\000\000\000\300\357\2358\000\364NF\000\000\000\000I\334\337?\335\002OF \030\2239\244\337\2358\000\010OF)<\3138\200^C>\000\010OF\000\000\000\000t\037\350<\000\010OF\000\000\000\200\r\273\205?\000\010OF\000\000\000\000\006a\335>\000\010OF\000\000\000\200*\3134@\031\016OF\000G\3618\000\000\000\000\031\016OF\000\000\000\000\020\274i?\223YOF\324\242\272:\000\000\000\000\223YOF\000\000\000\000\n\327\243<\366gOFY\026\2169\000\000\000\000\366gOF\000\000\000\000\000\000\000\000\366gOF\000\000\000\000\000\000\000\000\366gOF\000\000\000\000\000\000\000\000\366gOF\000\000\000\000\000\000\000\000\366gOF\000\000\000\000\201\225S?\354gOF\234SI\265\344\346\031=\366gOF\234SI5\000\000\000\000\366gOF\000\000\000\000!t\317<\366gOF\000\000\000\000\000\000\000\000\366gOF\000\000\000\000\000\000\000\000\366gOF\000\000\000\000\000\000\000?\354gOF\234SI\265\315\314L>\354gOF\000\000\000\000\000\000\000\000\354gOF\000\000\000\000\n\327\243<\366gOF\234SI5\000\000\000\000\366gOF\000\000\000\000\000\000\000\000\366gOF\000\000\000\000\210O\">\362gOF!\226\213\264\000\000\000\000\362gOF\000\000\000\000\000\000\000\000\362gOF\000\000\000\000\000\000\000\000\362gOF\000\000\000\000\n\327#<\366gOF!\226\2134C\317]=\366gOF\000\000\000\200\315\314L>\354gOF\234SI\265c\356j?\366gOF\234SI5\000\000\000\000\366gOF\000\000\000\000\000\000\000\000\366gOF\000\000\000\000\335\2320<\354gOF\234SI\265\000\000\000\000\354gOF\000\000\000\000\000\000\000\000\354gOF\000\000\000\000\000\000\000\000\354gOF\000\000\000\000K\364L>\354gOF\000\000\000\000\000\000\000\000\354gOF\000\000\000\000q=\312>\354gOF\000\000\000\200\305\367\307>\235(OFIG\234\272\315\314\314=\356\"OF1\313\340\270s\376\270=\327WOF\363\310\202:\000\000\000\000\327WOF\000\000\000\000b\314\347=\014#OF\347\\\202\272\315\314L=\000\010OF8\266\005\272\000\000\000\000\000\010OF\000\000\000\000\315\314L>\006\010OF$9\3544\000\000\000\000\006\010OF\000\000\000\000\2560N?a OFq\362\3609\225\372\017?x\366NF46O\272\000\000\000\000x\366NF\000\000\000\000\000\000\000\000x\366NF\000\000\000\000\000\000\000\000x\366NF\000\000\000\000\000\000\000\000x\366NF\000\000\000\000\000\000\000\000x\366NF\000\000\000\0007W\342=)\007OF\243.\2459\n\327#<)\007OF\000\000\000\000\1777\205?\037\007OF\234SI\2658\2119@\000\364NFc$\275\271#\237\334?\006\364NF\353\365\3664\335$\006>\314\346NF\323\350\202\271\000\000\000\000\314\346NF\000\000\000\000\235rihNFW\365\250\272\221\236.>\376gNF\006FA\264\255i~?\000hNF\006FA4X94<\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000R\237C;\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\036\326\252=\366gNF\315\002L\265\000\000\000\000\366gNF\000\000\000\000\217\302u=\000hNF\315\002L5\000\000\000\000\000hNF\000\000\000\000M\022\215;\366gNF\315\002L\265\354/\273>\000hNF\315\002L5\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\0001\353E:\366gNF\315\002L\265\000\000\000\000\366gNF\000\000\000\000\000\000\000\000\366gNF\000\000\000\000\000\000\000\000\366gNF\000\000\000\0001\000\205>\000hNF\315\002L5\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\000\000\000\000\000hNF\000\000\000\000\001\336\302>\000hNF\000\000\000\200(\306P>\000hNF\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Const"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12491
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "strided_slice"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12481
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -10
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2"
  op: "StridedSlice"
  input: "strided_slice"
  input: "strided_slice_2/stack"
  input: "strided_slice_2/stack_1"
  input: "strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12481
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "div"
  op: "RealDiv"
  input: "strided_slice_1"
  input: "strided_slice_2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12481
          }
        }
      }
    }
  }
}
node {
  name: "sub/y"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "div"
  input: "sub/y"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12481
          }
        }
      }
    }
  }
}
node {
  name: "strided_slice_3/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -10
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3"
  op: "StridedSlice"
  input: "Const"
  input: "strided_slice_3/stack"
  input: "strided_slice_3/stack_1"
  input: "strided_slice_3/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12481
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "sub"
  input: "Reshape/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12481
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "strided_slice_3"
  input: "Reshape"
  input: "concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12481
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "frame/frame_length"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "frame/frame_step"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "frame/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "frame/Rank"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "frame/range/start"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "frame/range/delta"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "frame/range"
  op: "Range"
  input: "frame/range/start"
  input: "frame/Rank"
  input: "frame/range/delta"
  device: "/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "frame/add/y"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "frame/add"
  op: "Add"
  input: "frame/axis"
  input: "frame/add/y"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "frame/strided_slice/stack"
  op: "Pack"
  input: "frame/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "frame/strided_slice/stack_1"
  op: "Pack"
  input: "frame/add"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "frame/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "frame/strided_slice"
  op: "StridedSlice"
  input: "frame/range"
  input: "frame/strided_slice/stack"
  input: "frame/strided_slice/stack_1"
  input: "frame/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "frame/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\3010\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "frame/sub/y"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "frame/sub"
  op: "Sub"
  input: "frame/Rank"
  input: "frame/sub/y"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "frame/sub_1"
  op: "Sub"
  input: "frame/sub"
  input: "frame/strided_slice"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "frame/packed/1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "frame/packed"
  op: "Pack"
  input: "frame/strided_slice"
  input: "frame/packed/1"
  input: "frame/sub_1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "frame/split/split_dim"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "frame/split"
  op: "SplitV"
  input: "frame/Shape"
  input: "frame/packed"
  input: "frame/split/split_dim"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 3
    }
  }
}
node {
  name: "frame/Reshape/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "frame/Reshape"
  op: "Reshape"
  input: "frame/split:1"
  input: "frame/Reshape/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "frame/Size"
  op: "Size"
  input: "frame/split"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "frame/Size_1"
  op: "Size"
  input: "frame/split:2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "frame/sub_2"
  op: "Sub"
  input: "frame/Reshape"
  input: "frame/frame_length"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "frame/floordiv"
  op: "FloorDiv"
  input: "frame/sub_2"
  input: "frame/frame_step"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "frame/add_1/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "frame/add_1"
  op: "Add"
  input: "frame/add_1/x"
  input: "frame/floordiv"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "frame/Maximum/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "frame/Maximum"
  op: "Maximum"
  input: "frame/Maximum/x"
  input: "frame/add_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "frame/gcd/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "frame/floordiv_1"
  op: "FloorDiv"
  input: "frame/frame_length"
  input: "frame/gcd/Const"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "frame/floordiv_2"
  op: "FloorDiv"
  input: "frame/frame_step"
  input: "frame/gcd/Const"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "frame/floordiv_3"
  op: "FloorDiv"
  input: "frame/Reshape"
  input: "frame/gcd/Const"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "frame/mul"
  op: "Mul"
  input: "frame/floordiv_3"
  input: "frame/gcd/Const"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "frame/concat/values_1"
  op: "Pack"
  input: "frame/mul"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "frame/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "frame/concat"
  op: "ConcatV2"
  input: "frame/split"
  input: "frame/concat/values_1"
  input: "frame/split:2"
  input: "frame/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "frame/concat_1/values_1"
  op: "Pack"
  input: "frame/floordiv_3"
  input: "frame/gcd/Const"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "frame/concat_1/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "frame/concat_1"
  op: "ConcatV2"
  input: "frame/split"
  input: "frame/concat_1/values_1"
  input: "frame/split:2"
  input: "frame/concat_1/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "frame/zeros_like"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "frame/ones_like/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "frame/ones_like/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "frame/ones_like"
  op: "Fill"
  input: "frame/ones_like/Shape"
  input: "frame/ones_like/Const"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "frame/StridedSlice"
  op: "StridedSlice"
  input: "concat"
  input: "frame/zeros_like"
  input: "frame/concat"
  input: "frame/ones_like"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "frame/Reshape_1"
  op: "Reshape"
  input: "frame/StridedSlice"
  input: "frame/concat_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "frame/range_1/start"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "frame/range_1/delta"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "frame/range_1"
  op: "Range"
  input: "frame/range_1/start"
  input: "frame/Maximum"
  input: "frame/range_1/delta"
  device: "/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "frame/mul_1"
  op: "Mul"
  input: "frame/range_1"
  input: "frame/floordiv_2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "frame/Reshape_2/shape/1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "frame/Reshape_2/shape"
  op: "Pack"
  input: "frame/Maximum"
  input: "frame/Reshape_2/shape/1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "frame/Reshape_2"
  op: "Reshape"
  input: "frame/mul_1"
  input: "frame/Reshape_2/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "frame/range_2/start"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "frame/range_2/delta"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "frame/range_2"
  op: "Range"
  input: "frame/range_2/start"
  input: "frame/floordiv_1"
  input: "frame/range_2/delta"
  device: "/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "frame/Reshape_3/shape/0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "frame/Reshape_3/shape"
  op: "Pack"
  input: "frame/Reshape_3/shape/0"
  input: "frame/floordiv_1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "frame/Reshape_3"
  op: "Reshape"
  input: "frame/range_2"
  input: "frame/Reshape_3/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "frame/add_2"
  op: "Add"
  input: "frame/Reshape_2"
  input: "frame/Reshape_3"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "frame/GatherV2"
  op: "GatherV2"
  input: "frame/Reshape_1"
  input: "frame/add_2"
  input: "frame/strided_slice"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "frame/concat_2/values_1"
  op: "Pack"
  input: "frame/Maximum"
  input: "frame/frame_length"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "frame/concat_2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "frame/concat_2"
  op: "ConcatV2"
  input: "frame/split"
  input: "frame/concat_2/values_1"
  input: "frame/split:2"
  input: "frame/concat_2/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "frame/Reshape_4"
  op: "Reshape"
  input: "frame/GatherV2"
  input: "frame/concat_2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12382
          }
          dim {
            size: 100
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "strided_slice_4/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_4"
  op: "StridedSlice"
  input: "frame/Reshape_4"
  input: "strided_slice_4/stack"
  input: "strided_slice_4/stack_1"
  input: "strided_slice_4/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12382
          }
          dim {
            size: 100
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 7
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_5/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_5"
  op: "StridedSlice"
  input: "frame/Reshape_4"
  input: "strided_slice_5/stack"
  input: "strided_slice_5/stack_1"
  input: "strided_slice_5/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12382
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 4
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "Iterator"
  op: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "strided_slice_4"
  input: "strided_slice_5"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "BatchDataset"
  op: "BatchDataset"
  input: "ShuffleDataset"
  input: "batch_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "BatchDataset"
  input: "count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "RepeatDataset"
  input: "Iterator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "rnn/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/range"
  op: "Range"
  input: "rnn/range/start"
  input: "rnn/Rank"
  input: "rnn/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/concat"
  op: "ConcatV2"
  input: "rnn/concat/values_0"
  input: "rnn/range"
  input: "rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn/transpose"
  op: "Transpose"
  input: "IteratorGetNext"
  input: "rnn/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn/Shape"
  op: "Shape"
  input: "rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice"
  op: "StridedSlice"
  input: "rnn/Shape"
  input: "rnn/strided_slice/stack"
  input: "rnn/strided_slice/stack_1"
  input: "rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_2"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_2"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat"
  op: "ConcatV2"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros"
  op: "Fill"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_1"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_2"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1"
  op: "ConcatV2"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_2"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_2"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1"
  op: "Fill"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_3"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/ExpandDims"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat"
  op: "ConcatV2"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/ExpandDims"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros"
  op: "Fill"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/ExpandDims_1"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/ExpandDims_2"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat_1"
  op: "ConcatV2"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/ExpandDims_2"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const_2"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros_1"
  op: "Fill"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat_1"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/ExpandDims_3"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "rnn/Shape_1"
  op: "Shape"
  input: "rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_1"
  op: "StridedSlice"
  input: "rnn/Shape_1"
  input: "rnn/strided_slice_1/stack"
  input: "rnn/strided_slice_1/stack_1"
  input: "rnn/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/Shape_2"
  op: "Shape"
  input: "rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_2"
  op: "StridedSlice"
  input: "rnn/Shape_2"
  input: "rnn/strided_slice_2/stack"
  input: "rnn/strided_slice_2/stack_1"
  input: "rnn/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/ExpandDims"
  op: "ExpandDims"
  input: "rnn/strided_slice_2"
  input: "rnn/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "rnn/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/concat_1"
  op: "ConcatV2"
  input: "rnn/ExpandDims"
  input: "rnn/Const"
  input: "rnn/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/zeros"
  op: "Fill"
  input: "rnn/concat_1"
  input: "rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArray"
  op: "TensorArrayV3"
  input: "rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "rnn/TensorArrayUnstack/Shape"
  input: "rnn/TensorArrayUnstack/strided_slice/stack"
  input: "rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "rnn/TensorArrayUnstack/range/start"
  input: "rnn/TensorArrayUnstack/strided_slice"
  input: "rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "rnn/TensorArray_1"
  input: "rnn/TensorArrayUnstack/range"
  input: "rnn/transpose"
  input: "rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/while/Enter"
  op: "Enter"
  input: "rnn/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_1"
  op: "Enter"
  input: "rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_2"
  op: "Enter"
  input: "rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_3"
  op: "Enter"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_4"
  op: "Enter"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_5"
  op: "Enter"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_6"
  op: "Enter"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_7"
  op: "Enter"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_8"
  op: "Enter"
  input: "rnn/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Merge"
  op: "Merge"
  input: "rnn/while/Enter"
  input: "rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_1"
  op: "Merge"
  input: "rnn/while/Enter_1"
  input: "rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_2"
  op: "Merge"
  input: "rnn/while/Enter_2"
  input: "rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_3"
  op: "Merge"
  input: "rnn/while/Enter_3"
  input: "rnn/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_4"
  op: "Merge"
  input: "rnn/while/Enter_4"
  input: "rnn/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_5"
  op: "Merge"
  input: "rnn/while/Enter_5"
  input: "rnn/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_6"
  op: "Merge"
  input: "rnn/while/Enter_6"
  input: "rnn/while/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_7"
  op: "Merge"
  input: "rnn/while/Enter_7"
  input: "rnn/while/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_8"
  op: "Merge"
  input: "rnn/while/Enter_8"
  input: "rnn/while/NextIteration_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Less"
  op: "Less"
  input: "rnn/while/Merge"
  input: "rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Less/Enter"
  op: "Enter"
  input: "rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Less_1"
  op: "Less"
  input: "rnn/while/Merge_1"
  input: "rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/LogicalAnd"
  op: "LogicalAnd"
  input: "rnn/while/Less"
  input: "rnn/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/LoopCond"
  op: "LoopCond"
  input: "rnn/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch"
  op: "Switch"
  input: "rnn/while/Merge"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_1"
  op: "Switch"
  input: "rnn/while/Merge_1"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_2"
  op: "Switch"
  input: "rnn/while/Merge_2"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_3"
  op: "Switch"
  input: "rnn/while/Merge_3"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_4"
  op: "Switch"
  input: "rnn/while/Merge_4"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_5"
  op: "Switch"
  input: "rnn/while/Merge_5"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_6"
  op: "Switch"
  input: "rnn/while/Merge_6"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_7"
  op: "Switch"
  input: "rnn/while/Merge_7"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_8"
  op: "Switch"
  input: "rnn/while/Merge_8"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity"
  op: "Identity"
  input: "rnn/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_1"
  op: "Identity"
  input: "rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_2"
  op: "Identity"
  input: "rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_3"
  op: "Identity"
  input: "rnn/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_4"
  op: "Identity"
  input: "rnn/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_5"
  op: "Identity"
  input: "rnn/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_6"
  op: "Identity"
  input: "rnn/while/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_7"
  op: "Identity"
  input: "rnn/while/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_8"
  op: "Identity"
  input: "rnn/while/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/add/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/add"
  op: "Add"
  input: "rnn/while/Identity"
  input: "rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "rnn/while/TensorArrayReadV3/Enter"
  input: "rnn/while/Identity_1"
  input: "rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\027\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.24135538935661316
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.24135538935661316
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 23
        }
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Const"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "rnn/while/TensorArrayReadV3"
  input: "rnn/while/Identity_4"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/split"
  op: "Split"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Const"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add"
  op: "Add"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/split:2"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul"
  op: "Mul"
  input: "rnn/while/Identity_3"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Relu"
  op: "Relu"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
  op: "Add"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Relu_1"
  op: "Relu"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Relu_1"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.16514456272125244
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.16514456272125244
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Const"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
  input: "rnn/while/Identity_6"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 60
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/split"
  op: "Split"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Const"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add"
  op: "Add"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/split:2"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul"
  op: "Mul"
  input: "rnn/while/Identity_5"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Relu"
  op: "Relu"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
  op: "Add"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Relu_1"
  op: "Relu"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Relu_1"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "x\000\000\000@\001\000\000"
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.11677484214305878
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.11677484214305878
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
        dim {
          size: 320
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 320
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 320
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Const"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
  input: "rnn/while/Identity_8"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/split"
  op: "Split"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Const"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add"
  op: "Add"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/split:2"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul"
  op: "Mul"
  input: "rnn/while/Identity_7"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Relu"
  op: "Relu"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_1"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1"
  op: "Add"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Relu_1"
  op: "Relu"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Relu_1"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "rnn/while/Identity_1"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2"
  input: "rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/add_1/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/add_1"
  op: "Add"
  input: "rnn/while/Identity_1"
  input: "rnn/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration"
  op: "NextIteration"
  input: "rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "rnn/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_4"
  op: "NextIteration"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_5"
  op: "NextIteration"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_6"
  op: "NextIteration"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_7"
  op: "NextIteration"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_8"
  op: "NextIteration"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit"
  op: "Exit"
  input: "rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_1"
  op: "Exit"
  input: "rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_2"
  op: "Exit"
  input: "rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_3"
  op: "Exit"
  input: "rnn/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_4"
  op: "Exit"
  input: "rnn/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_5"
  op: "Exit"
  input: "rnn/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_6"
  op: "Exit"
  input: "rnn/while/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_7"
  op: "Exit"
  input: "rnn/while/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_8"
  op: "Exit"
  input: "rnn/while/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "rnn/TensorArray"
  input: "rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range"
  op: "Range"
  input: "rnn/TensorArrayStack/range/start"
  input: "rnn/TensorArrayStack/TensorArraySizeV3"
  input: "rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "rnn/TensorArray"
  input: "rnn/TensorArrayStack/range"
  input: "rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 80
        }
      }
    }
  }
}
node {
  name: "rnn/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "rnn/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/range_1"
  op: "Range"
  input: "rnn/range_1/start"
  input: "rnn/Rank_1"
  input: "rnn/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/concat_2"
  op: "ConcatV2"
  input: "rnn/concat_2/values_0"
  input: "rnn/range_1"
  input: "rnn/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn/transpose_1"
  op: "Transpose"
  input: "rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "rnn/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "P\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.27216553688049316
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.27216553688049316
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense/kernel/Initializer/random_uniform/max"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense/kernel/Initializer/random_uniform/mul"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Assign"
  op: "Assign"
  input: "dense/kernel"
  input: "dense/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/read"
  op: "Identity"
  input: "dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Assign"
  op: "Assign"
  input: "dense/bias"
  input: "dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/read"
  op: "Identity"
  input: "dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/Shape"
  op: "Shape"
  input: "rnn/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/Tensordot/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "dense/Tensordot/axes"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dense/Tensordot/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/GreaterEqual"
  op: "GreaterEqual"
  input: "dense/Tensordot/axes"
  input: "dense/Tensordot/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/Cast"
  op: "Cast"
  input: "dense/Tensordot/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/mul"
  op: "Mul"
  input: "dense/Tensordot/Cast"
  input: "dense/Tensordot/axes"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/Less"
  op: "Less"
  input: "dense/Tensordot/axes"
  input: "dense/Tensordot/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/Cast_1"
  op: "Cast"
  input: "dense/Tensordot/Less"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/add"
  op: "Add"
  input: "dense/Tensordot/axes"
  input: "dense/Tensordot/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/mul_1"
  op: "Mul"
  input: "dense/Tensordot/Cast_1"
  input: "dense/Tensordot/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/add_1"
  op: "Add"
  input: "dense/Tensordot/mul"
  input: "dense/Tensordot/mul_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dense/Tensordot/range"
  op: "Range"
  input: "dense/Tensordot/range/start"
  input: "dense/Tensordot/Rank"
  input: "dense/Tensordot/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/ListDiff"
  op: "ListDiff"
  input: "dense/Tensordot/range"
  input: "dense/Tensordot/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/Tensordot/Gather"
  op: "Gather"
  input: "dense/Tensordot/Shape"
  input: "dense/Tensordot/ListDiff"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dense/Tensordot/Gather_1"
  op: "Gather"
  input: "dense/Tensordot/Shape"
  input: "dense/Tensordot/add_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dense/Tensordot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/Prod"
  op: "Prod"
  input: "dense/Tensordot/Gather"
  input: "dense/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense/Tensordot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/Prod_1"
  op: "Prod"
  input: "dense/Tensordot/Gather_1"
  input: "dense/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dense/Tensordot/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/concat"
  op: "ConcatV2"
  input: "dense/Tensordot/Gather_1"
  input: "dense/Tensordot/Gather"
  input: "dense/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/concat_1"
  op: "ConcatV2"
  input: "dense/Tensordot/ListDiff"
  input: "dense/Tensordot/add_1"
  input: "dense/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/stack"
  op: "Pack"
  input: "dense/Tensordot/Prod"
  input: "dense/Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/Tensordot/transpose"
  op: "Transpose"
  input: "rnn/transpose_1"
  input: "dense/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/Reshape"
  op: "Reshape"
  input: "dense/Tensordot/transpose"
  input: "dense/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/transpose_1/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense/Tensordot/transpose_1"
  op: "Transpose"
  input: "dense/kernel/read"
  input: "dense/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "P\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense/Tensordot/Reshape_1"
  op: "Reshape"
  input: "dense/Tensordot/transpose_1"
  input: "dense/Tensordot/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot/MatMul"
  op: "MatMul"
  input: "dense/Tensordot/Reshape"
  input: "dense/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/Tensordot/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dense/Tensordot/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense/Tensordot/concat_2"
  op: "ConcatV2"
  input: "dense/Tensordot/Gather"
  input: "dense/Tensordot/Const_2"
  input: "dense/Tensordot/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dense/Tensordot"
  op: "Reshape"
  input: "dense/Tensordot/MatMul"
  input: "dense/Tensordot/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/Tensordot"
  input: "dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense/Relu"
  op: "Relu"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Squeeze"
  op: "Squeeze"
  input: "dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "mean_squared_error/SquaredDifference"
  op: "SquaredDifference"
  input: "IteratorGetNext:1"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/values/shape"
  op: "Shape"
  input: "mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "mean_squared_error/ToFloat_3/x"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mean_squared_error/Mul"
  op: "Mul"
  input: "mean_squared_error/SquaredDifference"
  input: "mean_squared_error/ToFloat_3/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/Const"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mean_squared_error/Sum"
  op: "Sum"
  input: "mean_squared_error/Mul"
  input: "mean_squared_error/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error/num_present/Equal/y"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/Equal"
  op: "Equal"
  input: "mean_squared_error/ToFloat_3/x"
  input: "mean_squared_error/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/zeros_like"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/ones_like/Shape"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/ones_like/Const"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/ones_like"
  op: "Fill"
  input: "mean_squared_error/num_present/ones_like/Shape"
  input: "mean_squared_error/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/Select"
  op: "Select"
  input: "mean_squared_error/num_present/Equal"
  input: "mean_squared_error/num_present/zeros_like"
  input: "mean_squared_error/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "mean_squared_error/SquaredDifference"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "mean_squared_error/SquaredDifference"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  input: "^mean_squared_error/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  input: "^mean_squared_error/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "mean_squared_error/num_present/broadcast_weights/ones_like/Shape"
  input: "mean_squared_error/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights"
  op: "Mul"
  input: "mean_squared_error/num_present/Select"
  input: "mean_squared_error/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/Const"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present"
  op: "Sum"
  input: "mean_squared_error/num_present/broadcast_weights"
  input: "mean_squared_error/num_present/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error/Const_1"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/Sum_1"
  op: "Sum"
  input: "mean_squared_error/Sum"
  input: "mean_squared_error/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error/Greater/y"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean_squared_error/Greater"
  op: "Greater"
  input: "mean_squared_error/num_present"
  input: "mean_squared_error/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/Equal/y"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean_squared_error/Equal"
  op: "Equal"
  input: "mean_squared_error/num_present"
  input: "mean_squared_error/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/ones_like/Shape"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/ones_like/Const"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mean_squared_error/ones_like"
  op: "Fill"
  input: "mean_squared_error/ones_like/Shape"
  input: "mean_squared_error/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/Select"
  op: "Select"
  input: "mean_squared_error/Equal"
  input: "mean_squared_error/ones_like"
  input: "mean_squared_error/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/div"
  op: "RealDiv"
  input: "mean_squared_error/Sum_1"
  input: "mean_squared_error/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean_squared_error/zeros_like"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean_squared_error/value"
  op: "Select"
  input: "mean_squared_error/Greater"
  input: "mean_squared_error/div"
  input: "mean_squared_error/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul_1/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/StackPushV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul_1/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/StackPushV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul_1/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/value_grad/zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/value_grad/Select"
  op: "Select"
  input: "mean_squared_error/Greater"
  input: "gradients/Fill"
  input: "gradients/mean_squared_error/value_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/value_grad/Select_1"
  op: "Select"
  input: "mean_squared_error/Greater"
  input: "gradients/mean_squared_error/value_grad/zeros_like"
  input: "gradients/Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/value_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mean_squared_error/value_grad/Select"
  input: "^gradients/mean_squared_error/value_grad/Select_1"
}
node {
  name: "gradients/mean_squared_error/value_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mean_squared_error/value_grad/Select"
  input: "^gradients/mean_squared_error/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mean_squared_error/value_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/value_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mean_squared_error/value_grad/Select_1"
  input: "^gradients/mean_squared_error/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mean_squared_error/value_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/div_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/div_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mean_squared_error/div_grad/Shape"
  input: "gradients/mean_squared_error/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/mean_squared_error/value_grad/tuple/control_dependency"
  input: "mean_squared_error/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/div_grad/Sum"
  op: "Sum"
  input: "gradients/mean_squared_error/div_grad/RealDiv"
  input: "gradients/mean_squared_error/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mean_squared_error/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/mean_squared_error/div_grad/Sum"
  input: "gradients/mean_squared_error/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/div_grad/Neg"
  op: "Neg"
  input: "mean_squared_error/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/mean_squared_error/div_grad/Neg"
  input: "mean_squared_error/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/mean_squared_error/div_grad/RealDiv_1"
  input: "mean_squared_error/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/div_grad/mul"
  op: "Mul"
  input: "gradients/mean_squared_error/value_grad/tuple/control_dependency"
  input: "gradients/mean_squared_error/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/mean_squared_error/div_grad/mul"
  input: "gradients/mean_squared_error/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mean_squared_error/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mean_squared_error/div_grad/Sum_1"
  input: "gradients/mean_squared_error/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mean_squared_error/div_grad/Reshape"
  input: "^gradients/mean_squared_error/div_grad/Reshape_1"
}
node {
  name: "gradients/mean_squared_error/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mean_squared_error/div_grad/Reshape"
  input: "^gradients/mean_squared_error/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mean_squared_error/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mean_squared_error/div_grad/Reshape_1"
  input: "^gradients/mean_squared_error/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mean_squared_error/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/mean_squared_error/div_grad/tuple/control_dependency"
  input: "gradients/mean_squared_error/Sum_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Sum_1_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/mean_squared_error/Sum_1_grad/Reshape"
  input: "gradients/mean_squared_error/Sum_1_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Select_grad/zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Select_grad/Select"
  op: "Select"
  input: "mean_squared_error/Equal"
  input: "gradients/mean_squared_error/div_grad/tuple/control_dependency_1"
  input: "gradients/mean_squared_error/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Select_grad/Select_1"
  op: "Select"
  input: "mean_squared_error/Equal"
  input: "gradients/mean_squared_error/Select_grad/zeros_like"
  input: "gradients/mean_squared_error/div_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mean_squared_error/Select_grad/Select"
  input: "^gradients/mean_squared_error/Select_grad/Select_1"
}
node {
  name: "gradients/mean_squared_error/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mean_squared_error/Select_grad/Select"
  input: "^gradients/mean_squared_error/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mean_squared_error/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mean_squared_error/Select_grad/Select_1"
  input: "^gradients/mean_squared_error/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mean_squared_error/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/mean_squared_error/Sum_1_grad/Tile"
  input: "gradients/mean_squared_error/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Sum_grad/Shape"
  op: "Shape"
  input: "mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mean_squared_error/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/mean_squared_error/Sum_grad/Reshape"
  input: "gradients/mean_squared_error/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Mul_grad/Shape"
  op: "Shape"
  input: "mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mean_squared_error/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mean_squared_error/Mul_grad/Shape"
  input: "gradients/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Mul_grad/mul"
  op: "Mul"
  input: "gradients/mean_squared_error/Sum_grad/Tile"
  input: "mean_squared_error/ToFloat_3/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/mean_squared_error/Mul_grad/mul"
  input: "gradients/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mean_squared_error/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/mean_squared_error/Mul_grad/Sum"
  input: "gradients/mean_squared_error/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Mul_grad/mul_1"
  op: "Mul"
  input: "mean_squared_error/SquaredDifference"
  input: "gradients/mean_squared_error/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/mean_squared_error/Mul_grad/mul_1"
  input: "gradients/mean_squared_error/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mean_squared_error/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mean_squared_error/Mul_grad/Sum_1"
  input: "gradients/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mean_squared_error/Mul_grad/Reshape"
  input: "^gradients/mean_squared_error/Mul_grad/Reshape_1"
}
node {
  name: "gradients/mean_squared_error/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mean_squared_error/Mul_grad/Reshape"
  input: "^gradients/mean_squared_error/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mean_squared_error/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mean_squared_error/Mul_grad/Reshape_1"
  input: "^gradients/mean_squared_error/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mean_squared_error/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present_grad/Reshape"
  op: "Reshape"
  input: "gradients/mean_squared_error/Select_grad/tuple/control_dependency_1"
  input: "gradients/mean_squared_error/num_present_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present_grad/Shape"
  op: "Shape"
  input: "mean_squared_error/num_present/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present_grad/Tile"
  op: "Tile"
  input: "gradients/mean_squared_error/num_present_grad/Reshape"
  input: "gradients/mean_squared_error/num_present_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present/broadcast_weights_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present/broadcast_weights_grad/Shape_1"
  op: "Shape"
  input: "mean_squared_error/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present/broadcast_weights_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mean_squared_error/num_present/broadcast_weights_grad/Shape"
  input: "gradients/mean_squared_error/num_present/broadcast_weights_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present/broadcast_weights_grad/mul"
  op: "Mul"
  input: "gradients/mean_squared_error/num_present_grad/Tile"
  input: "mean_squared_error/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present/broadcast_weights_grad/Sum"
  op: "Sum"
  input: "gradients/mean_squared_error/num_present/broadcast_weights_grad/mul"
  input: "gradients/mean_squared_error/num_present/broadcast_weights_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present/broadcast_weights_grad/Reshape"
  op: "Reshape"
  input: "gradients/mean_squared_error/num_present/broadcast_weights_grad/Sum"
  input: "gradients/mean_squared_error/num_present/broadcast_weights_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present/broadcast_weights_grad/mul_1"
  op: "Mul"
  input: "mean_squared_error/num_present/Select"
  input: "gradients/mean_squared_error/num_present_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present/broadcast_weights_grad/Sum_1"
  op: "Sum"
  input: "gradients/mean_squared_error/num_present/broadcast_weights_grad/mul_1"
  input: "gradients/mean_squared_error/num_present/broadcast_weights_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present/broadcast_weights_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mean_squared_error/num_present/broadcast_weights_grad/Sum_1"
  input: "gradients/mean_squared_error/num_present/broadcast_weights_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present/broadcast_weights_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mean_squared_error/num_present/broadcast_weights_grad/Reshape"
  input: "^gradients/mean_squared_error/num_present/broadcast_weights_grad/Reshape_1"
}
node {
  name: "gradients/mean_squared_error/num_present/broadcast_weights_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mean_squared_error/num_present/broadcast_weights_grad/Reshape"
  input: "^gradients/mean_squared_error/num_present/broadcast_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mean_squared_error/num_present/broadcast_weights_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present/broadcast_weights_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mean_squared_error/num_present/broadcast_weights_grad/Reshape_1"
  input: "^gradients/mean_squared_error/num_present/broadcast_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mean_squared_error/num_present/broadcast_weights_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present/broadcast_weights/ones_like_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/num_present/broadcast_weights/ones_like_grad/Sum"
  op: "Sum"
  input: "gradients/mean_squared_error/num_present/broadcast_weights_grad/tuple/control_dependency_1"
  input: "gradients/mean_squared_error/num_present/broadcast_weights/ones_like_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/Shape_1"
  op: "Shape"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mean_squared_error/SquaredDifference_grad/Shape"
  input: "gradients/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^gradients/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/mul"
  op: "Mul"
  input: "gradients/mean_squared_error/SquaredDifference_grad/scalar"
  input: "gradients/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/sub"
  op: "Sub"
  input: "IteratorGetNext:1"
  input: "Squeeze"
  input: "^gradients/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "gradients/mean_squared_error/SquaredDifference_grad/mul"
  input: "gradients/mean_squared_error/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "gradients/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "gradients/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "gradients/mean_squared_error/SquaredDifference_grad/Sum"
  input: "gradients/mean_squared_error/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "gradients/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "gradients/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mean_squared_error/SquaredDifference_grad/Sum_1"
  input: "gradients/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "gradients/mean_squared_error/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "^gradients/mean_squared_error/SquaredDifference_grad/Neg"
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "^gradients/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mean_squared_error/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mean_squared_error/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mean_squared_error/SquaredDifference_grad/Neg"
  input: "^gradients/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mean_squared_error/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Squeeze_grad/Shape"
  op: "Shape"
  input: "dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/mean_squared_error/SquaredDifference_grad/tuple/control_dependency_1"
  input: "gradients/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/Squeeze_grad/Reshape"
  input: "dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/dense/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dense/Relu_grad/ReluGrad"
  input: "^gradients/dense/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense/Relu_grad/ReluGrad"
  input: "^gradients/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot_grad/Shape"
  op: "Shape"
  input: "dense/Tensordot/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dense/Tensordot_grad/Reshape"
  op: "Reshape"
  input: "gradients/dense/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/dense/Tensordot_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/dense/Tensordot_grad/Reshape"
  input: "dense/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense/Tensordot/Reshape"
  input: "gradients/dense/Tensordot_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dense/Tensordot/MatMul_grad/MatMul"
  input: "^gradients/dense/Tensordot/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense/Tensordot/MatMul_grad/MatMul"
  input: "^gradients/dense/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/Tensordot/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense/Tensordot/MatMul_grad/MatMul_1"
  input: "^gradients/dense/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/Tensordot/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_grad/Shape"
  op: "Shape"
  input: "dense/Tensordot/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency"
  input: "gradients/dense/Tensordot/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "P\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/dense/Tensordot/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/dense/Tensordot/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "dense/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/dense/Tensordot/Reshape_grad/Reshape"
  input: "gradients/dense/Tensordot/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "dense/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Tensordot/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/dense/Tensordot/Reshape_1_grad/Reshape"
  input: "gradients/dense/Tensordot/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "rnn/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/dense/Tensordot/transpose_grad/transpose"
  input: "gradients/rnn/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn/TensorArray"
  input: "rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "rnn/while/Exit_2"
  input: "^gradients/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn/TensorArrayStack/range"
  input: "gradients/rnn/transpose_1_grad/transpose"
  input: "gradients/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "rnn/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_1"
  op: "ZerosLike"
  input: "rnn/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_2"
  op: "ZerosLike"
  input: "rnn/while/Exit_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_3"
  op: "ZerosLike"
  input: "rnn/while/Exit_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_4"
  op: "ZerosLike"
  input: "rnn/while/Exit_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_5"
  op: "ZerosLike"
  input: "rnn/while/Exit_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Exit_5_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Exit_6_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Exit_7_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Exit_8_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn/while/Exit_2_grad/b_exit"
  input: "gradients/rnn/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn/while/Exit_3_grad/b_exit"
  input: "gradients/rnn/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn/while/Exit_4_grad/b_exit"
  input: "gradients/rnn/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_5_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn/while/Exit_5_grad/b_exit"
  input: "gradients/rnn/while/Switch_5_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_6_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn/while/Exit_6_grad/b_exit"
  input: "gradients/rnn/while/Switch_6_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_7_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn/while/Exit_7_grad/b_exit"
  input: "gradients/rnn/while/Switch_7_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_8_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn/while/Exit_8_grad/b_exit"
  input: "gradients/rnn/while/Switch_8_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/rnn/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/Merge_2_grad/Switch"
  input: "^gradients/rnn/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_2_grad/Switch:1"
  input: "^gradients/rnn/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/Switch"
  input: "^gradients/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/Switch:1"
  input: "^gradients/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/rnn/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/Merge_4_grad/Switch"
  input: "^gradients/rnn/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_4_grad/Switch:1"
  input: "^gradients/rnn/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_5_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/Switch_5_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/Merge_5_grad/Switch"
}
node {
  name: "gradients/rnn/while/Merge_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/Merge_5_grad/Switch"
  input: "^gradients/rnn/while/Merge_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_5_grad/Switch:1"
  input: "^gradients/rnn/while/Merge_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_6_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/Switch_6_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_6_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/Merge_6_grad/Switch"
}
node {
  name: "gradients/rnn/while/Merge_6_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/Merge_6_grad/Switch"
  input: "^gradients/rnn/while/Merge_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_6_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_6_grad/Switch:1"
  input: "^gradients/rnn/while/Merge_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_7_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/Switch_7_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_7_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/Merge_7_grad/Switch"
}
node {
  name: "gradients/rnn/while/Merge_7_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/Merge_7_grad/Switch"
  input: "^gradients/rnn/while/Merge_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_7_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_7_grad/Switch:1"
  input: "^gradients/rnn/while/Merge_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_8_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/Switch_8_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_8_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/Merge_8_grad/Switch"
}
node {
  name: "gradients/rnn/while/Merge_8_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/Merge_8_grad/Switch"
  input: "^gradients/rnn/while/Merge_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_8_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_8_grad/Switch:1"
  input: "^gradients/rnn/while/Merge_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/rnn/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/rnn/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/rnn/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Enter_5_grad/Exit"
  op: "Exit"
  input: "gradients/rnn/while/Merge_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Enter_6_grad/Exit"
  op: "Exit"
  input: "gradients/rnn/while/Merge_6_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Enter_7_grad/Exit"
  op: "Exit"
  input: "gradients/rnn/while/Merge_7_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Enter_8_grad/Exit"
  op: "Exit"
  input: "gradients/rnn/while/Merge_8_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "rnn/while/Identity_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul_1/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul_1/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul_1/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
}
node {
  name: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/rnn/while/Merge_8_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul"
  op: "Mul"
  input: "gradients/AddN"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2"
  input: "gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Relu_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Relu_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/mul/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/rnn/while/Merge_7_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Relu_1_grad/ReluGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Shape"
  op: "Shape"
  input: "rnn/while/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul_1"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul_1/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul_1/Enter"
  input: "rnn/while/Identity_7"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/mul/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_7_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Relu_grad/ReluGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Add_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/split_grad/concat"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/split_grad/concat"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 320
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/mod/Const"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/Enter_1"
  input: "rnn/while/Identity_8"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/mod"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/Slice_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/rnn/while/Merge_6_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul"
  op: "Mul"
  input: "gradients/AddN_2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2"
  input: "gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Relu_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Relu_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/mul/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_8_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/rnn/while/Merge_5_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Relu_1_grad/ReluGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_3"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_3"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Shape"
  op: "Shape"
  input: "rnn/while/Identity_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul_1"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul_1/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul_1/Enter"
  input: "rnn/while/Identity_5"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/mul/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_5_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Relu_grad/ReluGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Add_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/split_grad/concat"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/split_grad/concat"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 60
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 60
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 60
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 60
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/mod/Const"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/Enter_1"
  input: "rnn/while/Identity_6"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/mod"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/Slice_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/rnn/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul"
  op: "Mul"
  input: "gradients/AddN_4"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2"
  input: "gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Relu_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Relu_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/mul/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_6_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Relu_1_grad/ReluGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_5"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_5"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Shape"
  op: "Shape"
  input: "rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul_1"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul_1/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul_1/Enter"
  input: "rnn/while/Identity_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Relu"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/mul/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul_1/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Sum_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Reshape_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Reshape"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Reshape_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Relu_grad/ReluGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Add_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/split_grad/concat"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/split_grad/concat"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 23
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/mod/Const"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "rnn/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/Enter"
  input: "rnn/while/TensorArrayReadV3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "rnn/strided_slice_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/Enter_1"
  input: "rnn/while/Identity_4"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/mod"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/Slice"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/Slice_1"
  input: "^gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 23
        }
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 23
        }
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
        dim {
          size: 320
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
        dim {
          size: 320
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 320
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 320
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 320
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 320
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Adam/Assign"
  op: "Assign"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/Adam/read"
  op: "Identity"
  input: "dense/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Assign"
  op: "Assign"
  input: "dense/kernel/Adam_1"
  input: "dense/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/Adam_1/read"
  op: "Identity"
  input: "dense/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Adam/Assign"
  op: "Assign"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/Adam/read"
  op: "Identity"
  input: "dense/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Adam_1/Assign"
  op: "Assign"
  input: "dense/bias/Adam_1"
  input: "dense/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/Adam_1/read"
  op: "Identity"
  input: "dense/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn/while/rnn/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "dense/kernel"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/dense/Tensordot/transpose_1_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "dense/bias"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/dense/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
}
node {
  name: "Adam/value"
  op: "Const"
  input: "^Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "mean_squared_error/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  input: "^rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  input: "^rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Assign"
  input: "^rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Assign"
  input: "^rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Assign"
  input: "^rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Assign"
  input: "^dense/kernel/Assign"
  input: "^dense/bias/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/Assign"
  input: "^rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/Assign"
  input: "^rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam/Assign"
  input: "^rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam/Assign"
  input: "^rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam/Assign"
  input: "^rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam/Assign"
  input: "^rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^dense/kernel/Adam/Assign"
  input: "^dense/kernel/Adam_1/Assign"
  input: "^dense/bias/Adam/Assign"
  input: "^dense/bias/Adam_1/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dense/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 27
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "global_step"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
        string_val: "dense/kernel"
        string_val: "dense/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/Gather"
  input: "report_uninitialized_resources/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dense/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dense/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 27
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "global_step"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
        string_val: "dense/kernel"
        string_val: "dense/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_all_tables"
  input: "^init_3"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_040b2cb21c8c406b8dec145dde351941/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "dense/bias"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "dense/kernel"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "global_step"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam"
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam"
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 27
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "dense/bias"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam_1"
  input: "dense/kernel"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam_1"
  input: "global_step"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/control_dependency"
  input: "^save/MergeV2Checkpoints"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dense/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dense/bias"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dense/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dense/bias/Adam"
  input: "save/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dense/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dense/bias/Adam_1"
  input: "save/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dense/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dense/kernel"
  input: "save/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dense/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dense/kernel/Adam"
  input: "save/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dense/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dense/kernel/Adam_1"
  input: "save/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_8/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_8"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_8/tensor_names"
  input: "save/RestoreV2_8/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2_8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_9/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_9"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_9/tensor_names"
  input: "save/RestoreV2_9/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "save/RestoreV2_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_10/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_10"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_10/tensor_names"
  input: "save/RestoreV2_10/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_11/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_11"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_11/tensor_names"
  input: "save/RestoreV2_11/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_12/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_12/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_12"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_12/tensor_names"
  input: "save/RestoreV2_12/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "save/RestoreV2_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_13/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_13/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_13"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_13/tensor_names"
  input: "save/RestoreV2_13/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_14/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_14/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_14"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_14/tensor_names"
  input: "save/RestoreV2_14/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 23
          }
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_15/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_15/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_15"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_15/tensor_names"
  input: "save/RestoreV2_15/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  input: "save/RestoreV2_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_16/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_16/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_16"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_16/tensor_names"
  input: "save/RestoreV2_16/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_17/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_17/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_17"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_17/tensor_names"
  input: "save/RestoreV2_17/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_18/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_18/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_18"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_18/tensor_names"
  input: "save/RestoreV2_18/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  input: "save/RestoreV2_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_19/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_19/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_19"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_19/tensor_names"
  input: "save/RestoreV2_19/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_20/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_20/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_20"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_20/tensor_names"
  input: "save/RestoreV2_20/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_21/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_21/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_21"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_21/tensor_names"
  input: "save/RestoreV2_21/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
  input: "save/RestoreV2_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_22/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_22/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_22"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_22/tensor_names"
  input: "save/RestoreV2_22/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_23/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_23/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_23"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_23/tensor_names"
  input: "save/RestoreV2_23/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_24/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_24/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_24"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_24/tensor_names"
  input: "save/RestoreV2_24/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
  input: "save/RestoreV2_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_25/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_25/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_25"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_25/tensor_names"
  input: "save/RestoreV2_25/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_26/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_26/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_26"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_26/tensor_names"
  input: "save/RestoreV2_26/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
          dim {
            size: 320
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 24
}
